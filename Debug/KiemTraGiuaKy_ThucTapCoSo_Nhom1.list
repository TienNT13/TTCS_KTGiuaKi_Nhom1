
KiemTraGiuaKy_ThucTapCoSo_Nhom1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005eec  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000924  0800608c  0800608c  0000708c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080069b0  080069b0  00008078  2**0
                  CONTENTS
  4 .ARM          00000008  080069b0  080069b0  000079b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080069b8  080069b8  00008078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080069b8  080069b8  000079b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080069bc  080069bc  000079bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080069c0  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001468  20000078  08006a38  00008078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200014e0  08006a38  000084e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003af3f  00000000  00000000  000080a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000328a  00000000  00000000  00042fe7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001258  00000000  00000000  00046278  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000002fb  00000000  00000000  000474d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012603  00000000  00000000  000477cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c887  00000000  00000000  00059dce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00057ca1  00000000  00000000  00066655  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000be  00000000  00000000  000be2f6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000522c  00000000  00000000  000be3b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  000c35e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_ranges 00000cb0  00000000  00000000  000c3636  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006074 	.word	0x08006074

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	08006074 	.word	0x08006074

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_dmul>:
 8000280:	b570      	push	{r4, r5, r6, lr}
 8000282:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000286:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800028a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800028e:	bf1d      	ittte	ne
 8000290:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000294:	ea94 0f0c 	teqne	r4, ip
 8000298:	ea95 0f0c 	teqne	r5, ip
 800029c:	f000 f8de 	bleq	800045c <__aeabi_dmul+0x1dc>
 80002a0:	442c      	add	r4, r5
 80002a2:	ea81 0603 	eor.w	r6, r1, r3
 80002a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002b2:	bf18      	it	ne
 80002b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80002c0:	d038      	beq.n	8000334 <__aeabi_dmul+0xb4>
 80002c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002c6:	f04f 0500 	mov.w	r5, #0
 80002ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ce:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80002d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002d6:	f04f 0600 	mov.w	r6, #0
 80002da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002de:	f09c 0f00 	teq	ip, #0
 80002e2:	bf18      	it	ne
 80002e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002e8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80002ec:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80002f0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80002f4:	d204      	bcs.n	8000300 <__aeabi_dmul+0x80>
 80002f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002fa:	416d      	adcs	r5, r5
 80002fc:	eb46 0606 	adc.w	r6, r6, r6
 8000300:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000304:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000308:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800030c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000310:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000314:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000318:	bf88      	it	hi
 800031a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800031e:	d81e      	bhi.n	800035e <__aeabi_dmul+0xde>
 8000320:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000338:	ea46 0101 	orr.w	r1, r6, r1
 800033c:	ea40 0002 	orr.w	r0, r0, r2
 8000340:	ea81 0103 	eor.w	r1, r1, r3
 8000344:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000348:	bfc2      	ittt	gt
 800034a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800034e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000352:	bd70      	popgt	{r4, r5, r6, pc}
 8000354:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000358:	f04f 0e00 	mov.w	lr, #0
 800035c:	3c01      	subs	r4, #1
 800035e:	f300 80ab 	bgt.w	80004b8 <__aeabi_dmul+0x238>
 8000362:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000366:	bfde      	ittt	le
 8000368:	2000      	movle	r0, #0
 800036a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800036e:	bd70      	pople	{r4, r5, r6, pc}
 8000370:	f1c4 0400 	rsb	r4, r4, #0
 8000374:	3c20      	subs	r4, #32
 8000376:	da35      	bge.n	80003e4 <__aeabi_dmul+0x164>
 8000378:	340c      	adds	r4, #12
 800037a:	dc1b      	bgt.n	80003b4 <__aeabi_dmul+0x134>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0520 	rsb	r5, r4, #32
 8000384:	fa00 f305 	lsl.w	r3, r0, r5
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea40 0002 	orr.w	r0, r0, r2
 8000394:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000398:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800039c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003a0:	fa21 f604 	lsr.w	r6, r1, r4
 80003a4:	eb42 0106 	adc.w	r1, r2, r6
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f1c4 040c 	rsb	r4, r4, #12
 80003b8:	f1c4 0520 	rsb	r5, r4, #32
 80003bc:	fa00 f304 	lsl.w	r3, r0, r4
 80003c0:	fa20 f005 	lsr.w	r0, r0, r5
 80003c4:	fa01 f204 	lsl.w	r2, r1, r4
 80003c8:	ea40 0002 	orr.w	r0, r0, r2
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d4:	f141 0100 	adc.w	r1, r1, #0
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 0520 	rsb	r5, r4, #32
 80003e8:	fa00 f205 	lsl.w	r2, r0, r5
 80003ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80003f0:	fa20 f304 	lsr.w	r3, r0, r4
 80003f4:	fa01 f205 	lsl.w	r2, r1, r5
 80003f8:	ea43 0302 	orr.w	r3, r3, r2
 80003fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000404:	fa21 f204 	lsr.w	r2, r1, r4
 8000408:	ea20 0002 	bic.w	r0, r0, r2
 800040c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000410:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000414:	bf08      	it	eq
 8000416:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800041a:	bd70      	pop	{r4, r5, r6, pc}
 800041c:	f094 0f00 	teq	r4, #0
 8000420:	d10f      	bne.n	8000442 <__aeabi_dmul+0x1c2>
 8000422:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000426:	0040      	lsls	r0, r0, #1
 8000428:	eb41 0101 	adc.w	r1, r1, r1
 800042c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000430:	bf08      	it	eq
 8000432:	3c01      	subeq	r4, #1
 8000434:	d0f7      	beq.n	8000426 <__aeabi_dmul+0x1a6>
 8000436:	ea41 0106 	orr.w	r1, r1, r6
 800043a:	f095 0f00 	teq	r5, #0
 800043e:	bf18      	it	ne
 8000440:	4770      	bxne	lr
 8000442:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000446:	0052      	lsls	r2, r2, #1
 8000448:	eb43 0303 	adc.w	r3, r3, r3
 800044c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000450:	bf08      	it	eq
 8000452:	3d01      	subeq	r5, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1c6>
 8000456:	ea43 0306 	orr.w	r3, r3, r6
 800045a:	4770      	bx	lr
 800045c:	ea94 0f0c 	teq	r4, ip
 8000460:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000464:	bf18      	it	ne
 8000466:	ea95 0f0c 	teqne	r5, ip
 800046a:	d00c      	beq.n	8000486 <__aeabi_dmul+0x206>
 800046c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000470:	bf18      	it	ne
 8000472:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000476:	d1d1      	bne.n	800041c <__aeabi_dmul+0x19c>
 8000478:	ea81 0103 	eor.w	r1, r1, r3
 800047c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000480:	f04f 0000 	mov.w	r0, #0
 8000484:	bd70      	pop	{r4, r5, r6, pc}
 8000486:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800048a:	bf06      	itte	eq
 800048c:	4610      	moveq	r0, r2
 800048e:	4619      	moveq	r1, r3
 8000490:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000494:	d019      	beq.n	80004ca <__aeabi_dmul+0x24a>
 8000496:	ea94 0f0c 	teq	r4, ip
 800049a:	d102      	bne.n	80004a2 <__aeabi_dmul+0x222>
 800049c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004a0:	d113      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004a2:	ea95 0f0c 	teq	r5, ip
 80004a6:	d105      	bne.n	80004b4 <__aeabi_dmul+0x234>
 80004a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ac:	bf1c      	itt	ne
 80004ae:	4610      	movne	r0, r2
 80004b0:	4619      	movne	r1, r3
 80004b2:	d10a      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004b4:	ea81 0103 	eor.w	r1, r1, r3
 80004b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004bc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd70      	pop	{r4, r5, r6, pc}
 80004ca:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004ce:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80004d2:	bd70      	pop	{r4, r5, r6, pc}

080004d4 <__aeabi_drsub>:
 80004d4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80004d8:	e002      	b.n	80004e0 <__adddf3>
 80004da:	bf00      	nop

080004dc <__aeabi_dsub>:
 80004dc:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080004e0 <__adddf3>:
 80004e0:	b530      	push	{r4, r5, lr}
 80004e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004ea:	ea94 0f05 	teq	r4, r5
 80004ee:	bf08      	it	eq
 80004f0:	ea90 0f02 	teqeq	r0, r2
 80004f4:	bf1f      	itttt	ne
 80004f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000502:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000506:	f000 80e2 	beq.w	80006ce <__adddf3+0x1ee>
 800050a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800050e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000512:	bfb8      	it	lt
 8000514:	426d      	neglt	r5, r5
 8000516:	dd0c      	ble.n	8000532 <__adddf3+0x52>
 8000518:	442c      	add	r4, r5
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	ea82 0000 	eor.w	r0, r2, r0
 8000526:	ea83 0101 	eor.w	r1, r3, r1
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	2d36      	cmp	r5, #54	@ 0x36
 8000534:	bf88      	it	hi
 8000536:	bd30      	pophi	{r4, r5, pc}
 8000538:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800053c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000540:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000544:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000548:	d002      	beq.n	8000550 <__adddf3+0x70>
 800054a:	4240      	negs	r0, r0
 800054c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000550:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000554:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000558:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800055c:	d002      	beq.n	8000564 <__adddf3+0x84>
 800055e:	4252      	negs	r2, r2
 8000560:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000564:	ea94 0f05 	teq	r4, r5
 8000568:	f000 80a7 	beq.w	80006ba <__adddf3+0x1da>
 800056c:	f1a4 0401 	sub.w	r4, r4, #1
 8000570:	f1d5 0e20 	rsbs	lr, r5, #32
 8000574:	db0d      	blt.n	8000592 <__adddf3+0xb2>
 8000576:	fa02 fc0e 	lsl.w	ip, r2, lr
 800057a:	fa22 f205 	lsr.w	r2, r2, r5
 800057e:	1880      	adds	r0, r0, r2
 8000580:	f141 0100 	adc.w	r1, r1, #0
 8000584:	fa03 f20e 	lsl.w	r2, r3, lr
 8000588:	1880      	adds	r0, r0, r2
 800058a:	fa43 f305 	asr.w	r3, r3, r5
 800058e:	4159      	adcs	r1, r3
 8000590:	e00e      	b.n	80005b0 <__adddf3+0xd0>
 8000592:	f1a5 0520 	sub.w	r5, r5, #32
 8000596:	f10e 0e20 	add.w	lr, lr, #32
 800059a:	2a01      	cmp	r2, #1
 800059c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005a0:	bf28      	it	cs
 80005a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005a6:	fa43 f305 	asr.w	r3, r3, r5
 80005aa:	18c0      	adds	r0, r0, r3
 80005ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	d507      	bpl.n	80005c6 <__adddf3+0xe6>
 80005b6:	f04f 0e00 	mov.w	lr, #0
 80005ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80005be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005c6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80005ca:	d31b      	bcc.n	8000604 <__adddf3+0x124>
 80005cc:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80005d0:	d30c      	bcc.n	80005ec <__adddf3+0x10c>
 80005d2:	0849      	lsrs	r1, r1, #1
 80005d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005dc:	f104 0401 	add.w	r4, r4, #1
 80005e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005e4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80005e8:	f080 809a 	bcs.w	8000720 <__adddf3+0x240>
 80005ec:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80005f0:	bf08      	it	eq
 80005f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005f6:	f150 0000 	adcs.w	r0, r0, #0
 80005fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fe:	ea41 0105 	orr.w	r1, r1, r5
 8000602:	bd30      	pop	{r4, r5, pc}
 8000604:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000608:	4140      	adcs	r0, r0
 800060a:	eb41 0101 	adc.w	r1, r1, r1
 800060e:	3c01      	subs	r4, #1
 8000610:	bf28      	it	cs
 8000612:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000616:	d2e9      	bcs.n	80005ec <__adddf3+0x10c>
 8000618:	f091 0f00 	teq	r1, #0
 800061c:	bf04      	itt	eq
 800061e:	4601      	moveq	r1, r0
 8000620:	2000      	moveq	r0, #0
 8000622:	fab1 f381 	clz	r3, r1
 8000626:	bf08      	it	eq
 8000628:	3320      	addeq	r3, #32
 800062a:	f1a3 030b 	sub.w	r3, r3, #11
 800062e:	f1b3 0220 	subs.w	r2, r3, #32
 8000632:	da0c      	bge.n	800064e <__adddf3+0x16e>
 8000634:	320c      	adds	r2, #12
 8000636:	dd08      	ble.n	800064a <__adddf3+0x16a>
 8000638:	f102 0c14 	add.w	ip, r2, #20
 800063c:	f1c2 020c 	rsb	r2, r2, #12
 8000640:	fa01 f00c 	lsl.w	r0, r1, ip
 8000644:	fa21 f102 	lsr.w	r1, r1, r2
 8000648:	e00c      	b.n	8000664 <__adddf3+0x184>
 800064a:	f102 0214 	add.w	r2, r2, #20
 800064e:	bfd8      	it	le
 8000650:	f1c2 0c20 	rsble	ip, r2, #32
 8000654:	fa01 f102 	lsl.w	r1, r1, r2
 8000658:	fa20 fc0c 	lsr.w	ip, r0, ip
 800065c:	bfdc      	itt	le
 800065e:	ea41 010c 	orrle.w	r1, r1, ip
 8000662:	4090      	lslle	r0, r2
 8000664:	1ae4      	subs	r4, r4, r3
 8000666:	bfa2      	ittt	ge
 8000668:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800066c:	4329      	orrge	r1, r5
 800066e:	bd30      	popge	{r4, r5, pc}
 8000670:	ea6f 0404 	mvn.w	r4, r4
 8000674:	3c1f      	subs	r4, #31
 8000676:	da1c      	bge.n	80006b2 <__adddf3+0x1d2>
 8000678:	340c      	adds	r4, #12
 800067a:	dc0e      	bgt.n	800069a <__adddf3+0x1ba>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0220 	rsb	r2, r4, #32
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f302 	lsl.w	r3, r1, r2
 800068c:	ea40 0003 	orr.w	r0, r0, r3
 8000690:	fa21 f304 	lsr.w	r3, r1, r4
 8000694:	ea45 0103 	orr.w	r1, r5, r3
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	f1c4 040c 	rsb	r4, r4, #12
 800069e:	f1c4 0220 	rsb	r2, r4, #32
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 f304 	lsl.w	r3, r1, r4
 80006aa:	ea40 0003 	orr.w	r0, r0, r3
 80006ae:	4629      	mov	r1, r5
 80006b0:	bd30      	pop	{r4, r5, pc}
 80006b2:	fa21 f004 	lsr.w	r0, r1, r4
 80006b6:	4629      	mov	r1, r5
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f094 0f00 	teq	r4, #0
 80006be:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80006c2:	bf06      	itte	eq
 80006c4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80006c8:	3401      	addeq	r4, #1
 80006ca:	3d01      	subne	r5, #1
 80006cc:	e74e      	b.n	800056c <__adddf3+0x8c>
 80006ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006d2:	bf18      	it	ne
 80006d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006d8:	d029      	beq.n	800072e <__adddf3+0x24e>
 80006da:	ea94 0f05 	teq	r4, r5
 80006de:	bf08      	it	eq
 80006e0:	ea90 0f02 	teqeq	r0, r2
 80006e4:	d005      	beq.n	80006f2 <__adddf3+0x212>
 80006e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006ea:	bf04      	itt	eq
 80006ec:	4619      	moveq	r1, r3
 80006ee:	4610      	moveq	r0, r2
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	ea91 0f03 	teq	r1, r3
 80006f6:	bf1e      	ittt	ne
 80006f8:	2100      	movne	r1, #0
 80006fa:	2000      	movne	r0, #0
 80006fc:	bd30      	popne	{r4, r5, pc}
 80006fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000702:	d105      	bne.n	8000710 <__adddf3+0x230>
 8000704:	0040      	lsls	r0, r0, #1
 8000706:	4149      	adcs	r1, r1
 8000708:	bf28      	it	cs
 800070a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800070e:	bd30      	pop	{r4, r5, pc}
 8000710:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000714:	bf3c      	itt	cc
 8000716:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800071a:	bd30      	popcc	{r4, r5, pc}
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000720:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000724:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000728:	f04f 0000 	mov.w	r0, #0
 800072c:	bd30      	pop	{r4, r5, pc}
 800072e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000732:	bf1a      	itte	ne
 8000734:	4619      	movne	r1, r3
 8000736:	4610      	movne	r0, r2
 8000738:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800073c:	bf1c      	itt	ne
 800073e:	460b      	movne	r3, r1
 8000740:	4602      	movne	r2, r0
 8000742:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000746:	bf06      	itte	eq
 8000748:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800074c:	ea91 0f03 	teqeq	r1, r3
 8000750:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000754:	bd30      	pop	{r4, r5, pc}
 8000756:	bf00      	nop

08000758 <__aeabi_ui2d>:
 8000758:	f090 0f00 	teq	r0, #0
 800075c:	bf04      	itt	eq
 800075e:	2100      	moveq	r1, #0
 8000760:	4770      	bxeq	lr
 8000762:	b530      	push	{r4, r5, lr}
 8000764:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000768:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800076c:	f04f 0500 	mov.w	r5, #0
 8000770:	f04f 0100 	mov.w	r1, #0
 8000774:	e750      	b.n	8000618 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_i2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800078c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000790:	bf48      	it	mi
 8000792:	4240      	negmi	r0, r0
 8000794:	f04f 0100 	mov.w	r1, #0
 8000798:	e73e      	b.n	8000618 <__adddf3+0x138>
 800079a:	bf00      	nop

0800079c <__aeabi_f2d>:
 800079c:	0042      	lsls	r2, r0, #1
 800079e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007aa:	bf1f      	itttt	ne
 80007ac:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80007b0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80007b4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80007b8:	4770      	bxne	lr
 80007ba:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80007be:	bf08      	it	eq
 80007c0:	4770      	bxeq	lr
 80007c2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80007c6:	bf04      	itt	eq
 80007c8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80007cc:	4770      	bxeq	lr
 80007ce:	b530      	push	{r4, r5, lr}
 80007d0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80007d4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80007d8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	e71c      	b.n	8000618 <__adddf3+0x138>
 80007de:	bf00      	nop

080007e0 <__aeabi_ul2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f04f 0500 	mov.w	r5, #0
 80007ee:	e00a      	b.n	8000806 <__aeabi_l2d+0x16>

080007f0 <__aeabi_l2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80007fe:	d502      	bpl.n	8000806 <__aeabi_l2d+0x16>
 8000800:	4240      	negs	r0, r0
 8000802:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000806:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800080a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800080e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000812:	f43f aed8 	beq.w	80005c6 <__adddf3+0xe6>
 8000816:	f04f 0203 	mov.w	r2, #3
 800081a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800081e:	bf18      	it	ne
 8000820:	3203      	addne	r2, #3
 8000822:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000826:	bf18      	it	ne
 8000828:	3203      	addne	r2, #3
 800082a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800082e:	f1c2 0320 	rsb	r3, r2, #32
 8000832:	fa00 fc03 	lsl.w	ip, r0, r3
 8000836:	fa20 f002 	lsr.w	r0, r0, r2
 800083a:	fa01 fe03 	lsl.w	lr, r1, r3
 800083e:	ea40 000e 	orr.w	r0, r0, lr
 8000842:	fa21 f102 	lsr.w	r1, r1, r2
 8000846:	4414      	add	r4, r2
 8000848:	e6bd      	b.n	80005c6 <__adddf3+0xe6>
 800084a:	bf00      	nop

0800084c <__aeabi_d2f>:
 800084c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000850:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000854:	bf24      	itt	cs
 8000856:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 800085a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 800085e:	d90d      	bls.n	800087c <__aeabi_d2f+0x30>
 8000860:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000864:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000868:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800086c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000870:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000874:	bf08      	it	eq
 8000876:	f020 0001 	biceq.w	r0, r0, #1
 800087a:	4770      	bx	lr
 800087c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000880:	d121      	bne.n	80008c6 <__aeabi_d2f+0x7a>
 8000882:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000886:	bfbc      	itt	lt
 8000888:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 800088c:	4770      	bxlt	lr
 800088e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000892:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000896:	f1c2 0218 	rsb	r2, r2, #24
 800089a:	f1c2 0c20 	rsb	ip, r2, #32
 800089e:	fa10 f30c 	lsls.w	r3, r0, ip
 80008a2:	fa20 f002 	lsr.w	r0, r0, r2
 80008a6:	bf18      	it	ne
 80008a8:	f040 0001 	orrne.w	r0, r0, #1
 80008ac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008b0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80008b4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80008b8:	ea40 000c 	orr.w	r0, r0, ip
 80008bc:	fa23 f302 	lsr.w	r3, r3, r2
 80008c0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80008c4:	e7cc      	b.n	8000860 <__aeabi_d2f+0x14>
 80008c6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80008ca:	d107      	bne.n	80008dc <__aeabi_d2f+0x90>
 80008cc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80008d0:	bf1e      	ittt	ne
 80008d2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 80008d6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 80008da:	4770      	bxne	lr
 80008dc:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 80008e0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80008e4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80008e8:	4770      	bx	lr
 80008ea:	bf00      	nop

080008ec <Ledboard_init>:
#define COI_GPIO_PIN							GPIO_Pin_9
#define COI_PIN									9
#define COI_Control_SetClock					RCC_AHB1Periph_GPIOC

// khoi tao led board
static void Ledboard_init(void) {
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
	// Khai bao bien thuoc kieu struct
	GPIO_InitTypeDef GPIO_InitStructure;

	// Cap xung clock hoat dong cho port A
	RCC_AHB1PeriphClockCmd(LEDBOARDControl_SetClock, ENABLE);
 80008f2:	2101      	movs	r1, #1
 80008f4:	2001      	movs	r0, #1
 80008f6:	f001 fa85 	bl	8001e04 <RCC_AHB1PeriphClockCmd>

	// chon chan su dung chuc nang dieu khien led red 1

	GPIO_InitStructure.GPIO_Pin = LEDBOARD_GPIO_PIN;
 80008fa:	2320      	movs	r3, #32
 80008fc:	603b      	str	r3, [r7, #0]

	//Chon chan dieu khien led1 che do output

	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 80008fe:	2301      	movs	r3, #1
 8000900:	713b      	strb	r3, [r7, #4]

	// Toc do xu ly

	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000902:	2302      	movs	r3, #2
 8000904:	717b      	strb	r3, [r7, #5]

	// PUSH PULL

	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8000906:	2300      	movs	r3, #0
 8000908:	71bb      	strb	r3, [r7, #6]

	// trang thai ban dau tren chan la Pull down

	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 800090a:	2301      	movs	r3, #1
 800090c:	71fb      	strb	r3, [r7, #7]

	// khoi tao cac gia tri

	GPIO_Init(LEDBOARD_GPIO_PORT, &GPIO_InitStructure);
 800090e:	463b      	mov	r3, r7
 8000910:	4619      	mov	r1, r3
 8000912:	4803      	ldr	r0, [pc, #12]	@ (8000920 <Ledboard_init+0x34>)
 8000914:	f001 f8d8 	bl	8001ac8 <GPIO_Init>
}
 8000918:	bf00      	nop
 800091a:	3708      	adds	r7, #8
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	40020000 	.word	0x40020000

08000924 <Ledred1_init>:

// khoi tao led red 1
static void Ledred1_init(void) {
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
	// Khai bao bien thuoc kieu struct
	GPIO_InitTypeDef GPIO_InitStructure;

	// Cap xung clock hoat dong cho port A
	RCC_AHB1PeriphClockCmd(LEDRED1Control_SetClock, ENABLE);
 800092a:	2101      	movs	r1, #1
 800092c:	2001      	movs	r0, #1
 800092e:	f001 fa69 	bl	8001e04 <RCC_AHB1PeriphClockCmd>

	// chon chan su dung chuc nang dieu khien led red 1

	GPIO_InitStructure.GPIO_Pin = LEDRED1_GPIO_PIN;
 8000932:	2302      	movs	r3, #2
 8000934:	603b      	str	r3, [r7, #0]

	//Chon chan dieu khien led1 che do output

	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8000936:	2301      	movs	r3, #1
 8000938:	713b      	strb	r3, [r7, #4]

	// Toc do xu ly

	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 800093a:	2302      	movs	r3, #2
 800093c:	717b      	strb	r3, [r7, #5]

	// PUSH PULL

	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 800093e:	2300      	movs	r3, #0
 8000940:	71bb      	strb	r3, [r7, #6]

	// trang thai ban dau tren chan la Pull down

	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8000942:	2301      	movs	r3, #1
 8000944:	71fb      	strb	r3, [r7, #7]

	// khoi tao cac gia tri

	GPIO_Init(LEDRED1_GPIO_PORT, &GPIO_InitStructure);
 8000946:	463b      	mov	r3, r7
 8000948:	4619      	mov	r1, r3
 800094a:	4803      	ldr	r0, [pc, #12]	@ (8000958 <Ledred1_init+0x34>)
 800094c:	f001 f8bc 	bl	8001ac8 <GPIO_Init>
}
 8000950:	bf00      	nop
 8000952:	3708      	adds	r7, #8
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	40020000 	.word	0x40020000

0800095c <Ledred2_init>:


// khoi tao led red 2
static void Ledred2_init(void) {
 800095c:	b580      	push	{r7, lr}
 800095e:	b082      	sub	sp, #8
 8000960:	af00      	add	r7, sp, #0
	// Khai bao bien thuoc kieu struct
	GPIO_InitTypeDef GPIO_InitStructure;

	// Cap xung clock hoat dong cho port B
	RCC_AHB1PeriphClockCmd(LEDRED2Control_SetClock, ENABLE);
 8000962:	2101      	movs	r1, #1
 8000964:	2002      	movs	r0, #2
 8000966:	f001 fa4d 	bl	8001e04 <RCC_AHB1PeriphClockCmd>

	// chon chan su dung chuc nang dieu khien led red 2

	GPIO_InitStructure.GPIO_Pin = LEDRED2_GPIO_PIN;
 800096a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800096e:	603b      	str	r3, [r7, #0]

	//Chon chan dieu khien led1 che do output

	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8000970:	2301      	movs	r3, #1
 8000972:	713b      	strb	r3, [r7, #4]

	// Toc do xu ly

	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000974:	2302      	movs	r3, #2
 8000976:	717b      	strb	r3, [r7, #5]

	// PUSH PULL

	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8000978:	2300      	movs	r3, #0
 800097a:	71bb      	strb	r3, [r7, #6]

	// trang thai ban dau tren chan la Pull down

	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 800097c:	2301      	movs	r3, #1
 800097e:	71fb      	strb	r3, [r7, #7]

	// khoi tao cac gia tri

	GPIO_Init(LEDRED2_GPIO_PORT, &GPIO_InitStructure);
 8000980:	463b      	mov	r3, r7
 8000982:	4619      	mov	r1, r3
 8000984:	4803      	ldr	r0, [pc, #12]	@ (8000994 <Ledred2_init+0x38>)
 8000986:	f001 f89f 	bl	8001ac8 <GPIO_Init>
}
 800098a:	bf00      	nop
 800098c:	3708      	adds	r7, #8
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	40020400 	.word	0x40020400

08000998 <Ledgreen1_init>:

// khoi tao led green 1
static void Ledgreen1_init(void) {
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0
	// Khai bao bien thuoc kieu struct
	GPIO_InitTypeDef GPIO_InitStructure;

	// Cap xung clock hoat dong cho port A
	RCC_AHB1PeriphClockCmd(LEDGREEN1Control_SetClock, ENABLE);
 800099e:	2101      	movs	r1, #1
 80009a0:	2001      	movs	r0, #1
 80009a2:	f001 fa2f 	bl	8001e04 <RCC_AHB1PeriphClockCmd>

	// chon chan su dung chuc nang dieu khien led green 1

	GPIO_InitStructure.GPIO_Pin = LEDGREEN1_GPIO_PIN;
 80009a6:	2301      	movs	r3, #1
 80009a8:	603b      	str	r3, [r7, #0]

	//Chon chan dieu khien led1 che do output

	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 80009aa:	2301      	movs	r3, #1
 80009ac:	713b      	strb	r3, [r7, #4]

	// Toc do xu ly

	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80009ae:	2302      	movs	r3, #2
 80009b0:	717b      	strb	r3, [r7, #5]

	// PUSH PULL

	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80009b2:	2300      	movs	r3, #0
 80009b4:	71bb      	strb	r3, [r7, #6]

	// trang thai ban dau tren chan la Pull down

	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 80009b6:	2301      	movs	r3, #1
 80009b8:	71fb      	strb	r3, [r7, #7]

	// khoi tao cac gia tri

	GPIO_Init(LEDGREEN1_GPIO_PORT, &GPIO_InitStructure);
 80009ba:	463b      	mov	r3, r7
 80009bc:	4619      	mov	r1, r3
 80009be:	4803      	ldr	r0, [pc, #12]	@ (80009cc <Ledgreen1_init+0x34>)
 80009c0:	f001 f882 	bl	8001ac8 <GPIO_Init>
}
 80009c4:	bf00      	nop
 80009c6:	3708      	adds	r7, #8
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	40020000 	.word	0x40020000

080009d0 <Ledgreen2_init>:

// khoi tao led green 2
static void Ledgreen2_init(void) {
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b082      	sub	sp, #8
 80009d4:	af00      	add	r7, sp, #0
	// Khai bao bien thuoc kieu struct
	GPIO_InitTypeDef GPIO_InitStructure;

	// Cap xung clock hoat dong cho port A
	RCC_AHB1PeriphClockCmd(LEDGREEN2Control_SetClock, ENABLE);
 80009d6:	2101      	movs	r1, #1
 80009d8:	2001      	movs	r0, #1
 80009da:	f001 fa13 	bl	8001e04 <RCC_AHB1PeriphClockCmd>

	// chon chan su dung chuc nang dieu khien led green 2

	GPIO_InitStructure.GPIO_Pin = LEDGREEN2_GPIO_PIN;
 80009de:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80009e2:	603b      	str	r3, [r7, #0]

	//Chon chan dieu khien led1 che do output

	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 80009e4:	2301      	movs	r3, #1
 80009e6:	713b      	strb	r3, [r7, #4]

	// Toc do xu ly

	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80009e8:	2302      	movs	r3, #2
 80009ea:	717b      	strb	r3, [r7, #5]

	// PUSH PULL

	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80009ec:	2300      	movs	r3, #0
 80009ee:	71bb      	strb	r3, [r7, #6]

	// trang thai ban dau tren chan la Pull down

	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 80009f0:	2301      	movs	r3, #1
 80009f2:	71fb      	strb	r3, [r7, #7]

	// khoi tao cac gia tri

	GPIO_Init(LEDGREEN2_GPIO_PORT, &GPIO_InitStructure);
 80009f4:	463b      	mov	r3, r7
 80009f6:	4619      	mov	r1, r3
 80009f8:	4803      	ldr	r0, [pc, #12]	@ (8000a08 <Ledgreen2_init+0x38>)
 80009fa:	f001 f865 	bl	8001ac8 <GPIO_Init>
}
 80009fe:	bf00      	nop
 8000a00:	3708      	adds	r7, #8
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	40020000 	.word	0x40020000

08000a0c <Ledblue1_init>:

// khoi tao led blue 1
static void Ledblue1_init(void) {
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
	// Khai bao bien thuoc kieu struct
	GPIO_InitTypeDef GPIO_InitStructure;

	// Cap xung clock hoat dong cho port A
	RCC_AHB1PeriphClockCmd(LEDBLUE1Control_SetClock, ENABLE);
 8000a12:	2101      	movs	r1, #1
 8000a14:	2001      	movs	r0, #1
 8000a16:	f001 f9f5 	bl	8001e04 <RCC_AHB1PeriphClockCmd>

	// chon chan su dung chuc nang dieu khien led blue 1

	GPIO_InitStructure.GPIO_Pin = LEDBLUE1_GPIO_PIN;
 8000a1a:	2308      	movs	r3, #8
 8000a1c:	603b      	str	r3, [r7, #0]

	//Chon chan dieu khien led1 che do output

	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8000a1e:	2301      	movs	r3, #1
 8000a20:	713b      	strb	r3, [r7, #4]

	// Toc do xu ly

	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000a22:	2302      	movs	r3, #2
 8000a24:	717b      	strb	r3, [r7, #5]

	// PUSH PULL

	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8000a26:	2300      	movs	r3, #0
 8000a28:	71bb      	strb	r3, [r7, #6]

	// trang thai ban dau tren chan la Pull down

	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	71fb      	strb	r3, [r7, #7]

	// khoi tao cac gia tri

	GPIO_Init(LEDBLUE1_GPIO_PORT, &GPIO_InitStructure);
 8000a2e:	463b      	mov	r3, r7
 8000a30:	4619      	mov	r1, r3
 8000a32:	4803      	ldr	r0, [pc, #12]	@ (8000a40 <Ledblue1_init+0x34>)
 8000a34:	f001 f848 	bl	8001ac8 <GPIO_Init>
}
 8000a38:	bf00      	nop
 8000a3a:	3708      	adds	r7, #8
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	40020000 	.word	0x40020000

08000a44 <Ledblue2_init>:

static void Ledblue2_init(void) {
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b082      	sub	sp, #8
 8000a48:	af00      	add	r7, sp, #0
	// Khai bao bien thuoc kieu struct
	GPIO_InitTypeDef GPIO_InitStructure;

	// Cap xung clock hoat dong cho port A
	RCC_AHB1PeriphClockCmd(LEDBLUE2Control_SetClock, ENABLE);
 8000a4a:	2101      	movs	r1, #1
 8000a4c:	2001      	movs	r0, #1
 8000a4e:	f001 f9d9 	bl	8001e04 <RCC_AHB1PeriphClockCmd>

	// chon chan su dung chuc nang dieu khien led blue 2

	GPIO_InitStructure.GPIO_Pin = LEDBLUE2_GPIO_PIN;
 8000a52:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a56:	603b      	str	r3, [r7, #0]

	//Chon chan dieu khien led1 che do output

	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8000a58:	2301      	movs	r3, #1
 8000a5a:	713b      	strb	r3, [r7, #4]

	// Toc do xu ly

	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000a5c:	2302      	movs	r3, #2
 8000a5e:	717b      	strb	r3, [r7, #5]

	// PUSH PULL

	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8000a60:	2300      	movs	r3, #0
 8000a62:	71bb      	strb	r3, [r7, #6]

	// trang thai ban dau tren chan la Pull down

	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8000a64:	2301      	movs	r3, #1
 8000a66:	71fb      	strb	r3, [r7, #7]

	// khoi tao cac gia tri

	GPIO_Init(LEDBLUE2_GPIO_PORT, &GPIO_InitStructure);
 8000a68:	463b      	mov	r3, r7
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	4803      	ldr	r0, [pc, #12]	@ (8000a7c <Ledblue2_init+0x38>)
 8000a6e:	f001 f82b 	bl	8001ac8 <GPIO_Init>
}
 8000a72:	bf00      	nop
 8000a74:	3708      	adds	r7, #8
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	40020000 	.word	0x40020000

08000a80 <Button1_init>:


// khoi tao nut nhan 1
static void Button1_init(void) {
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0
	// Khai báo biến thuộc kiểu struct
	GPIO_InitTypeDef GPIO_InitStructure;

	// Cấp xung clock hoạt động cho PORT B

	RCC_AHB1PeriphClockCmd(BUTTON1Control_SetClock, ENABLE);
 8000a86:	2101      	movs	r1, #1
 8000a88:	2002      	movs	r0, #2
 8000a8a:	f001 f9bb 	bl	8001e04 <RCC_AHB1PeriphClockCmd>

	// chon chan su dung chuc nang dieu khien nut nhan 1

	GPIO_InitStructure.GPIO_Pin = BUTTON1_GPIO_PIN;
 8000a8e:	2320      	movs	r3, #32
 8000a90:	603b      	str	r3, [r7, #0]

	//Chon chan dieu khien nut che do input

	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 8000a92:	2300      	movs	r3, #0
 8000a94:	713b      	strb	r3, [r7, #4]

	// Toc do xu ly

	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000a96:	2302      	movs	r3, #2
 8000a98:	717b      	strb	r3, [r7, #5]

	// trang thai ban dau tren chan la Pull up

	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	71fb      	strb	r3, [r7, #7]

	// khoi tao cac gia tri

	GPIO_Init(BUTTON1_GPIO_PORT, &GPIO_InitStructure);
 8000a9e:	463b      	mov	r3, r7
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4803      	ldr	r0, [pc, #12]	@ (8000ab0 <Button1_init+0x30>)
 8000aa4:	f001 f810 	bl	8001ac8 <GPIO_Init>
}
 8000aa8:	bf00      	nop
 8000aaa:	3708      	adds	r7, #8
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	40020400 	.word	0x40020400

08000ab4 <Button2_init>:

// khoi tao nut nhan 2
static void Button2_init(void) {
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
	// Khai báo biến thuộc kiểu struct
	GPIO_InitTypeDef GPIO_InitStructure;

	// Cấp xung clock hoạt động cho PORT B

	RCC_AHB1PeriphClockCmd(BUTTON2Control_SetClock, ENABLE);
 8000aba:	2101      	movs	r1, #1
 8000abc:	2002      	movs	r0, #2
 8000abe:	f001 f9a1 	bl	8001e04 <RCC_AHB1PeriphClockCmd>

	// chon chan su dung chuc nang dieu khien nut nhan 2

	GPIO_InitStructure.GPIO_Pin = BUTTON2_GPIO_PIN;
 8000ac2:	2308      	movs	r3, #8
 8000ac4:	603b      	str	r3, [r7, #0]

	//Chon chan dieu khien nut che do output

	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	713b      	strb	r3, [r7, #4]

	// Toc do xu ly

	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000aca:	2302      	movs	r3, #2
 8000acc:	717b      	strb	r3, [r7, #5]

	// trang thai ban dau tren chan la Pull up

	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8000ace:	2301      	movs	r3, #1
 8000ad0:	71fb      	strb	r3, [r7, #7]

	// khoi tao cac gia tri

	GPIO_Init(BUTTON2_GPIO_PORT, &GPIO_InitStructure);
 8000ad2:	463b      	mov	r3, r7
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	4803      	ldr	r0, [pc, #12]	@ (8000ae4 <Button2_init+0x30>)
 8000ad8:	f000 fff6 	bl	8001ac8 <GPIO_Init>
}
 8000adc:	bf00      	nop
 8000ade:	3708      	adds	r7, #8
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	40020400 	.word	0x40020400

08000ae8 <Button3_init>:

// khoi tao nut nhan 3
static void Button3_init(void) {
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b082      	sub	sp, #8
 8000aec:	af00      	add	r7, sp, #0
	// Khai báo biến thuộc kiểu struct
	GPIO_InitTypeDef GPIO_InitStructure;

	// Cấp xung clock hoạt động cho PORT B

	RCC_AHB1PeriphClockCmd(BUTTON3Control_SetClock, ENABLE);
 8000aee:	2101      	movs	r1, #1
 8000af0:	2001      	movs	r0, #1
 8000af2:	f001 f987 	bl	8001e04 <RCC_AHB1PeriphClockCmd>

	// chon chan su dung chuc nang dieu khien nut nhan 3

	GPIO_InitStructure.GPIO_Pin = BUTTON3_GPIO_PIN;
 8000af6:	2310      	movs	r3, #16
 8000af8:	603b      	str	r3, [r7, #0]

	//Chon chan dieu khien nut che do output

	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 8000afa:	2300      	movs	r3, #0
 8000afc:	713b      	strb	r3, [r7, #4]

	// Toc do xu ly

	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000afe:	2302      	movs	r3, #2
 8000b00:	717b      	strb	r3, [r7, #5]

	// trang thai ban dau tren chan la Pull up

	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8000b02:	2301      	movs	r3, #1
 8000b04:	71fb      	strb	r3, [r7, #7]

	// khoi tao cac gia tri

	GPIO_Init(BUTTON3_GPIO_PORT, &GPIO_InitStructure);
 8000b06:	463b      	mov	r3, r7
 8000b08:	4619      	mov	r1, r3
 8000b0a:	4803      	ldr	r0, [pc, #12]	@ (8000b18 <Button3_init+0x30>)
 8000b0c:	f000 ffdc 	bl	8001ac8 <GPIO_Init>
}
 8000b10:	bf00      	nop
 8000b12:	3708      	adds	r7, #8
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	40020000 	.word	0x40020000

08000b1c <Button4_init>:

// khoi tao nut nhan 4
static void Button4_init(void) {
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
	// Khai báo biến thuộc kiểu struct
	GPIO_InitTypeDef GPIO_InitStructure;

	// Cấp xung clock hoạt động cho PORT A

	RCC_AHB1PeriphClockCmd(BUTTON4Control_SetClock, ENABLE);
 8000b22:	2101      	movs	r1, #1
 8000b24:	2002      	movs	r0, #2
 8000b26:	f001 f96d 	bl	8001e04 <RCC_AHB1PeriphClockCmd>

	// chon chan su dung chuc nang dieu khien nut nhan 4

	GPIO_InitStructure.GPIO_Pin = BUTTON4_GPIO_PIN;
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	603b      	str	r3, [r7, #0]

	//Chon chan dieu khien nut che do output

	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	713b      	strb	r3, [r7, #4]

	// Toc do xu ly

	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000b32:	2302      	movs	r3, #2
 8000b34:	717b      	strb	r3, [r7, #5]

	// trang thai ban dau tren chan la Pull up

	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8000b36:	2301      	movs	r3, #1
 8000b38:	71fb      	strb	r3, [r7, #7]

	// khoi tao cac gia tri

	GPIO_Init(BUTTON4_GPIO_PORT, &GPIO_InitStructure);
 8000b3a:	463b      	mov	r3, r7
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	4803      	ldr	r0, [pc, #12]	@ (8000b4c <Button4_init+0x30>)
 8000b40:	f000 ffc2 	bl	8001ac8 <GPIO_Init>
}
 8000b44:	bf00      	nop
 8000b46:	3708      	adds	r7, #8
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	40020400 	.word	0x40020400

08000b50 <Button5_init>:

// khoi tao nut nhan 5
static void Button5_init(void) {
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
	// Khai báo biến thuộc kiểu struct
	GPIO_InitTypeDef GPIO_InitStructure;

	// Cấp xung clock hoạt động cho PORT B

	RCC_AHB1PeriphClockCmd(BUTTON4Control_SetClock, ENABLE);
 8000b56:	2101      	movs	r1, #1
 8000b58:	2002      	movs	r0, #2
 8000b5a:	f001 f953 	bl	8001e04 <RCC_AHB1PeriphClockCmd>

	// chon chan su dung chuc nang dieu khien nut nhan 5

	GPIO_InitStructure.GPIO_Pin = BUTTON5_GPIO_PIN;
 8000b5e:	2310      	movs	r3, #16
 8000b60:	603b      	str	r3, [r7, #0]

	//Chon chan dieu khien nut che do output

	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 8000b62:	2300      	movs	r3, #0
 8000b64:	713b      	strb	r3, [r7, #4]

	// Toc do xu ly

	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000b66:	2302      	movs	r3, #2
 8000b68:	717b      	strb	r3, [r7, #5]

	// trang thai ban dau tren chan la Pull up

	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	71fb      	strb	r3, [r7, #7]

	// khoi tao cac gia tri

	GPIO_Init(BUTTON5_GPIO_PORT, &GPIO_InitStructure);
 8000b6e:	463b      	mov	r3, r7
 8000b70:	4619      	mov	r1, r3
 8000b72:	4803      	ldr	r0, [pc, #12]	@ (8000b80 <Button5_init+0x30>)
 8000b74:	f000 ffa8 	bl	8001ac8 <GPIO_Init>
}
 8000b78:	bf00      	nop
 8000b7a:	3708      	adds	r7, #8
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	40020400 	.word	0x40020400

08000b84 <coi_Init>:

static void coi_Init(void) {
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_AHB1PeriphClockCmd(COI_Control_SetClock, ENABLE);
 8000b8a:	2101      	movs	r1, #1
 8000b8c:	2004      	movs	r0, #4
 8000b8e:	f001 f939 	bl	8001e04 <RCC_AHB1PeriphClockCmd>


	GPIO_InitStructure.GPIO_Pin = COI_GPIO_PIN;
 8000b92:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000b96:	603b      	str	r3, [r7, #0]


	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8000b98:	2301      	movs	r3, #1
 8000b9a:	713b      	strb	r3, [r7, #4]

	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000b9c:	2302      	movs	r3, #2
 8000b9e:	717b      	strb	r3, [r7, #5]

	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	71bb      	strb	r3, [r7, #6]


	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_DOWN;
 8000ba4:	2302      	movs	r3, #2
 8000ba6:	71fb      	strb	r3, [r7, #7]


	GPIO_Init(COI_GPIO_PORT, &GPIO_InitStructure);
 8000ba8:	463b      	mov	r3, r7
 8000baa:	4619      	mov	r1, r3
 8000bac:	4803      	ldr	r0, [pc, #12]	@ (8000bbc <coi_Init+0x38>)
 8000bae:	f000 ff8b 	bl	8001ac8 <GPIO_Init>

}
 8000bb2:	bf00      	nop
 8000bb4:	3708      	adds	r7, #8
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	40020800 	.word	0x40020800

08000bc0 <coiControlSetStatus>:

// set trang thai cua buzzer (COI)
static void coiControlSetStatus( GPIO_TypeDef *GPIOx, uint16_t GPIO_PIN,
		uint8_t Status) {
 8000bc0:	b480      	push	{r7}
 8000bc2:	b083      	sub	sp, #12
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
 8000bc8:	460b      	mov	r3, r1
 8000bca:	807b      	strh	r3, [r7, #2]
 8000bcc:	4613      	mov	r3, r2
 8000bce:	707b      	strb	r3, [r7, #1]

	// SET bit in BSRR Registers

		if (Status == GPIO_PIN_SET) {
 8000bd0:	787b      	ldrb	r3, [r7, #1]
 8000bd2:	2b01      	cmp	r3, #1
 8000bd4:	d102      	bne.n	8000bdc <coiControlSetStatus+0x1c>
			GPIOx->BSRRL = GPIO_PIN;
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	887a      	ldrh	r2, [r7, #2]
 8000bda:	831a      	strh	r2, [r3, #24]
		}
		if (Status == GPIO_PIN_RESET) {
 8000bdc:	787b      	ldrb	r3, [r7, #1]
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d102      	bne.n	8000be8 <coiControlSetStatus+0x28>
			GPIOx->BSRRH = GPIO_PIN;
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	887a      	ldrh	r2, [r7, #2]
 8000be6:	835a      	strh	r2, [r3, #26]
		}
}
 8000be8:	bf00      	nop
 8000bea:	370c      	adds	r7, #12
 8000bec:	46bd      	mov	sp, r7
 8000bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf2:	4770      	bx	lr

08000bf4 <LedControl_SetStatus>:

//set trang thai LED
static void LedControl_SetStatus(GPIO_TypeDef *GPIOx, uint16_t GPIO_PIN,
		uint8_t Status) {
 8000bf4:	b480      	push	{r7}
 8000bf6:	b083      	sub	sp, #12
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
 8000bfc:	460b      	mov	r3, r1
 8000bfe:	807b      	strh	r3, [r7, #2]
 8000c00:	4613      	mov	r3, r2
 8000c02:	707b      	strb	r3, [r7, #1]
	// SET bit in BSRR Registers

	if (Status == GPIO_PIN_SET) {
 8000c04:	787b      	ldrb	r3, [r7, #1]
 8000c06:	2b01      	cmp	r3, #1
 8000c08:	d102      	bne.n	8000c10 <LedControl_SetStatus+0x1c>
		GPIOx->BSRRL = GPIO_PIN;
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	887a      	ldrh	r2, [r7, #2]
 8000c0e:	831a      	strh	r2, [r3, #24]
	}
	if (Status == GPIO_PIN_RESET) {
 8000c10:	787b      	ldrb	r3, [r7, #1]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d102      	bne.n	8000c1c <LedControl_SetStatus+0x28>
		GPIOx->BSRRH = GPIO_PIN;
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	887a      	ldrh	r2, [r7, #2]
 8000c1a:	835a      	strh	r2, [r3, #26]
	}
}
 8000c1c:	bf00      	nop
 8000c1e:	370c      	adds	r7, #12
 8000c20:	46bd      	mov	sp, r7
 8000c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c26:	4770      	bx	lr

08000c28 <ButtonRead_Status>:

// doc trang thai cua nut nhan
static uint8_t ButtonRead_Status(GPIO_TypeDef *GPIOx, uint16_t GPIO_PIN) {
 8000c28:	b480      	push	{r7}
 8000c2a:	b085      	sub	sp, #20
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
 8000c30:	460b      	mov	r3, r1
 8000c32:	807b      	strh	r3, [r7, #2]
	uint8_t Read_Pin = 0x00;
 8000c34:	2300      	movs	r3, #0
 8000c36:	73fb      	strb	r3, [r7, #15]

	if ((GPIOx->IDR & GPIO_PIN) != (uint32_t) Bit_RESET) {
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	691a      	ldr	r2, [r3, #16]
 8000c3c:	887b      	ldrh	r3, [r7, #2]
 8000c3e:	4013      	ands	r3, r2
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d002      	beq.n	8000c4a <ButtonRead_Status+0x22>
		Read_Pin = (uint8_t) Bit_SET;
 8000c44:	2301      	movs	r3, #1
 8000c46:	73fb      	strb	r3, [r7, #15]
 8000c48:	e001      	b.n	8000c4e <ButtonRead_Status+0x26>
	} else {
		Read_Pin = (uint8_t) Bit_RESET;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	73fb      	strb	r3, [r7, #15]
	}
	return Read_Pin;
 8000c4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c50:	4618      	mov	r0, r3
 8000c52:	3714      	adds	r7, #20
 8000c54:	46bd      	mov	sp, r7
 8000c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5a:	4770      	bx	lr

08000c5c <delay>:

void delay() {
 8000c5c:	b480      	push	{r7}
 8000c5e:	b083      	sub	sp, #12
 8000c60:	af00      	add	r7, sp, #0
	for (uint32_t i = 0; i < 500000; i++);
 8000c62:	2300      	movs	r3, #0
 8000c64:	607b      	str	r3, [r7, #4]
 8000c66:	e002      	b.n	8000c6e <delay+0x12>
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	3301      	adds	r3, #1
 8000c6c:	607b      	str	r3, [r7, #4]
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	4a04      	ldr	r2, [pc, #16]	@ (8000c84 <delay+0x28>)
 8000c72:	4293      	cmp	r3, r2
 8000c74:	d9f8      	bls.n	8000c68 <delay+0xc>
}
 8000c76:	bf00      	nop
 8000c78:	bf00      	nop
 8000c7a:	370c      	adds	r7, #12
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c82:	4770      	bx	lr
 8000c84:	0007a11f 	.word	0x0007a11f

08000c88 <main>:


int main (void){
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b084      	sub	sp, #16
 8000c8c:	af00      	add	r7, sp, #0

	AppCommon();
 8000c8e:	f000 fbad 	bl	80013ec <AppCommon>
	uint8_t nut_nhan2 ;
	uint8_t nut_nhan3 ;
	uint8_t nut_nhan4 ;
	uint8_t nut_nhan5 ;

	Ledboard_init();
 8000c92:	f7ff fe2b 	bl	80008ec <Ledboard_init>
	Ledred1_init();
 8000c96:	f7ff fe45 	bl	8000924 <Ledred1_init>
	Ledred2_init();
 8000c9a:	f7ff fe5f 	bl	800095c <Ledred2_init>
	Ledgreen1_init();
 8000c9e:	f7ff fe7b 	bl	8000998 <Ledgreen1_init>
	Ledgreen2_init();
 8000ca2:	f7ff fe95 	bl	80009d0 <Ledgreen2_init>
	Ledblue1_init();
 8000ca6:	f7ff feb1 	bl	8000a0c <Ledblue1_init>
	Ledblue2_init();
 8000caa:	f7ff fecb 	bl	8000a44 <Ledblue2_init>
	Button1_init();
 8000cae:	f7ff fee7 	bl	8000a80 <Button1_init>
	Button2_init();
 8000cb2:	f7ff feff 	bl	8000ab4 <Button2_init>
	Button3_init();
 8000cb6:	f7ff ff17 	bl	8000ae8 <Button3_init>
	Button4_init();
 8000cba:	f7ff ff2f 	bl	8000b1c <Button4_init>
	Button5_init();
 8000cbe:	f7ff ff47 	bl	8000b50 <Button5_init>
	coi_Init();
 8000cc2:	f7ff ff5f 	bl	8000b84 <coi_Init>

	// moi nap code xog den sang 2 lan
	for(int i = 0; i < 2; i++){
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	60fb      	str	r3, [r7, #12]
 8000cca:	e014      	b.n	8000cf6 <main+0x6e>
		LedControl_SetStatus(LEDBOARD_GPIO_PORT, LEDBOARD_GPIO_PIN, GPIO_PIN_HIGH);
 8000ccc:	2201      	movs	r2, #1
 8000cce:	2120      	movs	r1, #32
 8000cd0:	4859      	ldr	r0, [pc, #356]	@ (8000e38 <main+0x1b0>)
 8000cd2:	f7ff ff8f 	bl	8000bf4 <LedControl_SetStatus>
		delay_ms(500);
 8000cd6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000cda:	f000 fb55 	bl	8001388 <delay_ms>
		LedControl_SetStatus(LEDBOARD_GPIO_PORT, LEDBOARD_GPIO_PIN, GPIO_PIN_LOW);
 8000cde:	2200      	movs	r2, #0
 8000ce0:	2120      	movs	r1, #32
 8000ce2:	4855      	ldr	r0, [pc, #340]	@ (8000e38 <main+0x1b0>)
 8000ce4:	f7ff ff86 	bl	8000bf4 <LedControl_SetStatus>
		delay_ms(500);
 8000ce8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000cec:	f000 fb4c 	bl	8001388 <delay_ms>
	for(int i = 0; i < 2; i++){
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	3301      	adds	r3, #1
 8000cf4:	60fb      	str	r3, [r7, #12]
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	2b01      	cmp	r3, #1
 8000cfa:	dde7      	ble.n	8000ccc <main+0x44>
	}

	while(1){

		processGetValueSensor();
 8000cfc:	f000 fa08 	bl	8001110 <processGetValueSensor>
		processTimerScheduler();
 8000d00:	f002 f858 	bl	8002db4 <processTimerScheduler>
		ABL_Process(); // thay đổi độ sáng của led RGB theo cường độ ánh sáng với chu kỳ 100 ms.
 8000d04:	f000 fd30 	bl	8001768 <ABL_Process>

		// nut nhan 1 dieu khien ledred 1,2 , coi keu nhay 2 lan
		nut_nhan2 = ButtonRead_Status(BUTTON2_GPIO_PORT, BUTTON2_GPIO_PIN);
 8000d08:	2108      	movs	r1, #8
 8000d0a:	484c      	ldr	r0, [pc, #304]	@ (8000e3c <main+0x1b4>)
 8000d0c:	f7ff ff8c 	bl	8000c28 <ButtonRead_Status>
 8000d10:	4603      	mov	r3, r0
 8000d12:	713b      	strb	r3, [r7, #4]

		if ( nut_nhan2 == 0) {
 8000d14:	793b      	ldrb	r3, [r7, #4]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d136      	bne.n	8000d88 <main+0x100>
			for(int i = 0; i < 2; i++){
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	60bb      	str	r3, [r7, #8]
 8000d1e:	e030      	b.n	8000d82 <main+0xfa>
				delay_ms(500);
 8000d20:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000d24:	f000 fb30 	bl	8001388 <delay_ms>
				coiControlSetStatus(COI_GPIO_PORT, COI_GPIO_PIN, GPIO_PIN_HIGH);
 8000d28:	2201      	movs	r2, #1
 8000d2a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000d2e:	4844      	ldr	r0, [pc, #272]	@ (8000e40 <main+0x1b8>)
 8000d30:	f7ff ff46 	bl	8000bc0 <coiControlSetStatus>
				LedControl_SetStatus(LEDRED1_GPIO_PORT, LEDRED1_GPIO_PIN, GPIO_PIN_HIGH);
 8000d34:	2201      	movs	r2, #1
 8000d36:	2102      	movs	r1, #2
 8000d38:	483f      	ldr	r0, [pc, #252]	@ (8000e38 <main+0x1b0>)
 8000d3a:	f7ff ff5b 	bl	8000bf4 <LedControl_SetStatus>
				LedControl_SetStatus(LEDRED2_GPIO_PORT, LEDRED2_GPIO_PIN, GPIO_PIN_HIGH);
 8000d3e:	2201      	movs	r2, #1
 8000d40:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d44:	483d      	ldr	r0, [pc, #244]	@ (8000e3c <main+0x1b4>)
 8000d46:	f7ff ff55 	bl	8000bf4 <LedControl_SetStatus>

				delay_ms(500);
 8000d4a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000d4e:	f000 fb1b 	bl	8001388 <delay_ms>

				coiControlSetStatus(COI_GPIO_PORT, COI_GPIO_PIN, GPIO_PIN_LOW);
 8000d52:	2200      	movs	r2, #0
 8000d54:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000d58:	4839      	ldr	r0, [pc, #228]	@ (8000e40 <main+0x1b8>)
 8000d5a:	f7ff ff31 	bl	8000bc0 <coiControlSetStatus>
				LedControl_SetStatus(LEDRED1_GPIO_PORT, LEDRED1_GPIO_PIN, GPIO_PIN_LOW);
 8000d5e:	2200      	movs	r2, #0
 8000d60:	2102      	movs	r1, #2
 8000d62:	4835      	ldr	r0, [pc, #212]	@ (8000e38 <main+0x1b0>)
 8000d64:	f7ff ff46 	bl	8000bf4 <LedControl_SetStatus>
				LedControl_SetStatus(LEDRED2_GPIO_PORT, LEDRED2_GPIO_PIN, GPIO_PIN_LOW);
 8000d68:	2200      	movs	r2, #0
 8000d6a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d6e:	4833      	ldr	r0, [pc, #204]	@ (8000e3c <main+0x1b4>)
 8000d70:	f7ff ff40 	bl	8000bf4 <LedControl_SetStatus>
				delay(1000);
 8000d74:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000d78:	f7ff ff70 	bl	8000c5c <delay>
			for(int i = 0; i < 2; i++){
 8000d7c:	68bb      	ldr	r3, [r7, #8]
 8000d7e:	3301      	adds	r3, #1
 8000d80:	60bb      	str	r3, [r7, #8]
 8000d82:	68bb      	ldr	r3, [r7, #8]
 8000d84:	2b01      	cmp	r3, #1
 8000d86:	ddcb      	ble.n	8000d20 <main+0x98>
			}
		}

		// nut nhan 2 trong 3s dieu khien led blue sang
		nut_nhan3 = ButtonRead_Status(BUTTON3_GPIO_PORT, BUTTON3_GPIO_PIN);
 8000d88:	2110      	movs	r1, #16
 8000d8a:	482b      	ldr	r0, [pc, #172]	@ (8000e38 <main+0x1b0>)
 8000d8c:	f7ff ff4c 	bl	8000c28 <ButtonRead_Status>
 8000d90:	4603      	mov	r3, r0
 8000d92:	70fb      	strb	r3, [r7, #3]
		uint8_t ok ;
		uint8_t count1 = 0;
 8000d94:	2300      	movs	r3, #0
 8000d96:	71bb      	strb	r3, [r7, #6]
		if(nut_nhan3 == 0){
 8000d98:	78fb      	ldrb	r3, [r7, #3]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d110      	bne.n	8000dc0 <main+0x138>
			while(count1 <=3){
 8000d9e:	e006      	b.n	8000dae <main+0x126>

				count1++;
 8000da0:	79bb      	ldrb	r3, [r7, #6]
 8000da2:	3301      	adds	r3, #1
 8000da4:	71bb      	strb	r3, [r7, #6]
				delay_ms(750);
 8000da6:	f240 20ee 	movw	r0, #750	@ 0x2ee
 8000daa:	f000 faed 	bl	8001388 <delay_ms>
			while(count1 <=3){
 8000dae:	79bb      	ldrb	r3, [r7, #6]
 8000db0:	2b03      	cmp	r3, #3
 8000db2:	d9f5      	bls.n	8000da0 <main+0x118>
			}
			if(count1 >= 3){
 8000db4:	79bb      	ldrb	r3, [r7, #6]
 8000db6:	2b02      	cmp	r3, #2
 8000db8:	d904      	bls.n	8000dc4 <main+0x13c>

				ok = 1;
 8000dba:	2301      	movs	r3, #1
 8000dbc:	71fb      	strb	r3, [r7, #7]
 8000dbe:	e001      	b.n	8000dc4 <main+0x13c>

			}
		}else{
			count1 = 0;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	71bb      	strb	r3, [r7, #6]
		}



		// nut nhan 3  giu 3s de tat led blue2 tat
		nut_nhan4 = ButtonRead_Status(BUTTON4_GPIO_PORT, BUTTON4_GPIO_PIN);
 8000dc4:	2101      	movs	r1, #1
 8000dc6:	481d      	ldr	r0, [pc, #116]	@ (8000e3c <main+0x1b4>)
 8000dc8:	f7ff ff2e 	bl	8000c28 <ButtonRead_Status>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	70bb      	strb	r3, [r7, #2]
		uint8_t count2 = 0;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	717b      	strb	r3, [r7, #5]
		//uint8_t ok1 ;
			if(nut_nhan4 == 0){
 8000dd4:	78bb      	ldrb	r3, [r7, #2]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d110      	bne.n	8000dfc <main+0x174>
				while(count2 <=3){
 8000dda:	e006      	b.n	8000dea <main+0x162>
					count2++;
 8000ddc:	797b      	ldrb	r3, [r7, #5]
 8000dde:	3301      	adds	r3, #1
 8000de0:	717b      	strb	r3, [r7, #5]
					delay_ms(750);
 8000de2:	f240 20ee 	movw	r0, #750	@ 0x2ee
 8000de6:	f000 facf 	bl	8001388 <delay_ms>
				while(count2 <=3){
 8000dea:	797b      	ldrb	r3, [r7, #5]
 8000dec:	2b03      	cmp	r3, #3
 8000dee:	d9f5      	bls.n	8000ddc <main+0x154>
				}
				if(count2 >= 3){
 8000df0:	797b      	ldrb	r3, [r7, #5]
 8000df2:	2b02      	cmp	r3, #2
 8000df4:	d904      	bls.n	8000e00 <main+0x178>
					ok = 0;
 8000df6:	2300      	movs	r3, #0
 8000df8:	71fb      	strb	r3, [r7, #7]
 8000dfa:	e001      	b.n	8000e00 <main+0x178>

				}
			}else{
				count2 = 0;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	717b      	strb	r3, [r7, #5]
				//delay(500);
			}

			if(ok == 1){
 8000e00:	79fb      	ldrb	r3, [r7, #7]
 8000e02:	2b01      	cmp	r3, #1
 8000e04:	d109      	bne.n	8000e1a <main+0x192>
				LedControl_SetStatus(LEDBLUE2_GPIO_PORT, LEDBLUE2_GPIO_PIN, GPIO_PIN_HIGH);
 8000e06:	2201      	movs	r2, #1
 8000e08:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000e0c:	480a      	ldr	r0, [pc, #40]	@ (8000e38 <main+0x1b0>)
 8000e0e:	f7ff fef1 	bl	8000bf4 <LedControl_SetStatus>
				delay_ms(500);
 8000e12:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000e16:	f000 fab7 	bl	8001388 <delay_ms>
			}
			if(ok == 0){
 8000e1a:	79fb      	ldrb	r3, [r7, #7]
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	f47f af6d 	bne.w	8000cfc <main+0x74>
				LedControl_SetStatus(LEDBLUE2_GPIO_PORT, LEDBLUE2_GPIO_PIN, GPIO_PIN_LOW);
 8000e22:	2200      	movs	r2, #0
 8000e24:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000e28:	4803      	ldr	r0, [pc, #12]	@ (8000e38 <main+0x1b0>)
 8000e2a:	f7ff fee3 	bl	8000bf4 <LedControl_SetStatus>
				delay_ms(500);
 8000e2e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000e32:	f000 faa9 	bl	8001388 <delay_ms>
	while(1){
 8000e36:	e761      	b.n	8000cfc <main+0x74>
 8000e38:	40020000 	.word	0x40020000
 8000e3c:	40020400 	.word	0x40020400
 8000e40:	40020800 	.word	0x40020800

08000e44 <I2C_start>:
	}
	return 0;
}

void I2C_start(void) // de truyen bit start
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
	// Wait until I2Cx is not busy anymore
	while (I2C_GetFlagStatus(I2Cx_SENSOR, I2C_FLAG_BUSY));
 8000e48:	bf00      	nop
 8000e4a:	f44f 3100 	mov.w	r1, #131072	@ 0x20000
 8000e4e:	480a      	ldr	r0, [pc, #40]	@ (8000e78 <I2C_start+0x34>)
 8000e50:	f001 fd28 	bl	80028a4 <I2C_GetFlagStatus>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d1f7      	bne.n	8000e4a <I2C_start+0x6>

	// Generate start condition
	I2C_GenerateSTART(I2Cx_SENSOR, ENABLE); //  ham de truuyen bit start
 8000e5a:	2101      	movs	r1, #1
 8000e5c:	4806      	ldr	r0, [pc, #24]	@ (8000e78 <I2C_start+0x34>)
 8000e5e:	f001 fc55 	bl	800270c <I2C_GenerateSTART>

	// Wait for I2C EV5.
	// It means that the start condition has been correctly released
	// on the I2C bus (the bus is free, no other devices is communicating))
	while (!I2C_CheckEvent(I2Cx_SENSOR, I2C_EVENT_MASTER_MODE_SELECT));
 8000e62:	bf00      	nop
 8000e64:	4905      	ldr	r1, [pc, #20]	@ (8000e7c <I2C_start+0x38>)
 8000e66:	4804      	ldr	r0, [pc, #16]	@ (8000e78 <I2C_start+0x34>)
 8000e68:	f001 fcec 	bl	8002844 <I2C_CheckEvent>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d0f8      	beq.n	8000e64 <I2C_start+0x20>
}
 8000e72:	bf00      	nop
 8000e74:	bf00      	nop
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	40005400 	.word	0x40005400
 8000e7c:	00030001 	.word	0x00030001

08000e80 <I2C_address_direction>:
 * @brief   e
 * @param   None
 * @retval  None
 */
void I2C_address_direction(uint8_t address, uint8_t direction) // truyen bit dia chi voi 2 tham so la dia chi va truyen/nhan du lieu
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	4603      	mov	r3, r0
 8000e88:	460a      	mov	r2, r1
 8000e8a:	71fb      	strb	r3, [r7, #7]
 8000e8c:	4613      	mov	r3, r2
 8000e8e:	71bb      	strb	r3, [r7, #6]
	// Send slave address
	I2C_Send7bitAddress(I2Cx_SENSOR, address, direction); // de truyen dia chi
 8000e90:	79ba      	ldrb	r2, [r7, #6]
 8000e92:	79fb      	ldrb	r3, [r7, #7]
 8000e94:	4619      	mov	r1, r3
 8000e96:	480f      	ldr	r0, [pc, #60]	@ (8000ed4 <I2C_address_direction+0x54>)
 8000e98:	f001 fc78 	bl	800278c <I2C_Send7bitAddress>

	// Wait for I2C EV6
	// It means that a slave acknowledges his address
	if (direction == I2C_Direction_Transmitter)		// truyền
 8000e9c:	79bb      	ldrb	r3, [r7, #6]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d108      	bne.n	8000eb4 <I2C_address_direction+0x34>
	{
		while (!I2C_CheckEvent(I2Cx_SENSOR, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED));
 8000ea2:	bf00      	nop
 8000ea4:	490c      	ldr	r1, [pc, #48]	@ (8000ed8 <I2C_address_direction+0x58>)
 8000ea6:	480b      	ldr	r0, [pc, #44]	@ (8000ed4 <I2C_address_direction+0x54>)
 8000ea8:	f001 fccc 	bl	8002844 <I2C_CheckEvent>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d0f8      	beq.n	8000ea4 <I2C_address_direction+0x24>
	}
	else if (direction == I2C_Direction_Receiver)  // nhận
	{
		while (!I2C_CheckEvent(I2Cx_SENSOR, I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED));
	}
}
 8000eb2:	e00a      	b.n	8000eca <I2C_address_direction+0x4a>
	else if (direction == I2C_Direction_Receiver)  // nhận
 8000eb4:	79bb      	ldrb	r3, [r7, #6]
 8000eb6:	2b01      	cmp	r3, #1
 8000eb8:	d107      	bne.n	8000eca <I2C_address_direction+0x4a>
		while (!I2C_CheckEvent(I2Cx_SENSOR, I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED));
 8000eba:	bf00      	nop
 8000ebc:	4907      	ldr	r1, [pc, #28]	@ (8000edc <I2C_address_direction+0x5c>)
 8000ebe:	4805      	ldr	r0, [pc, #20]	@ (8000ed4 <I2C_address_direction+0x54>)
 8000ec0:	f001 fcc0 	bl	8002844 <I2C_CheckEvent>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d0f8      	beq.n	8000ebc <I2C_address_direction+0x3c>
}
 8000eca:	bf00      	nop
 8000ecc:	3708      	adds	r7, #8
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	40005400 	.word	0x40005400
 8000ed8:	00070082 	.word	0x00070082
 8000edc:	00030002 	.word	0x00030002

08000ee0 <I2C_transmit>:
 * @brief   Transmit one byte to I2C bus
 * @param   None
 * @retval  None
 */
void I2C_transmit(uint8_t byte) // truuyen dia chi lay du lieu cuua thanh ghi trong cam bien
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	71fb      	strb	r3, [r7, #7]
	// Send data byte
	I2C_SendData(I2Cx_SENSOR, byte); // ham de truuyen du lieu
 8000eea:	79fb      	ldrb	r3, [r7, #7]
 8000eec:	4619      	mov	r1, r3
 8000eee:	4808      	ldr	r0, [pc, #32]	@ (8000f10 <I2C_transmit+0x30>)
 8000ef0:	f001 fc8a 	bl	8002808 <I2C_SendData>
	// Wait for I2C EV8_2.
	// It means that the data has been physically shifted out and
	// output on the bus)
	while (!I2C_CheckEvent(I2Cx_SENSOR, I2C_EVENT_MASTER_BYTE_TRANSMITTED));
 8000ef4:	bf00      	nop
 8000ef6:	4907      	ldr	r1, [pc, #28]	@ (8000f14 <I2C_transmit+0x34>)
 8000ef8:	4805      	ldr	r0, [pc, #20]	@ (8000f10 <I2C_transmit+0x30>)
 8000efa:	f001 fca3 	bl	8002844 <I2C_CheckEvent>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d0f8      	beq.n	8000ef6 <I2C_transmit+0x16>
}
 8000f04:	bf00      	nop
 8000f06:	bf00      	nop
 8000f08:	3708      	adds	r7, #8
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	40005400 	.word	0x40005400
 8000f14:	00070084 	.word	0x00070084

08000f18 <I2C_stop>:
* @brief   Generate I2C stop condition
* @param   None
* @retval  None
*/
void I2C_stop(void) // hoan tat quua trinh truyen du lieu
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
	// Generate I2C stop condition
	I2C_GenerateSTOP(I2Cx_SENSOR, ENABLE);
 8000f1c:	2101      	movs	r1, #1
 8000f1e:	4802      	ldr	r0, [pc, #8]	@ (8000f28 <I2C_stop+0x10>)
 8000f20:	f001 fc14 	bl	800274c <I2C_GenerateSTOP>
}
 8000f24:	bf00      	nop
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	40005400 	.word	0x40005400

08000f2c <I2C_receive_nack>:
 * @brief   receive data
 * @param   None
 * @retval  None
 */
uint8_t I2C_receive_nack(void) // nhan duu lieu
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
	// Disable ACK of received data
	I2C_AcknowledgeConfig(I2Cx_SENSOR, DISABLE);
 8000f30:	2100      	movs	r1, #0
 8000f32:	4808      	ldr	r0, [pc, #32]	@ (8000f54 <I2C_receive_nack+0x28>)
 8000f34:	f001 fc48 	bl	80027c8 <I2C_AcknowledgeConfig>
	// Wait for I2C EV7
	// It means that the data has been received in I2C data register
	while (!I2C_CheckEvent(I2Cx_SENSOR, I2C_EVENT_MASTER_BYTE_RECEIVED));
 8000f38:	bf00      	nop
 8000f3a:	4907      	ldr	r1, [pc, #28]	@ (8000f58 <I2C_receive_nack+0x2c>)
 8000f3c:	4805      	ldr	r0, [pc, #20]	@ (8000f54 <I2C_receive_nack+0x28>)
 8000f3e:	f001 fc81 	bl	8002844 <I2C_CheckEvent>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d0f8      	beq.n	8000f3a <I2C_receive_nack+0xe>

	// Read and return data byte from I2C data register
	return I2C_ReceiveData(I2Cx_SENSOR);
 8000f48:	4802      	ldr	r0, [pc, #8]	@ (8000f54 <I2C_receive_nack+0x28>)
 8000f4a:	f001 fc6d 	bl	8002828 <I2C_ReceiveData>
 8000f4e:	4603      	mov	r3, r0
}
 8000f50:	4618      	mov	r0, r3
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	40005400 	.word	0x40005400
 8000f58:	00030040 	.word	0x00030040

08000f5c <I2C_receive_ack>:
 * @brief   receive data
 * @param   None
 * @retval  None
 */
uint8_t I2C_receive_ack(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
	// Enable ACK of received data
	I2C_AcknowledgeConfig(I2Cx_SENSOR, ENABLE);
 8000f60:	2101      	movs	r1, #1
 8000f62:	4808      	ldr	r0, [pc, #32]	@ (8000f84 <I2C_receive_ack+0x28>)
 8000f64:	f001 fc30 	bl	80027c8 <I2C_AcknowledgeConfig>
	// Wait for I2C EV7
	// It means that the data has been received in I2C data register
	while (!I2C_CheckEvent(I2Cx_SENSOR, I2C_EVENT_MASTER_BYTE_RECEIVED));
 8000f68:	bf00      	nop
 8000f6a:	4907      	ldr	r1, [pc, #28]	@ (8000f88 <I2C_receive_ack+0x2c>)
 8000f6c:	4805      	ldr	r0, [pc, #20]	@ (8000f84 <I2C_receive_ack+0x28>)
 8000f6e:	f001 fc69 	bl	8002844 <I2C_CheckEvent>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d0f8      	beq.n	8000f6a <I2C_receive_ack+0xe>

	// Read and return data byte from I2C data register
	return I2C_ReceiveData(I2Cx_SENSOR);
 8000f78:	4802      	ldr	r0, [pc, #8]	@ (8000f84 <I2C_receive_ack+0x28>)
 8000f7a:	f001 fc55 	bl	8002828 <I2C_ReceiveData>
 8000f7e:	4603      	mov	r3, r0
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	40005400 	.word	0x40005400
 8000f88:	00030040 	.word	0x00030040

08000f8c <TemHumSensor_readRegister>:
		uint8_t address,	// Địa chỉ cảm biến.
	    uint8_t* pAddressRegister, // Địa chỉ của thanh ghi chứa dữ liệu nhiệt độ, độ ẩm.
	    uint8_t* pDataRegister, // Dữ liệu đọc được từ thanh ghi tương ứng.
	    uint8_t Length_Data, //Độ dài Dữ liệu đọc được từ thanh ghi tương ứng.
	    uint16_t delay)	//Dữ liệu đọc được từ thanh ghi tương ứng.
{
 8000f8c:	b590      	push	{r4, r7, lr}
 8000f8e:	b087      	sub	sp, #28
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	60b9      	str	r1, [r7, #8]
 8000f94:	607a      	str	r2, [r7, #4]
 8000f96:	461a      	mov	r2, r3
 8000f98:	4603      	mov	r3, r0
 8000f9a:	73fb      	strb	r3, [r7, #15]
 8000f9c:	4613      	mov	r3, r2
 8000f9e:	73bb      	strb	r3, [r7, #14]
	uint8_t LengthCmd = pAddressRegister[0];
 8000fa0:	68bb      	ldr	r3, [r7, #8]
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	757b      	strb	r3, [r7, #21]

	I2C_start();	// conditon start
 8000fa6:	f7ff ff4d 	bl	8000e44 <I2C_start>
	I2C_address_direction(address << 1, I2C_Direction_Transmitter); // send slave address - Transmit
 8000faa:	7bfb      	ldrb	r3, [r7, #15]
 8000fac:	005b      	lsls	r3, r3, #1
 8000fae:	b2db      	uxtb	r3, r3
 8000fb0:	2100      	movs	r1, #0
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f7ff ff64 	bl	8000e80 <I2C_address_direction>

	for (uint8_t i = 1; i < LengthCmd; i++) {
 8000fb8:	2301      	movs	r3, #1
 8000fba:	75fb      	strb	r3, [r7, #23]
 8000fbc:	e009      	b.n	8000fd2 <TemHumSensor_readRegister+0x46>
		I2C_transmit(pAddressRegister[i]);		// Send Data from register
 8000fbe:	7dfb      	ldrb	r3, [r7, #23]
 8000fc0:	68ba      	ldr	r2, [r7, #8]
 8000fc2:	4413      	add	r3, r2
 8000fc4:	781b      	ldrb	r3, [r3, #0]
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f7ff ff8a 	bl	8000ee0 <I2C_transmit>
	for (uint8_t i = 1; i < LengthCmd; i++) {
 8000fcc:	7dfb      	ldrb	r3, [r7, #23]
 8000fce:	3301      	adds	r3, #1
 8000fd0:	75fb      	strb	r3, [r7, #23]
 8000fd2:	7dfa      	ldrb	r2, [r7, #23]
 8000fd4:	7d7b      	ldrb	r3, [r7, #21]
 8000fd6:	429a      	cmp	r2, r3
 8000fd8:	d3f1      	bcc.n	8000fbe <TemHumSensor_readRegister+0x32>
	}

    if (delay > 0) {
 8000fda:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d003      	beq.n	8000fe8 <TemHumSensor_readRegister+0x5c>
        delay_ms(delay);
 8000fe0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f000 f9d0 	bl	8001388 <delay_ms>
    }

	I2C_stop();// condition stop
 8000fe8:	f7ff ff96 	bl	8000f18 <I2C_stop>

	I2C_start(); // condition start
 8000fec:	f7ff ff2a 	bl	8000e44 <I2C_start>
	I2C_address_direction(address << 1, I2C_Direction_Receiver); // send slave address - Received
 8000ff0:	7bfb      	ldrb	r3, [r7, #15]
 8000ff2:	005b      	lsls	r3, r3, #1
 8000ff4:	b2db      	uxtb	r3, r3
 8000ff6:	2101      	movs	r1, #1
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f7ff ff41 	bl	8000e80 <I2C_address_direction>

	for (uint8_t i = 0; i < Length_Data; i++)
 8000ffe:	2300      	movs	r3, #0
 8001000:	75bb      	strb	r3, [r7, #22]
 8001002:	e016      	b.n	8001032 <TemHumSensor_readRegister+0xa6>
	{
		if (i == (Length_Data - 1))
 8001004:	7dba      	ldrb	r2, [r7, #22]
 8001006:	7bbb      	ldrb	r3, [r7, #14]
 8001008:	3b01      	subs	r3, #1
 800100a:	429a      	cmp	r2, r3
 800100c:	d107      	bne.n	800101e <TemHumSensor_readRegister+0x92>
		{
			pDataRegister[i] = I2C_receive_nack();  // 	NA
 800100e:	7dbb      	ldrb	r3, [r7, #22]
 8001010:	687a      	ldr	r2, [r7, #4]
 8001012:	18d4      	adds	r4, r2, r3
 8001014:	f7ff ff8a 	bl	8000f2c <I2C_receive_nack>
 8001018:	4603      	mov	r3, r0
 800101a:	7023      	strb	r3, [r4, #0]
 800101c:	e006      	b.n	800102c <TemHumSensor_readRegister+0xa0>
		}
		else
		{
			pDataRegister[i] = I2C_receive_ack();   // A
 800101e:	7dbb      	ldrb	r3, [r7, #22]
 8001020:	687a      	ldr	r2, [r7, #4]
 8001022:	18d4      	adds	r4, r2, r3
 8001024:	f7ff ff9a 	bl	8000f5c <I2C_receive_ack>
 8001028:	4603      	mov	r3, r0
 800102a:	7023      	strb	r3, [r4, #0]
	for (uint8_t i = 0; i < Length_Data; i++)
 800102c:	7dbb      	ldrb	r3, [r7, #22]
 800102e:	3301      	adds	r3, #1
 8001030:	75bb      	strb	r3, [r7, #22]
 8001032:	7dba      	ldrb	r2, [r7, #22]
 8001034:	7bbb      	ldrb	r3, [r7, #14]
 8001036:	429a      	cmp	r2, r3
 8001038:	d3e4      	bcc.n	8001004 <TemHumSensor_readRegister+0x78>
		}
	}
	I2C_stop();
 800103a:	f7ff ff6d 	bl	8000f18 <I2C_stop>

}
 800103e:	bf00      	nop
 8001040:	371c      	adds	r7, #28
 8001042:	46bd      	mov	sp, r7
 8001044:	bd90      	pop	{r4, r7, pc}
	...

08001048 <GetTemp_Sensor>:
 * @brief   Get value temperature
 * @param   None
 * @retval  Temperature
 */
uint32_t GetTemp_Sensor(void) // xuu li du lieuu nhiet do
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b086      	sub	sp, #24
 800104c:	af02      	add	r7, sp, #8
	uint32_t RT;
    uint8_t pRT[3] = { 0 };	// pRT[0]: MSB		pRT[1]: LSB
 800104e:	4b15      	ldr	r3, [pc, #84]	@ (80010a4 <GetTemp_Sensor+0x5c>)
 8001050:	881b      	ldrh	r3, [r3, #0]
 8001052:	813b      	strh	r3, [r7, #8]
 8001054:	2300      	movs	r3, #0
 8001056:	72bb      	strb	r3, [r7, #10]

    uint8_t CMD_MEASURE_TEMP[2] =  { 2, 0xE3 }; // gửi độ dài byte cần truyền và CMD_MEASURE chế độ HOLD MASTER MODE
 8001058:	f24e 3302 	movw	r3, #58114	@ 0xe302
 800105c:	80bb      	strh	r3, [r7, #4]

    TemHumSensor_readRegister(SI7020_ADDR, CMD_MEASURE_TEMP, pRT, 3, 4);
 800105e:	f107 0208 	add.w	r2, r7, #8
 8001062:	1d39      	adds	r1, r7, #4
 8001064:	2304      	movs	r3, #4
 8001066:	9300      	str	r3, [sp, #0]
 8001068:	2303      	movs	r3, #3
 800106a:	2040      	movs	r0, #64	@ 0x40
 800106c:	f7ff ff8e 	bl	8000f8c <TemHumSensor_readRegister>

    RT = (pRT[0] << 8) + pRT[1];			// RT_CODE (MSB << 8) + LSB		// Temp = ((17572* RT)/(0xFFu +1) - 4685)/100
 8001070:	7a3b      	ldrb	r3, [r7, #8]
 8001072:	021b      	lsls	r3, r3, #8
 8001074:	7a7a      	ldrb	r2, [r7, #9]
 8001076:	4413      	add	r3, r2
 8001078:	60fb      	str	r3, [r7, #12]
    RT = ((RT * 17572) >> 16) - 4685;
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	f244 42a4 	movw	r2, #17572	@ 0x44a4
 8001080:	fb02 f303 	mul.w	r3, r2, r3
 8001084:	0c1b      	lsrs	r3, r3, #16
 8001086:	f5a3 5392 	sub.w	r3, r3, #4672	@ 0x1240
 800108a:	3b0d      	subs	r3, #13
 800108c:	60fb      	str	r3, [r7, #12]
    RT = RT/100;
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	4a05      	ldr	r2, [pc, #20]	@ (80010a8 <GetTemp_Sensor+0x60>)
 8001092:	fba2 2303 	umull	r2, r3, r2, r3
 8001096:	095b      	lsrs	r3, r3, #5
 8001098:	60fb      	str	r3, [r7, #12]
    return RT;
 800109a:	68fb      	ldr	r3, [r7, #12]
}
 800109c:	4618      	mov	r0, r3
 800109e:	3710      	adds	r7, #16
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	0800608c 	.word	0x0800608c
 80010a8:	51eb851f 	.word	0x51eb851f

080010ac <GetHumi_Sensor>:
 * @brief   Get value humidity
 * @param   None
 * @retval  Humidity
 */
uint32_t GetHumi_Sensor(void) // xuuu ly du lieu do am
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b086      	sub	sp, #24
 80010b0:	af02      	add	r7, sp, #8
	uint32_t RH;
	uint8_t pRH[3] = { 0 };
 80010b2:	4b15      	ldr	r3, [pc, #84]	@ (8001108 <GetHumi_Sensor+0x5c>)
 80010b4:	881b      	ldrh	r3, [r3, #0]
 80010b6:	813b      	strh	r3, [r7, #8]
 80010b8:	2300      	movs	r3, #0
 80010ba:	72bb      	strb	r3, [r7, #10]


	uint8_t CMD_MEASURE_HUMI[2] =  { 2, 0xE5 }; // gửi độ dài byte cần truyền và CMD_MEASURE chế độ HOLD MASTER MODE
 80010bc:	f24e 5302 	movw	r3, #58626	@ 0xe502
 80010c0:	80bb      	strh	r3, [r7, #4]

    TemHumSensor_readRegister(SI7020_ADDR, CMD_MEASURE_HUMI, pRH, 3, 8);
 80010c2:	f107 0208 	add.w	r2, r7, #8
 80010c6:	1d39      	adds	r1, r7, #4
 80010c8:	2308      	movs	r3, #8
 80010ca:	9300      	str	r3, [sp, #0]
 80010cc:	2303      	movs	r3, #3
 80010ce:	2040      	movs	r0, #64	@ 0x40
 80010d0:	f7ff ff5c 	bl	8000f8c <TemHumSensor_readRegister>

    RH = (pRH[0] << 8) + pRH[1]; // RH_CODE (MSB << 8) + LSB
 80010d4:	7a3b      	ldrb	r3, [r7, #8]
 80010d6:	021b      	lsls	r3, r3, #8
 80010d8:	7a7a      	ldrb	r2, [r7, #9]
 80010da:	4413      	add	r3, r2
 80010dc:	60fb      	str	r3, [r7, #12]
    RH = ((RH * 12500) >> 16) - 600;
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	f243 02d4 	movw	r2, #12500	@ 0x30d4
 80010e4:	fb02 f303 	mul.w	r3, r2, r3
 80010e8:	0c1b      	lsrs	r3, r3, #16
 80010ea:	f5a3 7316 	sub.w	r3, r3, #600	@ 0x258
 80010ee:	60fb      	str	r3, [r7, #12]
    RH = RH/100;
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	4a06      	ldr	r2, [pc, #24]	@ (800110c <GetHumi_Sensor+0x60>)
 80010f4:	fba2 2303 	umull	r2, r3, r2, r3
 80010f8:	095b      	lsrs	r3, r3, #5
 80010fa:	60fb      	str	r3, [r7, #12]

    return RH;
 80010fc:	68fb      	ldr	r3, [r7, #12]
}
 80010fe:	4618      	mov	r0, r3
 8001100:	3710      	adds	r7, #16
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	0800608c 	.word	0x0800608c
 800110c:	51eb851f 	.word	0x51eb851f

08001110 <processGetValueSensor>:

void processGetValueSensor(void) { // xu li du lieu nhiet do va do am sau 1s và in ra man hinh lcd
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af02      	add	r7, sp, #8
	// Get timer
	time_current = GetMilSecTick();
 8001116:	f001 fe41 	bl	8002d9c <GetMilSecTick>
 800111a:	4603      	mov	r3, r0
 800111c:	4a58      	ldr	r2, [pc, #352]	@ (8001280 <processGetValueSensor+0x170>)
 800111e:	6013      	str	r3, [r2, #0]

	if (time_current >= time_initial) {
 8001120:	4b57      	ldr	r3, [pc, #348]	@ (8001280 <processGetValueSensor+0x170>)
 8001122:	681a      	ldr	r2, [r3, #0]
 8001124:	4b57      	ldr	r3, [pc, #348]	@ (8001284 <processGetValueSensor+0x174>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	429a      	cmp	r2, r3
 800112a:	d30a      	bcc.n	8001142 <processGetValueSensor+0x32>
		time_total += time_current - time_initial;
 800112c:	4b54      	ldr	r3, [pc, #336]	@ (8001280 <processGetValueSensor+0x170>)
 800112e:	681a      	ldr	r2, [r3, #0]
 8001130:	4b54      	ldr	r3, [pc, #336]	@ (8001284 <processGetValueSensor+0x174>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	1ad2      	subs	r2, r2, r3
 8001136:	4b54      	ldr	r3, [pc, #336]	@ (8001288 <processGetValueSensor+0x178>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	4413      	add	r3, r2
 800113c:	4a52      	ldr	r2, [pc, #328]	@ (8001288 <processGetValueSensor+0x178>)
 800113e:	6013      	str	r3, [r2, #0]
 8001140:	e00a      	b.n	8001158 <processGetValueSensor+0x48>
	} else {
		time_total += 0xFFFFFFFFU - time_current + time_initial;
 8001142:	4b50      	ldr	r3, [pc, #320]	@ (8001284 <processGetValueSensor+0x174>)
 8001144:	681a      	ldr	r2, [r3, #0]
 8001146:	4b4e      	ldr	r3, [pc, #312]	@ (8001280 <processGetValueSensor+0x170>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	1ad2      	subs	r2, r2, r3
 800114c:	4b4e      	ldr	r3, [pc, #312]	@ (8001288 <processGetValueSensor+0x178>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4413      	add	r3, r2
 8001152:	3b01      	subs	r3, #1
 8001154:	4a4c      	ldr	r2, [pc, #304]	@ (8001288 <processGetValueSensor+0x178>)
 8001156:	6013      	str	r3, [r2, #0]
	}
	if (time_total == CYCLE_SEND_DATA_1) {
 8001158:	4b4b      	ldr	r3, [pc, #300]	@ (8001288 <processGetValueSensor+0x178>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001160:	d10b      	bne.n	800117a <processGetValueSensor+0x6a>
		//Dùng để đọc giá trị nhiệt độ trả về từ cảm biến thông qua giao tiếp I2C.
		temperature = (uint8_t) (GetTemp_Sensor());
 8001162:	f7ff ff71 	bl	8001048 <GetTemp_Sensor>
 8001166:	4603      	mov	r3, r0
 8001168:	b2da      	uxtb	r2, r3
 800116a:	4b48      	ldr	r3, [pc, #288]	@ (800128c <processGetValueSensor+0x17c>)
 800116c:	701a      	strb	r2, [r3, #0]

		//Dùng để đọc giá trị độ ẩm trả về từ cảm biến thông qua giao tiếp I2C.
		humidity = (uint8_t) (GetHumi_Sensor());
 800116e:	f7ff ff9d 	bl	80010ac <GetHumi_Sensor>
 8001172:	4603      	mov	r3, r0
 8001174:	b2da      	uxtb	r2, r3
 8001176:	4b46      	ldr	r3, [pc, #280]	@ (8001290 <processGetValueSensor+0x180>)
 8001178:	701a      	strb	r2, [r3, #0]

	}
	if(time_total >= CYCLE_SEND_DATA_2)
 800117a:	4b43      	ldr	r3, [pc, #268]	@ (8001288 <processGetValueSensor+0x178>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001182:	d376      	bcc.n	8001272 <processGetValueSensor+0x162>
	{
		temperature1 = (uint8_t) (GetTemp_Sensor());
 8001184:	f7ff ff60 	bl	8001048 <GetTemp_Sensor>
 8001188:	4603      	mov	r3, r0
 800118a:	b2da      	uxtb	r2, r3
 800118c:	4b41      	ldr	r3, [pc, #260]	@ (8001294 <processGetValueSensor+0x184>)
 800118e:	701a      	strb	r2, [r3, #0]

		humidity1 = (uint8_t) (GetHumi_Sensor());
 8001190:	f7ff ff8c 	bl	80010ac <GetHumi_Sensor>
 8001194:	4603      	mov	r3, r0
 8001196:	b2da      	uxtb	r2, r3
 8001198:	4b3f      	ldr	r3, [pc, #252]	@ (8001298 <processGetValueSensor+0x188>)
 800119a:	701a      	strb	r2, [r3, #0]

		// nếu thời gian chênh lệch giữa lần đo 1 và lần đo 2 là 2 thì sẽ cập nhật giá trị sensor
		if( ((temperature1 > temperature ) && (temperature1 - temperature >= 2))
 800119c:	4b3d      	ldr	r3, [pc, #244]	@ (8001294 <processGetValueSensor+0x184>)
 800119e:	781a      	ldrb	r2, [r3, #0]
 80011a0:	4b3a      	ldr	r3, [pc, #232]	@ (800128c <processGetValueSensor+0x17c>)
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	429a      	cmp	r2, r3
 80011a6:	d907      	bls.n	80011b8 <processGetValueSensor+0xa8>
 80011a8:	4b3a      	ldr	r3, [pc, #232]	@ (8001294 <processGetValueSensor+0x184>)
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	461a      	mov	r2, r3
 80011ae:	4b37      	ldr	r3, [pc, #220]	@ (800128c <processGetValueSensor+0x17c>)
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	1ad3      	subs	r3, r2, r3
 80011b4:	2b01      	cmp	r3, #1
 80011b6:	dc29      	bgt.n	800120c <processGetValueSensor+0xfc>
		 || ((temperature1 < temperature ) && (temperature1 - temperature <= 2))
 80011b8:	4b36      	ldr	r3, [pc, #216]	@ (8001294 <processGetValueSensor+0x184>)
 80011ba:	781a      	ldrb	r2, [r3, #0]
 80011bc:	4b33      	ldr	r3, [pc, #204]	@ (800128c <processGetValueSensor+0x17c>)
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	429a      	cmp	r2, r3
 80011c2:	d207      	bcs.n	80011d4 <processGetValueSensor+0xc4>
 80011c4:	4b33      	ldr	r3, [pc, #204]	@ (8001294 <processGetValueSensor+0x184>)
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	461a      	mov	r2, r3
 80011ca:	4b30      	ldr	r3, [pc, #192]	@ (800128c <processGetValueSensor+0x17c>)
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	1ad3      	subs	r3, r2, r3
 80011d0:	2b02      	cmp	r3, #2
 80011d2:	dd1b      	ble.n	800120c <processGetValueSensor+0xfc>
		 || ((humidity1 > humidity ) && (humidity1 - humidity >= 2))
 80011d4:	4b30      	ldr	r3, [pc, #192]	@ (8001298 <processGetValueSensor+0x188>)
 80011d6:	781a      	ldrb	r2, [r3, #0]
 80011d8:	4b2d      	ldr	r3, [pc, #180]	@ (8001290 <processGetValueSensor+0x180>)
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	429a      	cmp	r2, r3
 80011de:	d907      	bls.n	80011f0 <processGetValueSensor+0xe0>
 80011e0:	4b2d      	ldr	r3, [pc, #180]	@ (8001298 <processGetValueSensor+0x188>)
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	461a      	mov	r2, r3
 80011e6:	4b2a      	ldr	r3, [pc, #168]	@ (8001290 <processGetValueSensor+0x180>)
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	1ad3      	subs	r3, r2, r3
 80011ec:	2b01      	cmp	r3, #1
 80011ee:	dc0d      	bgt.n	800120c <processGetValueSensor+0xfc>
		 || ((humidity1 < humidity ) && (humidity1 - humidity <= 2)))
 80011f0:	4b29      	ldr	r3, [pc, #164]	@ (8001298 <processGetValueSensor+0x188>)
 80011f2:	781a      	ldrb	r2, [r3, #0]
 80011f4:	4b26      	ldr	r3, [pc, #152]	@ (8001290 <processGetValueSensor+0x180>)
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	429a      	cmp	r2, r3
 80011fa:	d237      	bcs.n	800126c <processGetValueSensor+0x15c>
 80011fc:	4b26      	ldr	r3, [pc, #152]	@ (8001298 <processGetValueSensor+0x188>)
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	461a      	mov	r2, r3
 8001202:	4b23      	ldr	r3, [pc, #140]	@ (8001290 <processGetValueSensor+0x180>)
 8001204:	781b      	ldrb	r3, [r3, #0]
 8001206:	1ad3      	subs	r3, r2, r3
 8001208:	2b02      	cmp	r3, #2
 800120a:	dc2f      	bgt.n	800126c <processGetValueSensor+0x15c>
		{
			ucg_DrawString(&ucg, 0, 32, 0, "Nhom 1 ");
 800120c:	4b23      	ldr	r3, [pc, #140]	@ (800129c <processGetValueSensor+0x18c>)
 800120e:	9300      	str	r3, [sp, #0]
 8001210:	2300      	movs	r3, #0
 8001212:	2220      	movs	r2, #32
 8001214:	2100      	movs	r1, #0
 8001216:	4822      	ldr	r0, [pc, #136]	@ (80012a0 <processGetValueSensor+0x190>)
 8001218:	f003 f936 	bl	8004488 <ucg_DrawString>
			memset(src1, 0, sizeof(src1));
 800121c:	2214      	movs	r2, #20
 800121e:	2100      	movs	r1, #0
 8001220:	4820      	ldr	r0, [pc, #128]	@ (80012a4 <processGetValueSensor+0x194>)
 8001222:	f004 faa7 	bl	8005774 <memset>
			sprintf(src1, " Temp = %d oC  ", temperature1);
 8001226:	4b1b      	ldr	r3, [pc, #108]	@ (8001294 <processGetValueSensor+0x184>)
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	461a      	mov	r2, r3
 800122c:	491e      	ldr	r1, [pc, #120]	@ (80012a8 <processGetValueSensor+0x198>)
 800122e:	481d      	ldr	r0, [pc, #116]	@ (80012a4 <processGetValueSensor+0x194>)
 8001230:	f004 fa80 	bl	8005734 <siprintf>
			ucg_DrawString(&ucg, 0, 52, 0, src1);
 8001234:	4b1b      	ldr	r3, [pc, #108]	@ (80012a4 <processGetValueSensor+0x194>)
 8001236:	9300      	str	r3, [sp, #0]
 8001238:	2300      	movs	r3, #0
 800123a:	2234      	movs	r2, #52	@ 0x34
 800123c:	2100      	movs	r1, #0
 800123e:	4818      	ldr	r0, [pc, #96]	@ (80012a0 <processGetValueSensor+0x190>)
 8001240:	f003 f922 	bl	8004488 <ucg_DrawString>

			memset(src2, 0, sizeof(src2));
 8001244:	2214      	movs	r2, #20
 8001246:	2100      	movs	r1, #0
 8001248:	4818      	ldr	r0, [pc, #96]	@ (80012ac <processGetValueSensor+0x19c>)
 800124a:	f004 fa93 	bl	8005774 <memset>
			sprintf(src2, " Humi = %3d %%   ", humidity1);
 800124e:	4b12      	ldr	r3, [pc, #72]	@ (8001298 <processGetValueSensor+0x188>)
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	461a      	mov	r2, r3
 8001254:	4916      	ldr	r1, [pc, #88]	@ (80012b0 <processGetValueSensor+0x1a0>)
 8001256:	4815      	ldr	r0, [pc, #84]	@ (80012ac <processGetValueSensor+0x19c>)
 8001258:	f004 fa6c 	bl	8005734 <siprintf>
			ucg_DrawString(&ucg, 0, 72, 0, src2);
 800125c:	4b13      	ldr	r3, [pc, #76]	@ (80012ac <processGetValueSensor+0x19c>)
 800125e:	9300      	str	r3, [sp, #0]
 8001260:	2300      	movs	r3, #0
 8001262:	2248      	movs	r2, #72	@ 0x48
 8001264:	2100      	movs	r1, #0
 8001266:	480e      	ldr	r0, [pc, #56]	@ (80012a0 <processGetValueSensor+0x190>)
 8001268:	f003 f90e 	bl	8004488 <ucg_DrawString>
		}

		time_total = 0;
 800126c:	4b06      	ldr	r3, [pc, #24]	@ (8001288 <processGetValueSensor+0x178>)
 800126e:	2200      	movs	r2, #0
 8001270:	601a      	str	r2, [r3, #0]
		// Reset lại biến thời gian sau quá trình đọc giá trị nhiệt độ - độ ẩm.

	}
	time_initial = time_current;
 8001272:	4b03      	ldr	r3, [pc, #12]	@ (8001280 <processGetValueSensor+0x170>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4a03      	ldr	r2, [pc, #12]	@ (8001284 <processGetValueSensor+0x174>)
 8001278:	6013      	str	r3, [r2, #0]
}
 800127a:	bf00      	nop
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	2000014c 	.word	0x2000014c
 8001284:	20000148 	.word	0x20000148
 8001288:	200001b8 	.word	0x200001b8
 800128c:	200001bc 	.word	0x200001bc
 8001290:	200001bd 	.word	0x200001bd
 8001294:	200001be 	.word	0x200001be
 8001298:	200001bf 	.word	0x200001bf
 800129c:	08006090 	.word	0x08006090
 80012a0:	20000094 	.word	0x20000094
 80012a4:	20000154 	.word	0x20000154
 80012a8:	08006098 	.word	0x08006098
 80012ac:	20000168 	.word	0x20000168
 80012b0:	080060a8 	.word	0x080060a8

080012b4 <Scan_SensorLCD>:
* @brief	Scan display value sensor
* @param	None
* @retval	None
*/
void Scan_SensorLCD(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af02      	add	r7, sp, #8
	ucg_DrawString(&ucg, 0, 32, 0, "Nhom 1");
 80012ba:	4b19      	ldr	r3, [pc, #100]	@ (8001320 <Scan_SensorLCD+0x6c>)
 80012bc:	9300      	str	r3, [sp, #0]
 80012be:	2300      	movs	r3, #0
 80012c0:	2220      	movs	r2, #32
 80012c2:	2100      	movs	r1, #0
 80012c4:	4817      	ldr	r0, [pc, #92]	@ (8001324 <Scan_SensorLCD+0x70>)
 80012c6:	f003 f8df 	bl	8004488 <ucg_DrawString>
	memset(src3, 0, sizeof(src3));
 80012ca:	2214      	movs	r2, #20
 80012cc:	2100      	movs	r1, #0
 80012ce:	4816      	ldr	r0, [pc, #88]	@ (8001328 <Scan_SensorLCD+0x74>)
 80012d0:	f004 fa50 	bl	8005774 <memset>
	sprintf(src3, " Temp = %d oC  ", temperature);
 80012d4:	4b15      	ldr	r3, [pc, #84]	@ (800132c <Scan_SensorLCD+0x78>)
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	461a      	mov	r2, r3
 80012da:	4915      	ldr	r1, [pc, #84]	@ (8001330 <Scan_SensorLCD+0x7c>)
 80012dc:	4812      	ldr	r0, [pc, #72]	@ (8001328 <Scan_SensorLCD+0x74>)
 80012de:	f004 fa29 	bl	8005734 <siprintf>
	ucg_DrawString(&ucg, 0, 52, 0, src3);
 80012e2:	4b11      	ldr	r3, [pc, #68]	@ (8001328 <Scan_SensorLCD+0x74>)
 80012e4:	9300      	str	r3, [sp, #0]
 80012e6:	2300      	movs	r3, #0
 80012e8:	2234      	movs	r2, #52	@ 0x34
 80012ea:	2100      	movs	r1, #0
 80012ec:	480d      	ldr	r0, [pc, #52]	@ (8001324 <Scan_SensorLCD+0x70>)
 80012ee:	f003 f8cb 	bl	8004488 <ucg_DrawString>

	memset(src4, 0, sizeof(src4));
 80012f2:	2214      	movs	r2, #20
 80012f4:	2100      	movs	r1, #0
 80012f6:	480f      	ldr	r0, [pc, #60]	@ (8001334 <Scan_SensorLCD+0x80>)
 80012f8:	f004 fa3c 	bl	8005774 <memset>
	sprintf(src4, " Humi = %3d %%   ", humidity);
 80012fc:	4b0e      	ldr	r3, [pc, #56]	@ (8001338 <Scan_SensorLCD+0x84>)
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	461a      	mov	r2, r3
 8001302:	490e      	ldr	r1, [pc, #56]	@ (800133c <Scan_SensorLCD+0x88>)
 8001304:	480b      	ldr	r0, [pc, #44]	@ (8001334 <Scan_SensorLCD+0x80>)
 8001306:	f004 fa15 	bl	8005734 <siprintf>
	ucg_DrawString(&ucg, 0, 72, 0, src4);
 800130a:	4b0a      	ldr	r3, [pc, #40]	@ (8001334 <Scan_SensorLCD+0x80>)
 800130c:	9300      	str	r3, [sp, #0]
 800130e:	2300      	movs	r3, #0
 8001310:	2248      	movs	r2, #72	@ 0x48
 8001312:	2100      	movs	r1, #0
 8001314:	4803      	ldr	r0, [pc, #12]	@ (8001324 <Scan_SensorLCD+0x70>)
 8001316:	f003 f8b7 	bl	8004488 <ucg_DrawString>
}
 800131a:	bf00      	nop
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	080060bc 	.word	0x080060bc
 8001324:	20000094 	.word	0x20000094
 8001328:	2000017c 	.word	0x2000017c
 800132c:	200001bc 	.word	0x200001bc
 8001330:	08006098 	.word	0x08006098
 8001334:	20000190 	.word	0x20000190
 8001338:	200001bd 	.word	0x200001bd
 800133c:	080060a8 	.word	0x080060a8

08001340 <Scan_TimeSensor>:
* @brief	Scan period 1s
* @param	None
* @retval	None
*/
void Scan_TimeSensor(uint32_t byRepeats)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b084      	sub	sp, #16
 8001344:	af02      	add	r7, sp, #8
 8001346:	6078      	str	r0, [r7, #4]
	if (idTimer != NO_TIMER) {
 8001348:	4b0c      	ldr	r3, [pc, #48]	@ (800137c <Scan_TimeSensor+0x3c>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	2bff      	cmp	r3, #255	@ 0xff
 800134e:	d005      	beq.n	800135c <Scan_TimeSensor+0x1c>
	TimerStop(idTimer);
 8001350:	4b0a      	ldr	r3, [pc, #40]	@ (800137c <Scan_TimeSensor+0x3c>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	b2db      	uxtb	r3, r3
 8001356:	4618      	mov	r0, r3
 8001358:	f001 fcd0 	bl	8002cfc <TimerStop>
	}
	idTimer = TimerStart("Scan_sensor", byRepeats, TIMER_REPEAT_FOREVER, (void*) Scan_SensorLCD, NULL);
 800135c:	2300      	movs	r3, #0
 800135e:	9300      	str	r3, [sp, #0]
 8001360:	4b07      	ldr	r3, [pc, #28]	@ (8001380 <Scan_TimeSensor+0x40>)
 8001362:	22ff      	movs	r2, #255	@ 0xff
 8001364:	6879      	ldr	r1, [r7, #4]
 8001366:	4807      	ldr	r0, [pc, #28]	@ (8001384 <Scan_TimeSensor+0x44>)
 8001368:	f001 fc66 	bl	8002c38 <TimerStart>
 800136c:	4603      	mov	r3, r0
 800136e:	461a      	mov	r2, r3
 8001370:	4b02      	ldr	r3, [pc, #8]	@ (800137c <Scan_TimeSensor+0x3c>)
 8001372:	601a      	str	r2, [r3, #0]
}
 8001374:	bf00      	nop
 8001376:	3708      	adds	r7, #8
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}
 800137c:	20000150 	.word	0x20000150
 8001380:	080012b5 	.word	0x080012b5
 8001384:	080060c4 	.word	0x080060c4

08001388 <delay_ms>:

 void delay_ms(uint32_t ms) {
 8001388:	b580      	push	{r7, lr}
 800138a:	b084      	sub	sp, #16
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]

	uint32_t startTime = GetMilSecTick(); //Lưu lại thời điểm hiện tại.
 8001390:	f001 fd04 	bl	8002d9c <GetMilSecTick>
 8001394:	60f8      	str	r0, [r7, #12]
	while (CalculatorTime(startTime, GetMilSecTick()) <= ms);
 8001396:	bf00      	nop
 8001398:	f001 fd00 	bl	8002d9c <GetMilSecTick>
 800139c:	4603      	mov	r3, r0
 800139e:	4619      	mov	r1, r3
 80013a0:	68f8      	ldr	r0, [r7, #12]
 80013a2:	f000 f809 	bl	80013b8 <CalculatorTime>
 80013a6:	4602      	mov	r2, r0
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d2f4      	bcs.n	8001398 <delay_ms+0x10>

//	Đợi cho đến khi hết khoảng time cài đặt

}
 80013ae:	bf00      	nop
 80013b0:	bf00      	nop
 80013b2:	3710      	adds	r7, #16
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}

080013b8 <CalculatorTime>:
 * @func   CalculatorTime
 * @brief  Caculator time button
 * @param  None
 * @retval None
 */
 uint32_t CalculatorTime(uint32_t dwTimeInit, uint32_t dwTimeCurrent) {
 80013b8:	b480      	push	{r7}
 80013ba:	b085      	sub	sp, #20
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
 80013c0:	6039      	str	r1, [r7, #0]
 	uint32_t dwTimeTotal;
 	if (dwTimeCurrent >= dwTimeInit) {
 80013c2:	683a      	ldr	r2, [r7, #0]
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	429a      	cmp	r2, r3
 80013c8:	d304      	bcc.n	80013d4 <CalculatorTime+0x1c>
 		dwTimeTotal = dwTimeCurrent - dwTimeInit;
 80013ca:	683a      	ldr	r2, [r7, #0]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	1ad3      	subs	r3, r2, r3
 80013d0:	60fb      	str	r3, [r7, #12]
 80013d2:	e004      	b.n	80013de <CalculatorTime+0x26>
 	} else {
 		dwTimeTotal = 0xFFFFFFFFU + dwTimeCurrent - dwTimeInit;
 80013d4:	683a      	ldr	r2, [r7, #0]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	1ad3      	subs	r3, r2, r3
 80013da:	3b01      	subs	r3, #1
 80013dc:	60fb      	str	r3, [r7, #12]
 	}
 	return dwTimeTotal;
 80013de:	68fb      	ldr	r3, [r7, #12]

 }
 80013e0:	4618      	mov	r0, r3
 80013e2:	3714      	adds	r7, #20
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr

080013ec <AppCommon>:

 static void AppCommon()
 {
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af02      	add	r7, sp, #8
 	 SystemCoreClockUpdate();
 80013f2:	f000 fdbd 	bl	8001f70 <SystemCoreClockUpdate>
 	 TimerInit();
 80013f6:	f001 fbfd 	bl	8002bf4 <TimerInit>

     SPI1_Init();
 80013fa:	f000 f843 	bl	8001484 <SPI1_Init>
     I2C_Init_temphumi();
 80013fe:	f000 f871 	bl	80014e4 <I2C_Init_temphumi>

     TemHumSensor_Init();
 8001402:	f001 fdc3 	bl	8002f8c <TemHumSensor_Init>

     LightSensor_AdcInit();		//Khởi tạo ngoại vi ADC ở chế độ Polling.
 8001406:	f000 f8b7 	bl	8001578 <LightSensor_AdcInit>
     LedControl_TimerOCInit();   //Khởi tạo ngoại vi TIMER ở chế độ băm xung Output Compare.
 800140a:	f000 f911 	bl	8001630 <LedControl_TimerOCInit>

     KalmanFilterInit(2, 2, 0.001); // Khởi tạo bộ lọc Kalman
 800140e:	ed9f 1a19 	vldr	s2, [pc, #100]	@ 8001474 <AppCommon+0x88>
 8001412:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 8001416:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 800141a:	f000 faa7 	bl	800196c <KalmanFilterInit>

     Ucglib4WireSWSPI_begin(&ucg, UCG_FONT_MODE_SOLID); //là hàm khởi tạo LCD.
 800141e:	2100      	movs	r1, #0
 8001420:	4815      	ldr	r0, [pc, #84]	@ (8001478 <AppCommon+0x8c>)
 8001422:	f001 ff95 	bl	8003350 <Ucglib4WireSWSPI_begin>
     ucg_ClearScreen(&ucg);
 8001426:	4814      	ldr	r0, [pc, #80]	@ (8001478 <AppCommon+0x8c>)
 8001428:	f001 ffd9 	bl	80033de <ucg_ClearScreen>
     ucg_SetFont(&ucg, ucg_font_ncenR12_hr);
 800142c:	4913      	ldr	r1, [pc, #76]	@ (800147c <AppCommon+0x90>)
 800142e:	4812      	ldr	r0, [pc, #72]	@ (8001478 <AppCommon+0x8c>)
 8001430:	f003 f8ee 	bl	8004610 <ucg_SetFont>
     ucg_SetColor(&ucg, 0, 255, 255, 255);
 8001434:	23ff      	movs	r3, #255	@ 0xff
 8001436:	9300      	str	r3, [sp, #0]
 8001438:	23ff      	movs	r3, #255	@ 0xff
 800143a:	22ff      	movs	r2, #255	@ 0xff
 800143c:	2100      	movs	r1, #0
 800143e:	480e      	ldr	r0, [pc, #56]	@ (8001478 <AppCommon+0x8c>)
 8001440:	f003 f9c5 	bl	80047ce <ucg_SetColor>
     ucg_SetColor(&ucg, 1, 0, 0, 0);
 8001444:	2300      	movs	r3, #0
 8001446:	9300      	str	r3, [sp, #0]
 8001448:	2300      	movs	r3, #0
 800144a:	2200      	movs	r2, #0
 800144c:	2101      	movs	r1, #1
 800144e:	480a      	ldr	r0, [pc, #40]	@ (8001478 <AppCommon+0x8c>)
 8001450:	f003 f9bd 	bl	80047ce <ucg_SetColor>
     ucg_SetRotate180(&ucg);
 8001454:	4808      	ldr	r0, [pc, #32]	@ (8001478 <AppCommon+0x8c>)
 8001456:	f003 fab5 	bl	80049c4 <ucg_SetRotate180>
     Scan_TimeSensor(5000);
 800145a:	f241 3088 	movw	r0, #5000	@ 0x1388
 800145e:	f7ff ff6f 	bl	8001340 <Scan_TimeSensor>
     time_initial = GetMilSecTick();
 8001462:	f001 fc9b 	bl	8002d9c <GetMilSecTick>
 8001466:	4603      	mov	r3, r0
 8001468:	4a05      	ldr	r2, [pc, #20]	@ (8001480 <AppCommon+0x94>)
 800146a:	6013      	str	r3, [r2, #0]
 }
 800146c:	bf00      	nop
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	3a83126f 	.word	0x3a83126f
 8001478:	20000094 	.word	0x20000094
 800147c:	080061d4 	.word	0x080061d4
 8001480:	20000148 	.word	0x20000148

08001484 <SPI1_Init>:

static void SPI1_Init(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	/* GPIOA, GPIOB and GPIOC Clocks enable */
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA | RCC_AHB1Periph_GPIOB | RCC_AHB1Periph_GPIOC, ENABLE);
 800148a:	2101      	movs	r1, #1
 800148c:	2007      	movs	r0, #7
 800148e:	f000 fcb9 	bl	8001e04 <RCC_AHB1PeriphClockCmd>

	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8001492:	2301      	movs	r3, #1
 8001494:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 8001496:	2303      	movs	r3, #3
 8001498:	717b      	strb	r3, [r7, #5]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 800149a:	2300      	movs	r3, #0
 800149c:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 800149e:	2300      	movs	r3, #0
 80014a0:	71fb      	strb	r3, [r7, #7]

	GPIO_InitStructure.GPIO_Pin = SPI1_SCK_PIN | SPI1_MOSI_PIN | SPI1_RS_PIN | SPI1_MODE_PIN;
 80014a2:	f44f 7368 	mov.w	r3, #928	@ 0x3a0
 80014a6:	603b      	str	r3, [r7, #0]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 80014a8:	463b      	mov	r3, r7
 80014aa:	4619      	mov	r1, r3
 80014ac:	480a      	ldr	r0, [pc, #40]	@ (80014d8 <SPI1_Init+0x54>)
 80014ae:	f000 fb0b 	bl	8001ac8 <GPIO_Init>

	GPIO_InitStructure.GPIO_Pin = SPI1_CS_PIN | SPI1_ENABLE_PIN;
 80014b2:	f44f 6388 	mov.w	r3, #1088	@ 0x440
 80014b6:	603b      	str	r3, [r7, #0]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 80014b8:	463b      	mov	r3, r7
 80014ba:	4619      	mov	r1, r3
 80014bc:	4807      	ldr	r0, [pc, #28]	@ (80014dc <SPI1_Init+0x58>)
 80014be:	f000 fb03 	bl	8001ac8 <GPIO_Init>

	GPIO_InitStructure.GPIO_Pin = SPI1_RST_PIN;
 80014c2:	2380      	movs	r3, #128	@ 0x80
 80014c4:	603b      	str	r3, [r7, #0]
	GPIO_Init(GPIOC, &GPIO_InitStructure);
 80014c6:	463b      	mov	r3, r7
 80014c8:	4619      	mov	r1, r3
 80014ca:	4805      	ldr	r0, [pc, #20]	@ (80014e0 <SPI1_Init+0x5c>)
 80014cc:	f000 fafc 	bl	8001ac8 <GPIO_Init>
}
 80014d0:	bf00      	nop
 80014d2:	3708      	adds	r7, #8
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	40020000 	.word	0x40020000
 80014dc:	40020400 	.word	0x40020400
 80014e0:	40020800 	.word	0x40020800

080014e4 <I2C_Init_temphumi>:
 * @brief  Init I2C temp and humi
 * @param  None
 * @retval None
 */
static void I2C_Init_temphumi(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b086      	sub	sp, #24
 80014e8:	af00      	add	r7, sp, #0
// Initialization struct
	I2C_InitTypeDef I2C_InitStruct;
	GPIO_InitTypeDef GPIO_InitStruct;

	// Step 1: Initialize I2C
	RCC_APB1PeriphClockCmd(I2Cx_RCC, ENABLE);
 80014ea:	2101      	movs	r1, #1
 80014ec:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 80014f0:	f000 fca8 	bl	8001e44 <RCC_APB1PeriphClockCmd>
	I2C_InitStruct.I2C_ClockSpeed = 400000;
 80014f4:	4b1d      	ldr	r3, [pc, #116]	@ (800156c <I2C_Init_temphumi+0x88>)
 80014f6:	60bb      	str	r3, [r7, #8]
	I2C_InitStruct.I2C_Mode = I2C_Mode_I2C;
 80014f8:	2300      	movs	r3, #0
 80014fa:	81bb      	strh	r3, [r7, #12]
	I2C_InitStruct.I2C_DutyCycle = I2C_DutyCycle_2;
 80014fc:	f64b 73ff 	movw	r3, #49151	@ 0xbfff
 8001500:	81fb      	strh	r3, [r7, #14]
	I2C_InitStruct.I2C_OwnAddress1 = 0x00;
 8001502:	2300      	movs	r3, #0
 8001504:	823b      	strh	r3, [r7, #16]
	I2C_InitStruct.I2C_Ack = I2C_Ack_Enable;
 8001506:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800150a:	827b      	strh	r3, [r7, #18]
	I2C_InitStruct.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 800150c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001510:	82bb      	strh	r3, [r7, #20]
	I2C_Init(I2Cx_SENSOR, &I2C_InitStruct);
 8001512:	f107 0308 	add.w	r3, r7, #8
 8001516:	4619      	mov	r1, r3
 8001518:	4815      	ldr	r0, [pc, #84]	@ (8001570 <I2C_Init_temphumi+0x8c>)
 800151a:	f001 f815 	bl	8002548 <I2C_Init>
	I2C_Cmd(I2Cx_SENSOR, ENABLE);
 800151e:	2101      	movs	r1, #1
 8001520:	4813      	ldr	r0, [pc, #76]	@ (8001570 <I2C_Init_temphumi+0x8c>)
 8001522:	f001 f8d3 	bl	80026cc <I2C_Cmd>

	// Step 2: Initialize GPIO as open drain alternate function
	RCC_AHB1PeriphClockCmd(I2C_GPIO_RCC, ENABLE);
 8001526:	2101      	movs	r1, #1
 8001528:	2002      	movs	r0, #2
 800152a:	f000 fc6b 	bl	8001e04 <RCC_AHB1PeriphClockCmd>
	GPIO_InitStruct.GPIO_Pin = I2C_PIN_SCL | I2C_PIN_SDA;
 800152e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001532:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF;
 8001534:	2302      	movs	r3, #2
 8001536:	713b      	strb	r3, [r7, #4]
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_50MHz;
 8001538:	2302      	movs	r3, #2
 800153a:	717b      	strb	r3, [r7, #5]
	GPIO_InitStruct.GPIO_OType = GPIO_OType_OD;
 800153c:	2301      	movs	r3, #1
 800153e:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStruct.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 8001540:	2300      	movs	r3, #0
 8001542:	71fb      	strb	r3, [r7, #7]
	GPIO_Init(I2C_GPIO, &GPIO_InitStruct);
 8001544:	463b      	mov	r3, r7
 8001546:	4619      	mov	r1, r3
 8001548:	480a      	ldr	r0, [pc, #40]	@ (8001574 <I2C_Init_temphumi+0x90>)
 800154a:	f000 fabd 	bl	8001ac8 <GPIO_Init>

	/* Connect PXx to I2C_SCL */
	GPIO_PinAFConfig(I2C_GPIO, GPIO_PinSource8, GPIO_AF_I2C1);
 800154e:	2204      	movs	r2, #4
 8001550:	2108      	movs	r1, #8
 8001552:	4808      	ldr	r0, [pc, #32]	@ (8001574 <I2C_Init_temphumi+0x90>)
 8001554:	f000 fb5f 	bl	8001c16 <GPIO_PinAFConfig>

	/* Connect PXx to I2C_SDA */
	GPIO_PinAFConfig(I2C_GPIO, GPIO_PinSource9, GPIO_AF_I2C1);
 8001558:	2204      	movs	r2, #4
 800155a:	2109      	movs	r1, #9
 800155c:	4805      	ldr	r0, [pc, #20]	@ (8001574 <I2C_Init_temphumi+0x90>)
 800155e:	f000 fb5a 	bl	8001c16 <GPIO_PinAFConfig>
}
 8001562:	bf00      	nop
 8001564:	3718      	adds	r7, #24
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	00061a80 	.word	0x00061a80
 8001570:	40005400 	.word	0x40005400
 8001574:	40020400 	.word	0x40020400

08001578 <LightSensor_AdcInit>:
 * @brief  Light Sensor ADC Polling initialize
 * @param  None
 * @retval None
 */
static void LightSensor_AdcInit(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b08c      	sub	sp, #48	@ 0x30
 800157c:	af00      	add	r7, sp, #0
	ADC_CommonInitTypeDef ADC_CommonInitStructure;
	ADC_InitTypeDef ADC_InitStructure;
	GPIO_InitTypeDef GPIO_InitStructure;

	/* Enable peripheral clocks ***********************************************/
	RCC_APB2PeriphClockCmd(ADCx_CLK, ENABLE);
 800157e:	2101      	movs	r1, #1
 8001580:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001584:	f000 fc7e 	bl	8001e84 <RCC_APB2PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 8001588:	2101      	movs	r1, #1
 800158a:	2004      	movs	r0, #4
 800158c:	f000 fc3a 	bl	8001e04 <RCC_AHB1PeriphClockCmd>

	GPIO_InitStructure.GPIO_Pin = ADC_PIN;
 8001590:	2320      	movs	r3, #32
 8001592:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 8001594:	2303      	movs	r3, #3
 8001596:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8001598:	2300      	movs	r3, #0
 800159a:	71fb      	strb	r3, [r7, #7]
	GPIO_Init(ADC_PORT, &GPIO_InitStructure);
 800159c:	463b      	mov	r3, r7
 800159e:	4619      	mov	r1, r3
 80015a0:	4821      	ldr	r0, [pc, #132]	@ (8001628 <LightSensor_AdcInit+0xb0>)
 80015a2:	f000 fa91 	bl	8001ac8 <GPIO_Init>

	/* ADC Deinit ***************************************************/
	ADC_DeInit();
 80015a6:	f000 fdaf 	bl	8002108 <ADC_DeInit>

	/* ADC Common Init ********************************************************/
	ADC_CommonInitStructure.ADC_Mode = ADC_Mode_Independent;
 80015aa:	2300      	movs	r3, #0
 80015ac:	623b      	str	r3, [r7, #32]
	ADC_CommonInitStructure.ADC_Prescaler = ADC_Prescaler_Div2;
 80015ae:	2300      	movs	r3, #0
 80015b0:	627b      	str	r3, [r7, #36]	@ 0x24
	ADC_CommonInitStructure.ADC_DMAAccessMode = ADC_DMAAccessMode_Disabled;
 80015b2:	2300      	movs	r3, #0
 80015b4:	62bb      	str	r3, [r7, #40]	@ 0x28
	ADC_CommonInitStructure.ADC_TwoSamplingDelay = ADC_TwoSamplingDelay_5Cycles;
 80015b6:	2300      	movs	r3, #0
 80015b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	ADC_CommonInit(&ADC_CommonInitStructure);
 80015ba:	f107 0320 	add.w	r3, r7, #32
 80015be:	4618      	mov	r0, r3
 80015c0:	f000 fe06 	bl	80021d0 <ADC_CommonInit>

	/* ADC1 Init **************************************************************/
	ADC_InitStructure.ADC_Resolution = ADC_Resolution_12b;
 80015c4:	2300      	movs	r3, #0
 80015c6:	60bb      	str	r3, [r7, #8]
	ADC_InitStructure.ADC_ScanConvMode = DISABLE;
 80015c8:	2300      	movs	r3, #0
 80015ca:	733b      	strb	r3, [r7, #12]
	ADC_InitStructure.ADC_ContinuousConvMode = ENABLE;
 80015cc:	2301      	movs	r3, #1
 80015ce:	737b      	strb	r3, [r7, #13]
	ADC_InitStructure.ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
 80015d0:	2300      	movs	r3, #0
 80015d2:	613b      	str	r3, [r7, #16]
	ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_T1_CC1;
 80015d4:	2300      	movs	r3, #0
 80015d6:	617b      	str	r3, [r7, #20]
	ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
 80015d8:	2300      	movs	r3, #0
 80015da:	61bb      	str	r3, [r7, #24]
	ADC_InitStructure.ADC_NbrOfConversion = 1;
 80015dc:	2301      	movs	r3, #1
 80015de:	773b      	strb	r3, [r7, #28]
	ADC_Init(ADC1, &ADC_InitStructure);
 80015e0:	f107 0308 	add.w	r3, r7, #8
 80015e4:	4619      	mov	r1, r3
 80015e6:	4811      	ldr	r0, [pc, #68]	@ (800162c <LightSensor_AdcInit+0xb4>)
 80015e8:	f000 fd9c 	bl	8002124 <ADC_Init>

	//Polling Configure
	ADC_EOCOnEachRegularChannelCmd(ADC1, ENABLE);
 80015ec:	2101      	movs	r1, #1
 80015ee:	480f      	ldr	r0, [pc, #60]	@ (800162c <LightSensor_AdcInit+0xb4>)
 80015f0:	f000 ff0c 	bl	800240c <ADC_EOCOnEachRegularChannelCmd>
	ADC_ContinuousModeCmd(ADC1, DISABLE);
 80015f4:	2100      	movs	r1, #0
 80015f6:	480d      	ldr	r0, [pc, #52]	@ (800162c <LightSensor_AdcInit+0xb4>)
 80015f8:	f000 ff24 	bl	8002444 <ADC_ContinuousModeCmd>
	ADC_DiscModeChannelCountConfig(ADC1, 1);
 80015fc:	2101      	movs	r1, #1
 80015fe:	480b      	ldr	r0, [pc, #44]	@ (800162c <LightSensor_AdcInit+0xb4>)
 8001600:	f000 ff3c 	bl	800247c <ADC_DiscModeChannelCountConfig>
	ADC_DiscModeCmd(ADC1, ENABLE);
 8001604:	2101      	movs	r1, #1
 8001606:	4809      	ldr	r0, [pc, #36]	@ (800162c <LightSensor_AdcInit+0xb4>)
 8001608:	f000 ff5a 	bl	80024c0 <ADC_DiscModeCmd>


	/* ADC1 regular channel15 configuration ************************************/
	ADC_RegularChannelConfig(ADC1, ADC_Channel_15, 1, ADC_SampleTime_15Cycles);
 800160c:	2301      	movs	r3, #1
 800160e:	2201      	movs	r2, #1
 8001610:	210f      	movs	r1, #15
 8001612:	4806      	ldr	r0, [pc, #24]	@ (800162c <LightSensor_AdcInit+0xb4>)
 8001614:	f000 fe20 	bl	8002258 <ADC_RegularChannelConfig>

	/* Enable ADC1 */
	ADC_Cmd(ADC1, ENABLE);
 8001618:	2101      	movs	r1, #1
 800161a:	4804      	ldr	r0, [pc, #16]	@ (800162c <LightSensor_AdcInit+0xb4>)
 800161c:	f000 fe00 	bl	8002220 <ADC_Cmd>
}
 8001620:	bf00      	nop
 8001622:	3730      	adds	r7, #48	@ 0x30
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}
 8001628:	40020800 	.word	0x40020800
 800162c:	40012000 	.word	0x40012000

08001630 <LedControl_TimerOCInit>:
 * @brief  Control Led with Timer Output Capture
 * @param  None
 * @retval None
 */
static void LedControl_TimerOCInit(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b08a      	sub	sp, #40	@ 0x28
 8001634:	af00      	add	r7, sp, #0
	TIM_TimeBaseInitTypeDef 	TIM_TimeBaseInitStruct;
	TIM_OCInitTypeDef			TIM_OC_InitStruct;


	// GPIO Configure
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 8001636:	2101      	movs	r1, #1
 8001638:	2001      	movs	r0, #1
 800163a:	f000 fbe3 	bl	8001e04 <RCC_AHB1PeriphClockCmd>

	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF;
 800163e:	2302      	movs	r3, #2
 8001640:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 8001644:	2300      	movs	r3, #0
 8001646:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_NOPULL;
 800164a:	2300      	movs	r3, #0
 800164c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_50MHz;
 8001650:	2302      	movs	r3, #2
 8001652:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_11;
 8001656:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800165a:	623b      	str	r3, [r7, #32]
	GPIO_Init(GPIOA, &GPIO_InitStruct);
 800165c:	f107 0320 	add.w	r3, r7, #32
 8001660:	4619      	mov	r1, r3
 8001662:	481a      	ldr	r0, [pc, #104]	@ (80016cc <LedControl_TimerOCInit+0x9c>)
 8001664:	f000 fa30 	bl	8001ac8 <GPIO_Init>

	GPIO_PinAFConfig(GPIOA, GPIO_PinSource11, GPIO_AF_TIM1);
 8001668:	2201      	movs	r2, #1
 800166a:	210b      	movs	r1, #11
 800166c:	4817      	ldr	r0, [pc, #92]	@ (80016cc <LedControl_TimerOCInit+0x9c>)
 800166e:	f000 fad2 	bl	8001c16 <GPIO_PinAFConfig>

	//TimeBase Configure

	RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);
 8001672:	2101      	movs	r1, #1
 8001674:	2001      	movs	r0, #1
 8001676:	f000 fc05 	bl	8001e84 <RCC_APB2PeriphClockCmd>

	TIM_TimeBaseInitStruct.TIM_CounterMode = TIM_CounterMode_Up;
 800167a:	2300      	movs	r3, #0
 800167c:	82fb      	strh	r3, [r7, #22]
	TIM_TimeBaseInitStruct.TIM_Prescaler = 0;
 800167e:	2300      	movs	r3, #0
 8001680:	82bb      	strh	r3, [r7, #20]

	/************************************************************************
	 * 	FPwm = Fclk / (ARR+1) * (PSC + 1)																	*
	 ************************************************************************/
	TIM_TimeBaseInitStruct.TIM_Period = 8399; // ARR = 8399
 8001682:	f242 03cf 	movw	r3, #8399	@ 0x20cf
 8001686:	61bb      	str	r3, [r7, #24]
	TIM_TimeBaseInitStruct.TIM_ClockDivision = 0;
 8001688:	2300      	movs	r3, #0
 800168a:	83bb      	strh	r3, [r7, #28]
	TIM_TimeBaseInit(TIM1, &TIM_TimeBaseInitStruct);
 800168c:	f107 0314 	add.w	r3, r7, #20
 8001690:	4619      	mov	r1, r3
 8001692:	480f      	ldr	r0, [pc, #60]	@ (80016d0 <LedControl_TimerOCInit+0xa0>)
 8001694:	f001 f93a 	bl	800290c <TIM_TimeBaseInit>


	//TimeIC Configure
	TIM_OC_InitStruct.TIM_OCMode = TIM_OCMode_PWM2;
 8001698:	2370      	movs	r3, #112	@ 0x70
 800169a:	803b      	strh	r3, [r7, #0]
	TIM_OC_InitStruct.TIM_OutputState = TIM_OutputState_Enable;
 800169c:	2301      	movs	r3, #1
 800169e:	807b      	strh	r3, [r7, #2]
	TIM_OC_InitStruct.TIM_Pulse = 0;
 80016a0:	2300      	movs	r3, #0
 80016a2:	60bb      	str	r3, [r7, #8]
	TIM_OC_InitStruct.TIM_OCPolarity = TIM_OCPolarity_Low;
 80016a4:	2302      	movs	r3, #2
 80016a6:	81bb      	strh	r3, [r7, #12]

	TIM_OC4Init(TIM1, &TIM_OC_InitStruct);
 80016a8:	463b      	mov	r3, r7
 80016aa:	4619      	mov	r1, r3
 80016ac:	4808      	ldr	r0, [pc, #32]	@ (80016d0 <LedControl_TimerOCInit+0xa0>)
 80016ae:	f001 f9b9 	bl	8002a24 <TIM_OC4Init>

	TIM_Cmd(TIM1, ENABLE);
 80016b2:	2101      	movs	r1, #1
 80016b4:	4806      	ldr	r0, [pc, #24]	@ (80016d0 <LedControl_TimerOCInit+0xa0>)
 80016b6:	f001 f995 	bl	80029e4 <TIM_Cmd>


	TIM_CtrlPWMOutputs(TIM1, ENABLE);
 80016ba:	2101      	movs	r1, #1
 80016bc:	4804      	ldr	r0, [pc, #16]	@ (80016d0 <LedControl_TimerOCInit+0xa0>)
 80016be:	f001 fa27 	bl	8002b10 <TIM_CtrlPWMOutputs>
}
 80016c2:	bf00      	nop
 80016c4:	3728      	adds	r7, #40	@ 0x28
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	40020000 	.word	0x40020000
 80016d0:	40010000 	.word	0x40010000

080016d4 <LightSensor_AdcPollingRead>:
 * @brief  Read value from ADC
 * @param  None
 * @retval None
 */
uint16_t LightSensor_AdcPollingRead(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0
	uint16_t result = 0;
 80016da:	2300      	movs	r3, #0
 80016dc:	80fb      	strh	r3, [r7, #6]

	//  Bắt đầu quá trình chuyển đổi dữ liệu ADC.
	ADC_SoftwareStartConv(ADCx_SENSOR);
 80016de:	480a      	ldr	r0, [pc, #40]	@ (8001708 <LightSensor_AdcPollingRead+0x34>)
 80016e0:	f000 fe84 	bl	80023ec <ADC_SoftwareStartConv>

	// Đợi quá trình chuyển đổi được hoàn tất để đọc dữ liệu.
	while (ADC_GetFlagStatus(ADCx_SENSOR, ADC_FLAG_EOC) == RESET);
 80016e4:	bf00      	nop
 80016e6:	2102      	movs	r1, #2
 80016e8:	4807      	ldr	r0, [pc, #28]	@ (8001708 <LightSensor_AdcPollingRead+0x34>)
 80016ea:	f000 ff12 	bl	8002512 <ADC_GetFlagStatus>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d0f8      	beq.n	80016e6 <LightSensor_AdcPollingRead+0x12>

	// Read value
	result = ADC_GetConversionValue(ADCx_SENSOR);
 80016f4:	4804      	ldr	r0, [pc, #16]	@ (8001708 <LightSensor_AdcPollingRead+0x34>)
 80016f6:	f000 feff 	bl	80024f8 <ADC_GetConversionValue>
 80016fa:	4603      	mov	r3, r0
 80016fc:	80fb      	strh	r3, [r7, #6]

	return result;
 80016fe:	88fb      	ldrh	r3, [r7, #6]

}
 8001700:	4618      	mov	r0, r3
 8001702:	3708      	adds	r7, #8
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}
 8001708:	40012000 	.word	0x40012000

0800170c <Kanman_Light>:
 * @brief  Use Kanman filter for Light Sensor
 * @param  None
 * @retval None
 */
uint16_t Kanman_Light(uint16_t lightLevel)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af00      	add	r7, sp, #0
 8001712:	4603      	mov	r3, r0
 8001714:	80fb      	strh	r3, [r7, #6]
	lightLevelAfterFilter = KalmanFilter_updateEstimate(lightLevel);
 8001716:	88fb      	ldrh	r3, [r7, #6]
 8001718:	ee07 3a90 	vmov	s15, r3
 800171c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001720:	eeb0 0a67 	vmov.f32	s0, s15
 8001724:	f000 f940 	bl	80019a8 <KalmanFilter_updateEstimate>
 8001728:	eef0 7a40 	vmov.f32	s15, s0
 800172c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001730:	ee17 3a90 	vmov	r3, s15
 8001734:	b29a      	uxth	r2, r3
 8001736:	4b04      	ldr	r3, [pc, #16]	@ (8001748 <Kanman_Light+0x3c>)
 8001738:	801a      	strh	r2, [r3, #0]

	return lightLevelAfterFilter;
 800173a:	4b03      	ldr	r3, [pc, #12]	@ (8001748 <Kanman_Light+0x3c>)
 800173c:	881b      	ldrh	r3, [r3, #0]
}
 800173e:	4618      	mov	r0, r3
 8001740:	3708      	adds	r7, #8
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	200001c2 	.word	0x200001c2

0800174c <LedControl_TimerOCSetPwm>:
 * @brief  Control Led with PWM
 * @param  None
 * @retval None
 */
static void LedControl_TimerOCSetPwm(uint32_t Compare)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b082      	sub	sp, #8
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
	TIM_SetCompare4(TIM1,Compare);
 8001754:	6879      	ldr	r1, [r7, #4]
 8001756:	4803      	ldr	r0, [pc, #12]	@ (8001764 <LedControl_TimerOCSetPwm+0x18>)
 8001758:	f001 f9cc 	bl	8002af4 <TIM_SetCompare4>
}
 800175c:	bf00      	nop
 800175e:	3708      	adds	r7, #8
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}
 8001764:	40010000 	.word	0x40010000

08001768 <ABL_Process>:
 * @brief  AutoBrightness use Light Sensor
 * @param  None
 * @retval None
 */
static void ABL_Process(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b084      	sub	sp, #16
 800176c:	af02      	add	r7, sp, #8
	uint32_t dwTimeCurrent;
	static uint32_t dwTimeTotal, dwTimeInit;

	dwTimeCurrent = GetMilSecTick();
 800176e:	f001 fb15 	bl	8002d9c <GetMilSecTick>
 8001772:	6078      	str	r0, [r7, #4]

	if(dwTimeCurrent >= dwTimeInit)
 8001774:	4b3f      	ldr	r3, [pc, #252]	@ (8001874 <ABL_Process+0x10c>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	687a      	ldr	r2, [r7, #4]
 800177a:	429a      	cmp	r2, r3
 800177c:	d309      	bcc.n	8001792 <ABL_Process+0x2a>
	{
		dwTimeTotal += dwTimeCurrent - dwTimeInit;
 800177e:	4b3d      	ldr	r3, [pc, #244]	@ (8001874 <ABL_Process+0x10c>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	687a      	ldr	r2, [r7, #4]
 8001784:	1ad2      	subs	r2, r2, r3
 8001786:	4b3c      	ldr	r3, [pc, #240]	@ (8001878 <ABL_Process+0x110>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4413      	add	r3, r2
 800178c:	4a3a      	ldr	r2, [pc, #232]	@ (8001878 <ABL_Process+0x110>)
 800178e:	6013      	str	r3, [r2, #0]
 8001790:	e009      	b.n	80017a6 <ABL_Process+0x3e>
	}
	else
	{
		dwTimeTotal += 0xFFFFFFFFU - dwTimeCurrent + dwTimeInit;
 8001792:	4b38      	ldr	r3, [pc, #224]	@ (8001874 <ABL_Process+0x10c>)
 8001794:	681a      	ldr	r2, [r3, #0]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	1ad2      	subs	r2, r2, r3
 800179a:	4b37      	ldr	r3, [pc, #220]	@ (8001878 <ABL_Process+0x110>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4413      	add	r3, r2
 80017a0:	3b01      	subs	r3, #1
 80017a2:	4a35      	ldr	r2, [pc, #212]	@ (8001878 <ABL_Process+0x110>)
 80017a4:	6013      	str	r3, [r2, #0]
	}

	if(dwTimeTotal >= 100)
 80017a6:	4b34      	ldr	r3, [pc, #208]	@ (8001878 <ABL_Process+0x110>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	2b63      	cmp	r3, #99	@ 0x63
 80017ac:	d95a      	bls.n	8001864 <ABL_Process+0xfc>
	{
		dwTimeTotal = 0;
 80017ae:	4b32      	ldr	r3, [pc, #200]	@ (8001878 <ABL_Process+0x110>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	601a      	str	r2, [r3, #0]
		AdcValue  = LightSensor_AdcPollingRead(); //Đọc giá trị ADC đo được từ cảm biến ánh sáng
 80017b4:	f7ff ff8e 	bl	80016d4 <LightSensor_AdcPollingRead>
 80017b8:	4603      	mov	r3, r0
 80017ba:	461a      	mov	r2, r3
 80017bc:	4b2f      	ldr	r3, [pc, #188]	@ (800187c <ABL_Process+0x114>)
 80017be:	801a      	strh	r2, [r3, #0]
		Kanman_light = Kanman_Light(AdcValue);
 80017c0:	4b2e      	ldr	r3, [pc, #184]	@ (800187c <ABL_Process+0x114>)
 80017c2:	881b      	ldrh	r3, [r3, #0]
 80017c4:	4618      	mov	r0, r3
 80017c6:	f7ff ffa1 	bl	800170c <Kanman_Light>
 80017ca:	4603      	mov	r3, r0
 80017cc:	461a      	mov	r2, r3
 80017ce:	4b2c      	ldr	r3, [pc, #176]	@ (8001880 <ABL_Process+0x118>)
 80017d0:	801a      	strh	r2, [r3, #0]


		LedControl_TimerOCSetPwm(Kanman_light);
 80017d2:	4b2b      	ldr	r3, [pc, #172]	@ (8001880 <ABL_Process+0x118>)
 80017d4:	881b      	ldrh	r3, [r3, #0]
 80017d6:	4618      	mov	r0, r3
 80017d8:	f7ff ffb8 	bl	800174c <LedControl_TimerOCSetPwm>

		ucg_DrawString(&ucg, 0, 32, 0, "Nhom 1");
 80017dc:	4b29      	ldr	r3, [pc, #164]	@ (8001884 <ABL_Process+0x11c>)
 80017de:	9300      	str	r3, [sp, #0]
 80017e0:	2300      	movs	r3, #0
 80017e2:	2220      	movs	r2, #32
 80017e4:	2100      	movs	r1, #0
 80017e6:	4828      	ldr	r0, [pc, #160]	@ (8001888 <ABL_Process+0x120>)
 80017e8:	f002 fe4e 	bl	8004488 <ucg_DrawString>
		memset(src3, 0, sizeof(src3));
 80017ec:	2214      	movs	r2, #20
 80017ee:	2100      	movs	r1, #0
 80017f0:	4826      	ldr	r0, [pc, #152]	@ (800188c <ABL_Process+0x124>)
 80017f2:	f003 ffbf 	bl	8005774 <memset>
		sprintf(src3, " Temp = %d oC  ", temperature);
 80017f6:	4b26      	ldr	r3, [pc, #152]	@ (8001890 <ABL_Process+0x128>)
 80017f8:	781b      	ldrb	r3, [r3, #0]
 80017fa:	461a      	mov	r2, r3
 80017fc:	4925      	ldr	r1, [pc, #148]	@ (8001894 <ABL_Process+0x12c>)
 80017fe:	4823      	ldr	r0, [pc, #140]	@ (800188c <ABL_Process+0x124>)
 8001800:	f003 ff98 	bl	8005734 <siprintf>
		ucg_DrawString(&ucg, 0, 52, 0, src3);
 8001804:	4b21      	ldr	r3, [pc, #132]	@ (800188c <ABL_Process+0x124>)
 8001806:	9300      	str	r3, [sp, #0]
 8001808:	2300      	movs	r3, #0
 800180a:	2234      	movs	r2, #52	@ 0x34
 800180c:	2100      	movs	r1, #0
 800180e:	481e      	ldr	r0, [pc, #120]	@ (8001888 <ABL_Process+0x120>)
 8001810:	f002 fe3a 	bl	8004488 <ucg_DrawString>

		memset(src4, 0, sizeof(src4));
 8001814:	2214      	movs	r2, #20
 8001816:	2100      	movs	r1, #0
 8001818:	481f      	ldr	r0, [pc, #124]	@ (8001898 <ABL_Process+0x130>)
 800181a:	f003 ffab 	bl	8005774 <memset>
		sprintf(src4, " Humi = %3d %%   ", humidity);
 800181e:	4b1f      	ldr	r3, [pc, #124]	@ (800189c <ABL_Process+0x134>)
 8001820:	781b      	ldrb	r3, [r3, #0]
 8001822:	461a      	mov	r2, r3
 8001824:	491e      	ldr	r1, [pc, #120]	@ (80018a0 <ABL_Process+0x138>)
 8001826:	481c      	ldr	r0, [pc, #112]	@ (8001898 <ABL_Process+0x130>)
 8001828:	f003 ff84 	bl	8005734 <siprintf>
		ucg_DrawString(&ucg, 0, 72, 0, src4);
 800182c:	4b1a      	ldr	r3, [pc, #104]	@ (8001898 <ABL_Process+0x130>)
 800182e:	9300      	str	r3, [sp, #0]
 8001830:	2300      	movs	r3, #0
 8001832:	2248      	movs	r2, #72	@ 0x48
 8001834:	2100      	movs	r1, #0
 8001836:	4814      	ldr	r0, [pc, #80]	@ (8001888 <ABL_Process+0x120>)
 8001838:	f002 fe26 	bl	8004488 <ucg_DrawString>

		memset(src5, 0, sizeof(src5));
 800183c:	2214      	movs	r2, #20
 800183e:	2100      	movs	r1, #0
 8001840:	4818      	ldr	r0, [pc, #96]	@ (80018a4 <ABL_Process+0x13c>)
 8001842:	f003 ff97 	bl	8005774 <memset>
		sprintf(src5, " Light = %d lux  ", Kanman_light);
 8001846:	4b0e      	ldr	r3, [pc, #56]	@ (8001880 <ABL_Process+0x118>)
 8001848:	881b      	ldrh	r3, [r3, #0]
 800184a:	461a      	mov	r2, r3
 800184c:	4916      	ldr	r1, [pc, #88]	@ (80018a8 <ABL_Process+0x140>)
 800184e:	4815      	ldr	r0, [pc, #84]	@ (80018a4 <ABL_Process+0x13c>)
 8001850:	f003 ff70 	bl	8005734 <siprintf>
		ucg_DrawString(&ucg, 0, 92, 0, src5);
 8001854:	4b13      	ldr	r3, [pc, #76]	@ (80018a4 <ABL_Process+0x13c>)
 8001856:	9300      	str	r3, [sp, #0]
 8001858:	2300      	movs	r3, #0
 800185a:	225c      	movs	r2, #92	@ 0x5c
 800185c:	2100      	movs	r1, #0
 800185e:	480a      	ldr	r0, [pc, #40]	@ (8001888 <ABL_Process+0x120>)
 8001860:	f002 fe12 	bl	8004488 <ucg_DrawString>
	}
	dwTimeInit = dwTimeCurrent;
 8001864:	4a03      	ldr	r2, [pc, #12]	@ (8001874 <ABL_Process+0x10c>)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6013      	str	r3, [r2, #0]
}
 800186a:	bf00      	nop
 800186c:	3708      	adds	r7, #8
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	200001c8 	.word	0x200001c8
 8001878:	200001cc 	.word	0x200001cc
 800187c:	200001c0 	.word	0x200001c0
 8001880:	200001c4 	.word	0x200001c4
 8001884:	080060bc 	.word	0x080060bc
 8001888:	20000094 	.word	0x20000094
 800188c:	2000017c 	.word	0x2000017c
 8001890:	200001bc 	.word	0x200001bc
 8001894:	08006098 	.word	0x08006098
 8001898:	20000190 	.word	0x20000190
 800189c:	200001bd 	.word	0x200001bd
 80018a0:	080060a8 	.word	0x080060a8
 80018a4:	200001a4 	.word	0x200001a4
 80018a8:	080060d0 	.word	0x080060d0

080018ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b086      	sub	sp, #24
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018b4:	4a14      	ldr	r2, [pc, #80]	@ (8001908 <_sbrk+0x5c>)
 80018b6:	4b15      	ldr	r3, [pc, #84]	@ (800190c <_sbrk+0x60>)
 80018b8:	1ad3      	subs	r3, r2, r3
 80018ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018c0:	4b13      	ldr	r3, [pc, #76]	@ (8001910 <_sbrk+0x64>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d102      	bne.n	80018ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018c8:	4b11      	ldr	r3, [pc, #68]	@ (8001910 <_sbrk+0x64>)
 80018ca:	4a12      	ldr	r2, [pc, #72]	@ (8001914 <_sbrk+0x68>)
 80018cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018ce:	4b10      	ldr	r3, [pc, #64]	@ (8001910 <_sbrk+0x64>)
 80018d0:	681a      	ldr	r2, [r3, #0]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	4413      	add	r3, r2
 80018d6:	693a      	ldr	r2, [r7, #16]
 80018d8:	429a      	cmp	r2, r3
 80018da:	d207      	bcs.n	80018ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018dc:	f003 ff52 	bl	8005784 <__errno>
 80018e0:	4603      	mov	r3, r0
 80018e2:	220c      	movs	r2, #12
 80018e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018e6:	f04f 33ff 	mov.w	r3, #4294967295
 80018ea:	e009      	b.n	8001900 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018ec:	4b08      	ldr	r3, [pc, #32]	@ (8001910 <_sbrk+0x64>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018f2:	4b07      	ldr	r3, [pc, #28]	@ (8001910 <_sbrk+0x64>)
 80018f4:	681a      	ldr	r2, [r3, #0]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	4413      	add	r3, r2
 80018fa:	4a05      	ldr	r2, [pc, #20]	@ (8001910 <_sbrk+0x64>)
 80018fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018fe:	68fb      	ldr	r3, [r7, #12]
}
 8001900:	4618      	mov	r0, r3
 8001902:	3718      	adds	r7, #24
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}
 8001908:	20018000 	.word	0x20018000
 800190c:	00000400 	.word	0x00000400
 8001910:	200001d0 	.word	0x200001d0
 8001914:	200014e0 	.word	0x200014e0

08001918 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001918:	480d      	ldr	r0, [pc, #52]	@ (8001950 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800191a:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 800191c:	f000 faf2 	bl	8001f04 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001920:	480c      	ldr	r0, [pc, #48]	@ (8001954 <LoopForever+0x6>)
  ldr r1, =_edata
 8001922:	490d      	ldr	r1, [pc, #52]	@ (8001958 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001924:	4a0d      	ldr	r2, [pc, #52]	@ (800195c <LoopForever+0xe>)
  movs r3, #0
 8001926:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001928:	e002      	b.n	8001930 <LoopCopyDataInit>

0800192a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800192a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800192c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800192e:	3304      	adds	r3, #4

08001930 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001930:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001932:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001934:	d3f9      	bcc.n	800192a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001936:	4a0a      	ldr	r2, [pc, #40]	@ (8001960 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001938:	4c0a      	ldr	r4, [pc, #40]	@ (8001964 <LoopForever+0x16>)
  movs r3, #0
 800193a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800193c:	e001      	b.n	8001942 <LoopFillZerobss>

0800193e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800193e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001940:	3204      	adds	r2, #4

08001942 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001942:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001944:	d3fb      	bcc.n	800193e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001946:	f003 ff23 	bl	8005790 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800194a:	f7ff f99d 	bl	8000c88 <main>

0800194e <LoopForever>:

LoopForever:
    b LoopForever
 800194e:	e7fe      	b.n	800194e <LoopForever>
  ldr   r0, =_estack
 8001950:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001954:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001958:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 800195c:	080069c0 	.word	0x080069c0
  ldr r2, =_sbss
 8001960:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001964:	200014e0 	.word	0x200014e0

08001968 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001968:	e7fe      	b.n	8001968 <ADC_IRQHandler>
	...

0800196c <KalmanFilterInit>:
*
*e_est: Ước tính Không chắc chắn
*- Có thể được bắt đầu với cùng một giá trị như e_mea vì bộ lọc kalman sẽ điều chỉnh giá trị của nó.
*q: Phương sai Quá trình - thường là một số nhỏ trong khoảng từ 0,001 đến 1. */
void KalmanFilterInit(float mea_e, float est_e, float q)
{
 800196c:	b480      	push	{r7}
 800196e:	b085      	sub	sp, #20
 8001970:	af00      	add	r7, sp, #0
 8001972:	ed87 0a03 	vstr	s0, [r7, #12]
 8001976:	edc7 0a02 	vstr	s1, [r7, #8]
 800197a:	ed87 1a01 	vstr	s2, [r7, #4]
  _err_measure=mea_e;
 800197e:	4a07      	ldr	r2, [pc, #28]	@ (800199c <KalmanFilterInit+0x30>)
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	6013      	str	r3, [r2, #0]
  _err_estimate=est_e;
 8001984:	4a06      	ldr	r2, [pc, #24]	@ (80019a0 <KalmanFilterInit+0x34>)
 8001986:	68bb      	ldr	r3, [r7, #8]
 8001988:	6013      	str	r3, [r2, #0]
  _q = q;
 800198a:	4a06      	ldr	r2, [pc, #24]	@ (80019a4 <KalmanFilterInit+0x38>)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6013      	str	r3, [r2, #0]
}
 8001990:	bf00      	nop
 8001992:	3714      	adds	r7, #20
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr
 800199c:	200001d4 	.word	0x200001d4
 80019a0:	200001d8 	.word	0x200001d8
 80019a4:	200001dc 	.word	0x200001dc

080019a8 <KalmanFilter_updateEstimate>:

float KalmanFilter_updateEstimate(float mea)
{
 80019a8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80019ac:	b082      	sub	sp, #8
 80019ae:	af00      	add	r7, sp, #0
 80019b0:	ed87 0a01 	vstr	s0, [r7, #4]
  _kalman_gain = _err_estimate/(_err_estimate + _err_measure);
 80019b4:	4b3d      	ldr	r3, [pc, #244]	@ (8001aac <KalmanFilter_updateEstimate+0x104>)
 80019b6:	edd3 6a00 	vldr	s13, [r3]
 80019ba:	4b3c      	ldr	r3, [pc, #240]	@ (8001aac <KalmanFilter_updateEstimate+0x104>)
 80019bc:	ed93 7a00 	vldr	s14, [r3]
 80019c0:	4b3b      	ldr	r3, [pc, #236]	@ (8001ab0 <KalmanFilter_updateEstimate+0x108>)
 80019c2:	edd3 7a00 	vldr	s15, [r3]
 80019c6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80019ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80019ce:	4b39      	ldr	r3, [pc, #228]	@ (8001ab4 <KalmanFilter_updateEstimate+0x10c>)
 80019d0:	edc3 7a00 	vstr	s15, [r3]
  _current_estimate = _last_estimate + _kalman_gain * (mea - _last_estimate);
 80019d4:	4b38      	ldr	r3, [pc, #224]	@ (8001ab8 <KalmanFilter_updateEstimate+0x110>)
 80019d6:	edd3 7a00 	vldr	s15, [r3]
 80019da:	ed97 7a01 	vldr	s14, [r7, #4]
 80019de:	ee37 7a67 	vsub.f32	s14, s14, s15
 80019e2:	4b34      	ldr	r3, [pc, #208]	@ (8001ab4 <KalmanFilter_updateEstimate+0x10c>)
 80019e4:	edd3 7a00 	vldr	s15, [r3]
 80019e8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019ec:	4b32      	ldr	r3, [pc, #200]	@ (8001ab8 <KalmanFilter_updateEstimate+0x110>)
 80019ee:	edd3 7a00 	vldr	s15, [r3]
 80019f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019f6:	4b31      	ldr	r3, [pc, #196]	@ (8001abc <KalmanFilter_updateEstimate+0x114>)
 80019f8:	edc3 7a00 	vstr	s15, [r3]
  _err_estimate =  (1.0 - _kalman_gain)*_err_estimate + fabs(_last_estimate-_current_estimate)*_q;
 80019fc:	4b2d      	ldr	r3, [pc, #180]	@ (8001ab4 <KalmanFilter_updateEstimate+0x10c>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4618      	mov	r0, r3
 8001a02:	f7fe fecb 	bl	800079c <__aeabi_f2d>
 8001a06:	4602      	mov	r2, r0
 8001a08:	460b      	mov	r3, r1
 8001a0a:	f04f 0000 	mov.w	r0, #0
 8001a0e:	492c      	ldr	r1, [pc, #176]	@ (8001ac0 <KalmanFilter_updateEstimate+0x118>)
 8001a10:	f7fe fd64 	bl	80004dc <__aeabi_dsub>
 8001a14:	4602      	mov	r2, r0
 8001a16:	460b      	mov	r3, r1
 8001a18:	4614      	mov	r4, r2
 8001a1a:	461d      	mov	r5, r3
 8001a1c:	4b23      	ldr	r3, [pc, #140]	@ (8001aac <KalmanFilter_updateEstimate+0x104>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4618      	mov	r0, r3
 8001a22:	f7fe febb 	bl	800079c <__aeabi_f2d>
 8001a26:	4602      	mov	r2, r0
 8001a28:	460b      	mov	r3, r1
 8001a2a:	4620      	mov	r0, r4
 8001a2c:	4629      	mov	r1, r5
 8001a2e:	f7fe fc27 	bl	8000280 <__aeabi_dmul>
 8001a32:	4602      	mov	r2, r0
 8001a34:	460b      	mov	r3, r1
 8001a36:	4690      	mov	r8, r2
 8001a38:	4699      	mov	r9, r3
 8001a3a:	4b1f      	ldr	r3, [pc, #124]	@ (8001ab8 <KalmanFilter_updateEstimate+0x110>)
 8001a3c:	ed93 7a00 	vldr	s14, [r3]
 8001a40:	4b1e      	ldr	r3, [pc, #120]	@ (8001abc <KalmanFilter_updateEstimate+0x114>)
 8001a42:	edd3 7a00 	vldr	s15, [r3]
 8001a46:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a4a:	eef0 7ae7 	vabs.f32	s15, s15
 8001a4e:	ee17 0a90 	vmov	r0, s15
 8001a52:	f7fe fea3 	bl	800079c <__aeabi_f2d>
 8001a56:	4604      	mov	r4, r0
 8001a58:	460d      	mov	r5, r1
 8001a5a:	4b1a      	ldr	r3, [pc, #104]	@ (8001ac4 <KalmanFilter_updateEstimate+0x11c>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f7fe fe9c 	bl	800079c <__aeabi_f2d>
 8001a64:	4602      	mov	r2, r0
 8001a66:	460b      	mov	r3, r1
 8001a68:	4620      	mov	r0, r4
 8001a6a:	4629      	mov	r1, r5
 8001a6c:	f7fe fc08 	bl	8000280 <__aeabi_dmul>
 8001a70:	4602      	mov	r2, r0
 8001a72:	460b      	mov	r3, r1
 8001a74:	4640      	mov	r0, r8
 8001a76:	4649      	mov	r1, r9
 8001a78:	f7fe fd32 	bl	80004e0 <__adddf3>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	460b      	mov	r3, r1
 8001a80:	4610      	mov	r0, r2
 8001a82:	4619      	mov	r1, r3
 8001a84:	f7fe fee2 	bl	800084c <__aeabi_d2f>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	4a08      	ldr	r2, [pc, #32]	@ (8001aac <KalmanFilter_updateEstimate+0x104>)
 8001a8c:	6013      	str	r3, [r2, #0]
  _last_estimate=_current_estimate;
 8001a8e:	4b0b      	ldr	r3, [pc, #44]	@ (8001abc <KalmanFilter_updateEstimate+0x114>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4a09      	ldr	r2, [pc, #36]	@ (8001ab8 <KalmanFilter_updateEstimate+0x110>)
 8001a94:	6013      	str	r3, [r2, #0]

  return _current_estimate;
 8001a96:	4b09      	ldr	r3, [pc, #36]	@ (8001abc <KalmanFilter_updateEstimate+0x114>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	ee07 3a90 	vmov	s15, r3
}
 8001a9e:	eeb0 0a67 	vmov.f32	s0, s15
 8001aa2:	3708      	adds	r7, #8
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001aaa:	bf00      	nop
 8001aac:	200001d8 	.word	0x200001d8
 8001ab0:	200001d4 	.word	0x200001d4
 8001ab4:	200001e8 	.word	0x200001e8
 8001ab8:	200001e4 	.word	0x200001e4
 8001abc:	200001e0 	.word	0x200001e0
 8001ac0:	3ff00000 	.word	0x3ff00000
 8001ac4:	200001dc 	.word	0x200001dc

08001ac8 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b087      	sub	sp, #28
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
 8001ad0:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	617b      	str	r3, [r7, #20]
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	613b      	str	r3, [r7, #16]
 8001ada:	2300      	movs	r3, #0
 8001adc:	60fb      	str	r3, [r7, #12]

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8001ade:	2300      	movs	r3, #0
 8001ae0:	617b      	str	r3, [r7, #20]
 8001ae2:	e076      	b.n	8001bd2 <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	697b      	ldr	r3, [r7, #20]
 8001ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aec:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	693a      	ldr	r2, [r7, #16]
 8001af4:	4013      	ands	r3, r2
 8001af6:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8001af8:	68fa      	ldr	r2, [r7, #12]
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d165      	bne.n	8001bcc <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681a      	ldr	r2, [r3, #0]
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	005b      	lsls	r3, r3, #1
 8001b08:	2103      	movs	r1, #3
 8001b0a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b0e:	43db      	mvns	r3, r3
 8001b10:	401a      	ands	r2, r3
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	791b      	ldrb	r3, [r3, #4]
 8001b1e:	4619      	mov	r1, r3
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	005b      	lsls	r3, r3, #1
 8001b24:	fa01 f303 	lsl.w	r3, r1, r3
 8001b28:	431a      	orrs	r2, r3
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	791b      	ldrb	r3, [r3, #4]
 8001b32:	2b01      	cmp	r3, #1
 8001b34:	d003      	beq.n	8001b3e <GPIO_Init+0x76>
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	791b      	ldrb	r3, [r3, #4]
 8001b3a:	2b02      	cmp	r3, #2
 8001b3c:	d12e      	bne.n	8001b9c <GPIO_Init+0xd4>
      {
        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	689a      	ldr	r2, [r3, #8]
 8001b42:	697b      	ldr	r3, [r7, #20]
 8001b44:	005b      	lsls	r3, r3, #1
 8001b46:	2103      	movs	r1, #3
 8001b48:	fa01 f303 	lsl.w	r3, r1, r3
 8001b4c:	43db      	mvns	r3, r3
 8001b4e:	401a      	ands	r2, r3
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	689a      	ldr	r2, [r3, #8]
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	795b      	ldrb	r3, [r3, #5]
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	005b      	lsls	r3, r3, #1
 8001b62:	fa01 f303 	lsl.w	r3, r1, r3
 8001b66:	431a      	orrs	r2, r3
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	609a      	str	r2, [r3, #8]

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	685a      	ldr	r2, [r3, #4]
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	b29b      	uxth	r3, r3
 8001b74:	4619      	mov	r1, r3
 8001b76:	2301      	movs	r3, #1
 8001b78:	408b      	lsls	r3, r1
 8001b7a:	43db      	mvns	r3, r3
 8001b7c:	401a      	ands	r2, r3
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	683a      	ldr	r2, [r7, #0]
 8001b88:	7992      	ldrb	r2, [r2, #6]
 8001b8a:	4611      	mov	r1, r2
 8001b8c:	697a      	ldr	r2, [r7, #20]
 8001b8e:	b292      	uxth	r2, r2
 8001b90:	fa01 f202 	lsl.w	r2, r1, r2
 8001b94:	b292      	uxth	r2, r2
 8001b96:	431a      	orrs	r2, r3
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	68da      	ldr	r2, [r3, #12]
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	b29b      	uxth	r3, r3
 8001ba4:	005b      	lsls	r3, r3, #1
 8001ba6:	2103      	movs	r1, #3
 8001ba8:	fa01 f303 	lsl.w	r3, r1, r3
 8001bac:	43db      	mvns	r3, r3
 8001bae:	401a      	ands	r2, r3
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	68da      	ldr	r2, [r3, #12]
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	79db      	ldrb	r3, [r3, #7]
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	005b      	lsls	r3, r3, #1
 8001bc2:	fa01 f303 	lsl.w	r3, r1, r3
 8001bc6:	431a      	orrs	r2, r3
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	3301      	adds	r3, #1
 8001bd0:	617b      	str	r3, [r7, #20]
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	2b0f      	cmp	r3, #15
 8001bd6:	d985      	bls.n	8001ae4 <GPIO_Init+0x1c>
    }
  }
}
 8001bd8:	bf00      	nop
 8001bda:	bf00      	nop
 8001bdc:	371c      	adds	r7, #28
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr

08001be6 <GPIO_WriteBit>:
  *            @arg Bit_RESET: to clear the port pin
  *            @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
 8001be6:	b480      	push	{r7}
 8001be8:	b083      	sub	sp, #12
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	6078      	str	r0, [r7, #4]
 8001bee:	460b      	mov	r3, r1
 8001bf0:	807b      	strh	r3, [r7, #2]
 8001bf2:	4613      	mov	r3, r2
 8001bf4:	707b      	strb	r3, [r7, #1]
  if (BitVal != Bit_RESET)
 8001bf6:	787b      	ldrb	r3, [r7, #1]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d003      	beq.n	8001c04 <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRRL = GPIO_Pin;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	887a      	ldrh	r2, [r7, #2]
 8001c00:	831a      	strh	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
  }
}
 8001c02:	e002      	b.n	8001c0a <GPIO_WriteBit+0x24>
    GPIOx->BSRRH = GPIO_Pin ;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	887a      	ldrh	r2, [r7, #2]
 8001c08:	835a      	strh	r2, [r3, #26]
}
 8001c0a:	bf00      	nop
 8001c0c:	370c      	adds	r7, #12
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr

08001c16 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_LTDC: Connect LTDC pins to AF14 for STM32F429xx/439xx devices.
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8001c16:	b480      	push	{r7}
 8001c18:	b085      	sub	sp, #20
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	6078      	str	r0, [r7, #4]
 8001c1e:	460b      	mov	r3, r1
 8001c20:	807b      	strh	r3, [r7, #2]
 8001c22:	4613      	mov	r3, r2
 8001c24:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 8001c26:	2300      	movs	r3, #0
 8001c28:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	60bb      	str	r3, [r7, #8]

  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8001c2e:	787a      	ldrb	r2, [r7, #1]
 8001c30:	887b      	ldrh	r3, [r7, #2]
 8001c32:	f003 0307 	and.w	r3, r3, #7
 8001c36:	009b      	lsls	r3, r3, #2
 8001c38:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3c:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8001c3e:	887b      	ldrh	r3, [r7, #2]
 8001c40:	08db      	lsrs	r3, r3, #3
 8001c42:	b29b      	uxth	r3, r3
 8001c44:	461a      	mov	r2, r3
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	3208      	adds	r2, #8
 8001c4a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001c4e:	887b      	ldrh	r3, [r7, #2]
 8001c50:	f003 0307 	and.w	r3, r3, #7
 8001c54:	009b      	lsls	r3, r3, #2
 8001c56:	210f      	movs	r1, #15
 8001c58:	fa01 f303 	lsl.w	r3, r1, r3
 8001c5c:	43db      	mvns	r3, r3
 8001c5e:	8879      	ldrh	r1, [r7, #2]
 8001c60:	08c9      	lsrs	r1, r1, #3
 8001c62:	b289      	uxth	r1, r1
 8001c64:	4608      	mov	r0, r1
 8001c66:	ea02 0103 	and.w	r1, r2, r3
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	f100 0208 	add.w	r2, r0, #8
 8001c70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8001c74:	887b      	ldrh	r3, [r7, #2]
 8001c76:	08db      	lsrs	r3, r3, #3
 8001c78:	b29b      	uxth	r3, r3
 8001c7a:	461a      	mov	r2, r3
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	3208      	adds	r2, #8
 8001c80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c84:	68fa      	ldr	r2, [r7, #12]
 8001c86:	4313      	orrs	r3, r2
 8001c88:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8001c8a:	887b      	ldrh	r3, [r7, #2]
 8001c8c:	08db      	lsrs	r3, r3, #3
 8001c8e:	b29b      	uxth	r3, r3
 8001c90:	461a      	mov	r2, r3
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	3208      	adds	r2, #8
 8001c96:	68b9      	ldr	r1, [r7, #8]
 8001c98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8001c9c:	bf00      	nop
 8001c9e:	3714      	adds	r7, #20
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr

08001ca8 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b089      	sub	sp, #36	@ 0x24
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	61bb      	str	r3, [r7, #24]
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	617b      	str	r3, [r7, #20]
 8001cb8:	2300      	movs	r3, #0
 8001cba:	61fb      	str	r3, [r7, #28]
 8001cbc:	2302      	movs	r3, #2
 8001cbe:	613b      	str	r3, [r7, #16]
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	60fb      	str	r3, [r7, #12]
 8001cc4:	2302      	movs	r3, #2
 8001cc6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8001cc8:	4b4a      	ldr	r3, [pc, #296]	@ (8001df4 <RCC_GetClocksFreq+0x14c>)
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	f003 030c 	and.w	r3, r3, #12
 8001cd0:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 8001cd2:	69bb      	ldr	r3, [r7, #24]
 8001cd4:	2b08      	cmp	r3, #8
 8001cd6:	d011      	beq.n	8001cfc <RCC_GetClocksFreq+0x54>
 8001cd8:	69bb      	ldr	r3, [r7, #24]
 8001cda:	2b08      	cmp	r3, #8
 8001cdc:	d844      	bhi.n	8001d68 <RCC_GetClocksFreq+0xc0>
 8001cde:	69bb      	ldr	r3, [r7, #24]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d003      	beq.n	8001cec <RCC_GetClocksFreq+0x44>
 8001ce4:	69bb      	ldr	r3, [r7, #24]
 8001ce6:	2b04      	cmp	r3, #4
 8001ce8:	d004      	beq.n	8001cf4 <RCC_GetClocksFreq+0x4c>
 8001cea:	e03d      	b.n	8001d68 <RCC_GetClocksFreq+0xc0>
  {
  case 0x00:  /* HSI used as system clock source */
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	4a42      	ldr	r2, [pc, #264]	@ (8001df8 <RCC_GetClocksFreq+0x150>)
 8001cf0:	601a      	str	r2, [r3, #0]
    break;
 8001cf2:	e03d      	b.n	8001d70 <RCC_GetClocksFreq+0xc8>
  case 0x04:  /* HSE used as system clock  source */
    RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	4a41      	ldr	r2, [pc, #260]	@ (8001dfc <RCC_GetClocksFreq+0x154>)
 8001cf8:	601a      	str	r2, [r3, #0]
    break;
 8001cfa:	e039      	b.n	8001d70 <RCC_GetClocksFreq+0xc8>
  case 0x08:  /* PLL P used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLP
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8001cfc:	4b3d      	ldr	r3, [pc, #244]	@ (8001df4 <RCC_GetClocksFreq+0x14c>)
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	0d9b      	lsrs	r3, r3, #22
 8001d02:	f003 0301 	and.w	r3, r3, #1
 8001d06:	60fb      	str	r3, [r7, #12]
    pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d08:	4b3a      	ldr	r3, [pc, #232]	@ (8001df4 <RCC_GetClocksFreq+0x14c>)
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001d10:	60bb      	str	r3, [r7, #8]

    if (pllsource != 0)
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d00c      	beq.n	8001d32 <RCC_GetClocksFreq+0x8a>
    {
      /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8001d18:	4a38      	ldr	r2, [pc, #224]	@ (8001dfc <RCC_GetClocksFreq+0x154>)
 8001d1a:	68bb      	ldr	r3, [r7, #8]
 8001d1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d20:	4a34      	ldr	r2, [pc, #208]	@ (8001df4 <RCC_GetClocksFreq+0x14c>)
 8001d22:	6852      	ldr	r2, [r2, #4]
 8001d24:	0992      	lsrs	r2, r2, #6
 8001d26:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001d2a:	fb02 f303 	mul.w	r3, r2, r3
 8001d2e:	61fb      	str	r3, [r7, #28]
 8001d30:	e00b      	b.n	8001d4a <RCC_GetClocksFreq+0xa2>
    }
    else
    {
      /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8001d32:	4a31      	ldr	r2, [pc, #196]	@ (8001df8 <RCC_GetClocksFreq+0x150>)
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d3a:	4a2e      	ldr	r2, [pc, #184]	@ (8001df4 <RCC_GetClocksFreq+0x14c>)
 8001d3c:	6852      	ldr	r2, [r2, #4]
 8001d3e:	0992      	lsrs	r2, r2, #6
 8001d40:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001d44:	fb02 f303 	mul.w	r3, r2, r3
 8001d48:	61fb      	str	r3, [r7, #28]
    }

    pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8001d4a:	4b2a      	ldr	r3, [pc, #168]	@ (8001df4 <RCC_GetClocksFreq+0x14c>)
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	0c1b      	lsrs	r3, r3, #16
 8001d50:	f003 0303 	and.w	r3, r3, #3
 8001d54:	3301      	adds	r3, #1
 8001d56:	005b      	lsls	r3, r3, #1
 8001d58:	613b      	str	r3, [r7, #16]
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 8001d5a:	69fa      	ldr	r2, [r7, #28]
 8001d5c:	693b      	ldr	r3, [r7, #16]
 8001d5e:	fbb2 f2f3 	udiv	r2, r2, r3
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	601a      	str	r2, [r3, #0]
    break;
 8001d66:	e003      	b.n	8001d70 <RCC_GetClocksFreq+0xc8>
  default:
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	4a23      	ldr	r2, [pc, #140]	@ (8001df8 <RCC_GetClocksFreq+0x150>)
 8001d6c:	601a      	str	r2, [r3, #0]
    break;
 8001d6e:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8001d70:	4b20      	ldr	r3, [pc, #128]	@ (8001df4 <RCC_GetClocksFreq+0x14c>)
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001d78:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 8001d7a:	69bb      	ldr	r3, [r7, #24]
 8001d7c:	091b      	lsrs	r3, r3, #4
 8001d7e:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8001d80:	4a1f      	ldr	r2, [pc, #124]	@ (8001e00 <RCC_GetClocksFreq+0x158>)
 8001d82:	69bb      	ldr	r3, [r7, #24]
 8001d84:	4413      	add	r3, r2
 8001d86:	781b      	ldrb	r3, [r3, #0]
 8001d88:	b2db      	uxtb	r3, r3
 8001d8a:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681a      	ldr	r2, [r3, #0]
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	40da      	lsrs	r2, r3
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8001d98:	4b16      	ldr	r3, [pc, #88]	@ (8001df4 <RCC_GetClocksFreq+0x14c>)
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8001da0:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 8001da2:	69bb      	ldr	r3, [r7, #24]
 8001da4:	0a9b      	lsrs	r3, r3, #10
 8001da6:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8001da8:	4a15      	ldr	r2, [pc, #84]	@ (8001e00 <RCC_GetClocksFreq+0x158>)
 8001daa:	69bb      	ldr	r3, [r7, #24]
 8001dac:	4413      	add	r3, r2
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	b2db      	uxtb	r3, r3
 8001db2:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	685a      	ldr	r2, [r3, #4]
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	40da      	lsrs	r2, r3
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8001dc0:	4b0c      	ldr	r3, [pc, #48]	@ (8001df4 <RCC_GetClocksFreq+0x14c>)
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8001dc8:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 8001dca:	69bb      	ldr	r3, [r7, #24]
 8001dcc:	0b5b      	lsrs	r3, r3, #13
 8001dce:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8001dd0:	4a0b      	ldr	r2, [pc, #44]	@ (8001e00 <RCC_GetClocksFreq+0x158>)
 8001dd2:	69bb      	ldr	r3, [r7, #24]
 8001dd4:	4413      	add	r3, r2
 8001dd6:	781b      	ldrb	r3, [r3, #0]
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	685a      	ldr	r2, [r3, #4]
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	40da      	lsrs	r2, r3
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	60da      	str	r2, [r3, #12]
}
 8001de8:	bf00      	nop
 8001dea:	3724      	adds	r7, #36	@ 0x24
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr
 8001df4:	40023800 	.word	0x40023800
 8001df8:	00f42400 	.word	0x00f42400
 8001dfc:	017d7840 	.word	0x017d7840
 8001e00:	20000000 	.word	0x20000000

08001e04 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b083      	sub	sp, #12
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
 8001e0c:	460b      	mov	r3, r1
 8001e0e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001e10:	78fb      	ldrb	r3, [r7, #3]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d006      	beq.n	8001e24 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8001e16:	4b0a      	ldr	r3, [pc, #40]	@ (8001e40 <RCC_AHB1PeriphClockCmd+0x3c>)
 8001e18:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001e1a:	4909      	ldr	r1, [pc, #36]	@ (8001e40 <RCC_AHB1PeriphClockCmd+0x3c>)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	630b      	str	r3, [r1, #48]	@ 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 8001e22:	e006      	b.n	8001e32 <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8001e24:	4b06      	ldr	r3, [pc, #24]	@ (8001e40 <RCC_AHB1PeriphClockCmd+0x3c>)
 8001e26:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	43db      	mvns	r3, r3
 8001e2c:	4904      	ldr	r1, [pc, #16]	@ (8001e40 <RCC_AHB1PeriphClockCmd+0x3c>)
 8001e2e:	4013      	ands	r3, r2
 8001e30:	630b      	str	r3, [r1, #48]	@ 0x30
}
 8001e32:	bf00      	nop
 8001e34:	370c      	adds	r7, #12
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr
 8001e3e:	bf00      	nop
 8001e40:	40023800 	.word	0x40023800

08001e44 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b083      	sub	sp, #12
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
 8001e4c:	460b      	mov	r3, r1
 8001e4e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001e50:	78fb      	ldrb	r3, [r7, #3]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d006      	beq.n	8001e64 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8001e56:	4b0a      	ldr	r3, [pc, #40]	@ (8001e80 <RCC_APB1PeriphClockCmd+0x3c>)
 8001e58:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001e5a:	4909      	ldr	r1, [pc, #36]	@ (8001e80 <RCC_APB1PeriphClockCmd+0x3c>)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	640b      	str	r3, [r1, #64]	@ 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 8001e62:	e006      	b.n	8001e72 <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8001e64:	4b06      	ldr	r3, [pc, #24]	@ (8001e80 <RCC_APB1PeriphClockCmd+0x3c>)
 8001e66:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	43db      	mvns	r3, r3
 8001e6c:	4904      	ldr	r1, [pc, #16]	@ (8001e80 <RCC_APB1PeriphClockCmd+0x3c>)
 8001e6e:	4013      	ands	r3, r2
 8001e70:	640b      	str	r3, [r1, #64]	@ 0x40
}
 8001e72:	bf00      	nop
 8001e74:	370c      	adds	r7, #12
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr
 8001e7e:	bf00      	nop
 8001e80:	40023800 	.word	0x40023800

08001e84 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b083      	sub	sp, #12
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
 8001e8c:	460b      	mov	r3, r1
 8001e8e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001e90:	78fb      	ldrb	r3, [r7, #3]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d006      	beq.n	8001ea4 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8001e96:	4b0a      	ldr	r3, [pc, #40]	@ (8001ec0 <RCC_APB2PeriphClockCmd+0x3c>)
 8001e98:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001e9a:	4909      	ldr	r1, [pc, #36]	@ (8001ec0 <RCC_APB2PeriphClockCmd+0x3c>)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	644b      	str	r3, [r1, #68]	@ 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8001ea2:	e006      	b.n	8001eb2 <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8001ea4:	4b06      	ldr	r3, [pc, #24]	@ (8001ec0 <RCC_APB2PeriphClockCmd+0x3c>)
 8001ea6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	43db      	mvns	r3, r3
 8001eac:	4904      	ldr	r1, [pc, #16]	@ (8001ec0 <RCC_APB2PeriphClockCmd+0x3c>)
 8001eae:	4013      	ands	r3, r2
 8001eb0:	644b      	str	r3, [r1, #68]	@ 0x44
}
 8001eb2:	bf00      	nop
 8001eb4:	370c      	adds	r7, #12
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr
 8001ebe:	bf00      	nop
 8001ec0:	40023800 	.word	0x40023800

08001ec4 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b083      	sub	sp, #12
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
 8001ecc:	460b      	mov	r3, r1
 8001ece:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001ed0:	78fb      	ldrb	r3, [r7, #3]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d006      	beq.n	8001ee4 <RCC_APB2PeriphResetCmd+0x20>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8001ed6:	4b0a      	ldr	r3, [pc, #40]	@ (8001f00 <RCC_APB2PeriphResetCmd+0x3c>)
 8001ed8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001eda:	4909      	ldr	r1, [pc, #36]	@ (8001f00 <RCC_APB2PeriphResetCmd+0x3c>)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	624b      	str	r3, [r1, #36]	@ 0x24
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
  }
}
 8001ee2:	e006      	b.n	8001ef2 <RCC_APB2PeriphResetCmd+0x2e>
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 8001ee4:	4b06      	ldr	r3, [pc, #24]	@ (8001f00 <RCC_APB2PeriphResetCmd+0x3c>)
 8001ee6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	43db      	mvns	r3, r3
 8001eec:	4904      	ldr	r1, [pc, #16]	@ (8001f00 <RCC_APB2PeriphResetCmd+0x3c>)
 8001eee:	4013      	ands	r3, r2
 8001ef0:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8001ef2:	bf00      	nop
 8001ef4:	370c      	adds	r7, #12
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efc:	4770      	bx	lr
 8001efe:	bf00      	nop
 8001f00:	40023800 	.word	0x40023800

08001f04 <SystemInit>:
 8001f04:	b580      	push	{r7, lr}
 8001f06:	af00      	add	r7, sp, #0
 8001f08:	4b16      	ldr	r3, [pc, #88]	@ (8001f64 <SystemInit+0x60>)
 8001f0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f0e:	4a15      	ldr	r2, [pc, #84]	@ (8001f64 <SystemInit+0x60>)
 8001f10:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001f14:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8001f18:	4b13      	ldr	r3, [pc, #76]	@ (8001f68 <SystemInit+0x64>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a12      	ldr	r2, [pc, #72]	@ (8001f68 <SystemInit+0x64>)
 8001f1e:	f043 0301 	orr.w	r3, r3, #1
 8001f22:	6013      	str	r3, [r2, #0]
 8001f24:	4b10      	ldr	r3, [pc, #64]	@ (8001f68 <SystemInit+0x64>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	609a      	str	r2, [r3, #8]
 8001f2a:	4b0f      	ldr	r3, [pc, #60]	@ (8001f68 <SystemInit+0x64>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a0e      	ldr	r2, [pc, #56]	@ (8001f68 <SystemInit+0x64>)
 8001f30:	f023 7384 	bic.w	r3, r3, #17301504	@ 0x1080000
 8001f34:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f38:	6013      	str	r3, [r2, #0]
 8001f3a:	4b0b      	ldr	r3, [pc, #44]	@ (8001f68 <SystemInit+0x64>)
 8001f3c:	4a0b      	ldr	r2, [pc, #44]	@ (8001f6c <SystemInit+0x68>)
 8001f3e:	605a      	str	r2, [r3, #4]
 8001f40:	4b09      	ldr	r3, [pc, #36]	@ (8001f68 <SystemInit+0x64>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a08      	ldr	r2, [pc, #32]	@ (8001f68 <SystemInit+0x64>)
 8001f46:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f4a:	6013      	str	r3, [r2, #0]
 8001f4c:	4b06      	ldr	r3, [pc, #24]	@ (8001f68 <SystemInit+0x64>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	60da      	str	r2, [r3, #12]
 8001f52:	f000 f889 	bl	8002068 <SetSysClock>
 8001f56:	4b03      	ldr	r3, [pc, #12]	@ (8001f64 <SystemInit+0x60>)
 8001f58:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001f5c:	609a      	str	r2, [r3, #8]
 8001f5e:	bf00      	nop
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	e000ed00 	.word	0xe000ed00
 8001f68:	40023800 	.word	0x40023800
 8001f6c:	24003010 	.word	0x24003010

08001f70 <SystemCoreClockUpdate>:
 8001f70:	b480      	push	{r7}
 8001f72:	b087      	sub	sp, #28
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	2300      	movs	r3, #0
 8001f78:	613b      	str	r3, [r7, #16]
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	617b      	str	r3, [r7, #20]
 8001f7e:	2302      	movs	r3, #2
 8001f80:	60fb      	str	r3, [r7, #12]
 8001f82:	2300      	movs	r3, #0
 8001f84:	60bb      	str	r3, [r7, #8]
 8001f86:	2302      	movs	r3, #2
 8001f88:	607b      	str	r3, [r7, #4]
 8001f8a:	4b32      	ldr	r3, [pc, #200]	@ (8002054 <SystemCoreClockUpdate+0xe4>)
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	f003 030c 	and.w	r3, r3, #12
 8001f92:	613b      	str	r3, [r7, #16]
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	2b04      	cmp	r3, #4
 8001f98:	d007      	beq.n	8001faa <SystemCoreClockUpdate+0x3a>
 8001f9a:	2b08      	cmp	r3, #8
 8001f9c:	d009      	beq.n	8001fb2 <SystemCoreClockUpdate+0x42>
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d13d      	bne.n	800201e <SystemCoreClockUpdate+0xae>
 8001fa2:	4b2d      	ldr	r3, [pc, #180]	@ (8002058 <SystemCoreClockUpdate+0xe8>)
 8001fa4:	4a2d      	ldr	r2, [pc, #180]	@ (800205c <SystemCoreClockUpdate+0xec>)
 8001fa6:	601a      	str	r2, [r3, #0]
 8001fa8:	e03d      	b.n	8002026 <SystemCoreClockUpdate+0xb6>
 8001faa:	4b2b      	ldr	r3, [pc, #172]	@ (8002058 <SystemCoreClockUpdate+0xe8>)
 8001fac:	4a2c      	ldr	r2, [pc, #176]	@ (8002060 <SystemCoreClockUpdate+0xf0>)
 8001fae:	601a      	str	r2, [r3, #0]
 8001fb0:	e039      	b.n	8002026 <SystemCoreClockUpdate+0xb6>
 8001fb2:	4b28      	ldr	r3, [pc, #160]	@ (8002054 <SystemCoreClockUpdate+0xe4>)
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	0d9b      	lsrs	r3, r3, #22
 8001fb8:	f003 0301 	and.w	r3, r3, #1
 8001fbc:	60bb      	str	r3, [r7, #8]
 8001fbe:	4b25      	ldr	r3, [pc, #148]	@ (8002054 <SystemCoreClockUpdate+0xe4>)
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001fc6:	607b      	str	r3, [r7, #4]
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d00c      	beq.n	8001fe8 <SystemCoreClockUpdate+0x78>
 8001fce:	4a24      	ldr	r2, [pc, #144]	@ (8002060 <SystemCoreClockUpdate+0xf0>)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fd6:	4a1f      	ldr	r2, [pc, #124]	@ (8002054 <SystemCoreClockUpdate+0xe4>)
 8001fd8:	6852      	ldr	r2, [r2, #4]
 8001fda:	0992      	lsrs	r2, r2, #6
 8001fdc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001fe0:	fb02 f303 	mul.w	r3, r2, r3
 8001fe4:	617b      	str	r3, [r7, #20]
 8001fe6:	e00b      	b.n	8002000 <SystemCoreClockUpdate+0x90>
 8001fe8:	4a1c      	ldr	r2, [pc, #112]	@ (800205c <SystemCoreClockUpdate+0xec>)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ff0:	4a18      	ldr	r2, [pc, #96]	@ (8002054 <SystemCoreClockUpdate+0xe4>)
 8001ff2:	6852      	ldr	r2, [r2, #4]
 8001ff4:	0992      	lsrs	r2, r2, #6
 8001ff6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001ffa:	fb02 f303 	mul.w	r3, r2, r3
 8001ffe:	617b      	str	r3, [r7, #20]
 8002000:	4b14      	ldr	r3, [pc, #80]	@ (8002054 <SystemCoreClockUpdate+0xe4>)
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	0c1b      	lsrs	r3, r3, #16
 8002006:	f003 0303 	and.w	r3, r3, #3
 800200a:	3301      	adds	r3, #1
 800200c:	005b      	lsls	r3, r3, #1
 800200e:	60fb      	str	r3, [r7, #12]
 8002010:	697a      	ldr	r2, [r7, #20]
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	fbb2 f3f3 	udiv	r3, r2, r3
 8002018:	4a0f      	ldr	r2, [pc, #60]	@ (8002058 <SystemCoreClockUpdate+0xe8>)
 800201a:	6013      	str	r3, [r2, #0]
 800201c:	e003      	b.n	8002026 <SystemCoreClockUpdate+0xb6>
 800201e:	4b0e      	ldr	r3, [pc, #56]	@ (8002058 <SystemCoreClockUpdate+0xe8>)
 8002020:	4a0e      	ldr	r2, [pc, #56]	@ (800205c <SystemCoreClockUpdate+0xec>)
 8002022:	601a      	str	r2, [r3, #0]
 8002024:	bf00      	nop
 8002026:	4b0b      	ldr	r3, [pc, #44]	@ (8002054 <SystemCoreClockUpdate+0xe4>)
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	091b      	lsrs	r3, r3, #4
 800202c:	f003 030f 	and.w	r3, r3, #15
 8002030:	4a0c      	ldr	r2, [pc, #48]	@ (8002064 <SystemCoreClockUpdate+0xf4>)
 8002032:	5cd3      	ldrb	r3, [r2, r3]
 8002034:	b2db      	uxtb	r3, r3
 8002036:	613b      	str	r3, [r7, #16]
 8002038:	4b07      	ldr	r3, [pc, #28]	@ (8002058 <SystemCoreClockUpdate+0xe8>)
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	693b      	ldr	r3, [r7, #16]
 800203e:	fa22 f303 	lsr.w	r3, r2, r3
 8002042:	4a05      	ldr	r2, [pc, #20]	@ (8002058 <SystemCoreClockUpdate+0xe8>)
 8002044:	6013      	str	r3, [r2, #0]
 8002046:	bf00      	nop
 8002048:	371c      	adds	r7, #28
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr
 8002052:	bf00      	nop
 8002054:	40023800 	.word	0x40023800
 8002058:	20000010 	.word	0x20000010
 800205c:	00f42400 	.word	0x00f42400
 8002060:	017d7840 	.word	0x017d7840
 8002064:	20000014 	.word	0x20000014

08002068 <SetSysClock>:
 8002068:	b480      	push	{r7}
 800206a:	af00      	add	r7, sp, #0
 800206c:	4b22      	ldr	r3, [pc, #136]	@ (80020f8 <SetSysClock+0x90>)
 800206e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002070:	4a21      	ldr	r2, [pc, #132]	@ (80020f8 <SetSysClock+0x90>)
 8002072:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002076:	6413      	str	r3, [r2, #64]	@ 0x40
 8002078:	4b20      	ldr	r3, [pc, #128]	@ (80020fc <SetSysClock+0x94>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a1f      	ldr	r2, [pc, #124]	@ (80020fc <SetSysClock+0x94>)
 800207e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002082:	6013      	str	r3, [r2, #0]
 8002084:	4b1c      	ldr	r3, [pc, #112]	@ (80020f8 <SetSysClock+0x90>)
 8002086:	4a1c      	ldr	r2, [pc, #112]	@ (80020f8 <SetSysClock+0x90>)
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	6093      	str	r3, [r2, #8]
 800208c:	4b1a      	ldr	r3, [pc, #104]	@ (80020f8 <SetSysClock+0x90>)
 800208e:	4a1a      	ldr	r2, [pc, #104]	@ (80020f8 <SetSysClock+0x90>)
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	6093      	str	r3, [r2, #8]
 8002094:	4b18      	ldr	r3, [pc, #96]	@ (80020f8 <SetSysClock+0x90>)
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	4a17      	ldr	r2, [pc, #92]	@ (80020f8 <SetSysClock+0x90>)
 800209a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800209e:	6093      	str	r3, [r2, #8]
 80020a0:	4b15      	ldr	r3, [pc, #84]	@ (80020f8 <SetSysClock+0x90>)
 80020a2:	4a17      	ldr	r2, [pc, #92]	@ (8002100 <SetSysClock+0x98>)
 80020a4:	605a      	str	r2, [r3, #4]
 80020a6:	4b14      	ldr	r3, [pc, #80]	@ (80020f8 <SetSysClock+0x90>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a13      	ldr	r2, [pc, #76]	@ (80020f8 <SetSysClock+0x90>)
 80020ac:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80020b0:	6013      	str	r3, [r2, #0]
 80020b2:	bf00      	nop
 80020b4:	4b10      	ldr	r3, [pc, #64]	@ (80020f8 <SetSysClock+0x90>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d0f9      	beq.n	80020b4 <SetSysClock+0x4c>
 80020c0:	4b10      	ldr	r3, [pc, #64]	@ (8002104 <SetSysClock+0x9c>)
 80020c2:	f240 6202 	movw	r2, #1538	@ 0x602
 80020c6:	601a      	str	r2, [r3, #0]
 80020c8:	4b0b      	ldr	r3, [pc, #44]	@ (80020f8 <SetSysClock+0x90>)
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	4a0a      	ldr	r2, [pc, #40]	@ (80020f8 <SetSysClock+0x90>)
 80020ce:	f023 0303 	bic.w	r3, r3, #3
 80020d2:	6093      	str	r3, [r2, #8]
 80020d4:	4b08      	ldr	r3, [pc, #32]	@ (80020f8 <SetSysClock+0x90>)
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	4a07      	ldr	r2, [pc, #28]	@ (80020f8 <SetSysClock+0x90>)
 80020da:	f043 0302 	orr.w	r3, r3, #2
 80020de:	6093      	str	r3, [r2, #8]
 80020e0:	bf00      	nop
 80020e2:	4b05      	ldr	r3, [pc, #20]	@ (80020f8 <SetSysClock+0x90>)
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	f003 030c 	and.w	r3, r3, #12
 80020ea:	2b08      	cmp	r3, #8
 80020ec:	d1f9      	bne.n	80020e2 <SetSysClock+0x7a>
 80020ee:	bf00      	nop
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr
 80020f8:	40023800 	.word	0x40023800
 80020fc:	40007000 	.word	0x40007000
 8002100:	08015410 	.word	0x08015410
 8002104:	40023c00 	.word	0x40023c00

08002108 <ADC_DeInit>:
 8002108:	b580      	push	{r7, lr}
 800210a:	af00      	add	r7, sp, #0
 800210c:	2101      	movs	r1, #1
 800210e:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8002112:	f7ff fed7 	bl	8001ec4 <RCC_APB2PeriphResetCmd>
 8002116:	2100      	movs	r1, #0
 8002118:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800211c:	f7ff fed2 	bl	8001ec4 <RCC_APB2PeriphResetCmd>
 8002120:	bf00      	nop
 8002122:	bd80      	pop	{r7, pc}

08002124 <ADC_Init>:
 8002124:	b480      	push	{r7}
 8002126:	b085      	sub	sp, #20
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
 800212c:	6039      	str	r1, [r7, #0]
 800212e:	2300      	movs	r3, #0
 8002130:	60fb      	str	r3, [r7, #12]
 8002132:	2300      	movs	r3, #0
 8002134:	72fb      	strb	r3, [r7, #11]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	60fb      	str	r3, [r7, #12]
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
 8002142:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002146:	60fb      	str	r3, [r7, #12]
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	791b      	ldrb	r3, [r3, #4]
 800214c:	021a      	lsls	r2, r3, #8
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4313      	orrs	r3, r2
 8002154:	68fa      	ldr	r2, [r7, #12]
 8002156:	4313      	orrs	r3, r2
 8002158:	60fb      	str	r3, [r7, #12]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	68fa      	ldr	r2, [r7, #12]
 800215e:	605a      	str	r2, [r3, #4]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	60fb      	str	r3, [r7, #12]
 8002166:	68fa      	ldr	r2, [r7, #12]
 8002168:	4b18      	ldr	r3, [pc, #96]	@ (80021cc <ADC_Init+0xa8>)
 800216a:	4013      	ands	r3, r2
 800216c:	60fb      	str	r3, [r7, #12]
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	691a      	ldr	r2, [r3, #16]
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	68db      	ldr	r3, [r3, #12]
 8002176:	431a      	orrs	r2, r3
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	431a      	orrs	r2, r3
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	795b      	ldrb	r3, [r3, #5]
 8002182:	005b      	lsls	r3, r3, #1
 8002184:	4313      	orrs	r3, r2
 8002186:	68fa      	ldr	r2, [r7, #12]
 8002188:	4313      	orrs	r3, r2
 800218a:	60fb      	str	r3, [r7, #12]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	68fa      	ldr	r2, [r7, #12]
 8002190:	609a      	str	r2, [r3, #8]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002196:	60fb      	str	r3, [r7, #12]
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800219e:	60fb      	str	r3, [r7, #12]
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	7d1b      	ldrb	r3, [r3, #20]
 80021a4:	3b01      	subs	r3, #1
 80021a6:	b2da      	uxtb	r2, r3
 80021a8:	7afb      	ldrb	r3, [r7, #11]
 80021aa:	4313      	orrs	r3, r2
 80021ac:	72fb      	strb	r3, [r7, #11]
 80021ae:	7afb      	ldrb	r3, [r7, #11]
 80021b0:	051b      	lsls	r3, r3, #20
 80021b2:	68fa      	ldr	r2, [r7, #12]
 80021b4:	4313      	orrs	r3, r2
 80021b6:	60fb      	str	r3, [r7, #12]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	68fa      	ldr	r2, [r7, #12]
 80021bc:	62da      	str	r2, [r3, #44]	@ 0x2c
 80021be:	bf00      	nop
 80021c0:	3714      	adds	r7, #20
 80021c2:	46bd      	mov	sp, r7
 80021c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c8:	4770      	bx	lr
 80021ca:	bf00      	nop
 80021cc:	c0fff7fd 	.word	0xc0fff7fd

080021d0 <ADC_CommonInit>:
 80021d0:	b480      	push	{r7}
 80021d2:	b085      	sub	sp, #20
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
 80021d8:	2300      	movs	r3, #0
 80021da:	60fb      	str	r3, [r7, #12]
 80021dc:	4b0e      	ldr	r3, [pc, #56]	@ (8002218 <ADC_CommonInit+0x48>)
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	60fb      	str	r3, [r7, #12]
 80021e2:	68fa      	ldr	r2, [r7, #12]
 80021e4:	4b0d      	ldr	r3, [pc, #52]	@ (800221c <ADC_CommonInit+0x4c>)
 80021e6:	4013      	ands	r3, r2
 80021e8:	60fb      	str	r3, [r7, #12]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	431a      	orrs	r2, r3
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	431a      	orrs	r2, r3
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	68db      	ldr	r3, [r3, #12]
 80021fe:	4313      	orrs	r3, r2
 8002200:	68fa      	ldr	r2, [r7, #12]
 8002202:	4313      	orrs	r3, r2
 8002204:	60fb      	str	r3, [r7, #12]
 8002206:	4a04      	ldr	r2, [pc, #16]	@ (8002218 <ADC_CommonInit+0x48>)
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	6053      	str	r3, [r2, #4]
 800220c:	bf00      	nop
 800220e:	3714      	adds	r7, #20
 8002210:	46bd      	mov	sp, r7
 8002212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002216:	4770      	bx	lr
 8002218:	40012300 	.word	0x40012300
 800221c:	fffc30e0 	.word	0xfffc30e0

08002220 <ADC_Cmd>:
 8002220:	b480      	push	{r7}
 8002222:	b083      	sub	sp, #12
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
 8002228:	460b      	mov	r3, r1
 800222a:	70fb      	strb	r3, [r7, #3]
 800222c:	78fb      	ldrb	r3, [r7, #3]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d006      	beq.n	8002240 <ADC_Cmd+0x20>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	f043 0201 	orr.w	r2, r3, #1
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	609a      	str	r2, [r3, #8]
 800223e:	e005      	b.n	800224c <ADC_Cmd+0x2c>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	f023 0201 	bic.w	r2, r3, #1
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	609a      	str	r2, [r3, #8]
 800224c:	bf00      	nop
 800224e:	370c      	adds	r7, #12
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr

08002258 <ADC_RegularChannelConfig>:
 8002258:	b480      	push	{r7}
 800225a:	b085      	sub	sp, #20
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
 8002260:	4608      	mov	r0, r1
 8002262:	4611      	mov	r1, r2
 8002264:	461a      	mov	r2, r3
 8002266:	4603      	mov	r3, r0
 8002268:	70fb      	strb	r3, [r7, #3]
 800226a:	460b      	mov	r3, r1
 800226c:	70bb      	strb	r3, [r7, #2]
 800226e:	4613      	mov	r3, r2
 8002270:	707b      	strb	r3, [r7, #1]
 8002272:	2300      	movs	r3, #0
 8002274:	60fb      	str	r3, [r7, #12]
 8002276:	2300      	movs	r3, #0
 8002278:	60bb      	str	r3, [r7, #8]
 800227a:	78fb      	ldrb	r3, [r7, #3]
 800227c:	2b09      	cmp	r3, #9
 800227e:	d923      	bls.n	80022c8 <ADC_RegularChannelConfig+0x70>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	68db      	ldr	r3, [r3, #12]
 8002284:	60fb      	str	r3, [r7, #12]
 8002286:	78fb      	ldrb	r3, [r7, #3]
 8002288:	f1a3 020a 	sub.w	r2, r3, #10
 800228c:	4613      	mov	r3, r2
 800228e:	005b      	lsls	r3, r3, #1
 8002290:	4413      	add	r3, r2
 8002292:	2207      	movs	r2, #7
 8002294:	fa02 f303 	lsl.w	r3, r2, r3
 8002298:	60bb      	str	r3, [r7, #8]
 800229a:	68bb      	ldr	r3, [r7, #8]
 800229c:	43db      	mvns	r3, r3
 800229e:	68fa      	ldr	r2, [r7, #12]
 80022a0:	4013      	ands	r3, r2
 80022a2:	60fb      	str	r3, [r7, #12]
 80022a4:	7879      	ldrb	r1, [r7, #1]
 80022a6:	78fb      	ldrb	r3, [r7, #3]
 80022a8:	f1a3 020a 	sub.w	r2, r3, #10
 80022ac:	4613      	mov	r3, r2
 80022ae:	005b      	lsls	r3, r3, #1
 80022b0:	4413      	add	r3, r2
 80022b2:	fa01 f303 	lsl.w	r3, r1, r3
 80022b6:	60bb      	str	r3, [r7, #8]
 80022b8:	68fa      	ldr	r2, [r7, #12]
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	4313      	orrs	r3, r2
 80022be:	60fb      	str	r3, [r7, #12]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	68fa      	ldr	r2, [r7, #12]
 80022c4:	60da      	str	r2, [r3, #12]
 80022c6:	e01e      	b.n	8002306 <ADC_RegularChannelConfig+0xae>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	691b      	ldr	r3, [r3, #16]
 80022cc:	60fb      	str	r3, [r7, #12]
 80022ce:	78fa      	ldrb	r2, [r7, #3]
 80022d0:	4613      	mov	r3, r2
 80022d2:	005b      	lsls	r3, r3, #1
 80022d4:	4413      	add	r3, r2
 80022d6:	2207      	movs	r2, #7
 80022d8:	fa02 f303 	lsl.w	r3, r2, r3
 80022dc:	60bb      	str	r3, [r7, #8]
 80022de:	68bb      	ldr	r3, [r7, #8]
 80022e0:	43db      	mvns	r3, r3
 80022e2:	68fa      	ldr	r2, [r7, #12]
 80022e4:	4013      	ands	r3, r2
 80022e6:	60fb      	str	r3, [r7, #12]
 80022e8:	7879      	ldrb	r1, [r7, #1]
 80022ea:	78fa      	ldrb	r2, [r7, #3]
 80022ec:	4613      	mov	r3, r2
 80022ee:	005b      	lsls	r3, r3, #1
 80022f0:	4413      	add	r3, r2
 80022f2:	fa01 f303 	lsl.w	r3, r1, r3
 80022f6:	60bb      	str	r3, [r7, #8]
 80022f8:	68fa      	ldr	r2, [r7, #12]
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	4313      	orrs	r3, r2
 80022fe:	60fb      	str	r3, [r7, #12]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	68fa      	ldr	r2, [r7, #12]
 8002304:	611a      	str	r2, [r3, #16]
 8002306:	78bb      	ldrb	r3, [r7, #2]
 8002308:	2b06      	cmp	r3, #6
 800230a:	d821      	bhi.n	8002350 <ADC_RegularChannelConfig+0xf8>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002310:	60fb      	str	r3, [r7, #12]
 8002312:	78bb      	ldrb	r3, [r7, #2]
 8002314:	1e5a      	subs	r2, r3, #1
 8002316:	4613      	mov	r3, r2
 8002318:	009b      	lsls	r3, r3, #2
 800231a:	4413      	add	r3, r2
 800231c:	221f      	movs	r2, #31
 800231e:	fa02 f303 	lsl.w	r3, r2, r3
 8002322:	60bb      	str	r3, [r7, #8]
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	43db      	mvns	r3, r3
 8002328:	68fa      	ldr	r2, [r7, #12]
 800232a:	4013      	ands	r3, r2
 800232c:	60fb      	str	r3, [r7, #12]
 800232e:	78f9      	ldrb	r1, [r7, #3]
 8002330:	78bb      	ldrb	r3, [r7, #2]
 8002332:	1e5a      	subs	r2, r3, #1
 8002334:	4613      	mov	r3, r2
 8002336:	009b      	lsls	r3, r3, #2
 8002338:	4413      	add	r3, r2
 800233a:	fa01 f303 	lsl.w	r3, r1, r3
 800233e:	60bb      	str	r3, [r7, #8]
 8002340:	68fa      	ldr	r2, [r7, #12]
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	4313      	orrs	r3, r2
 8002346:	60fb      	str	r3, [r7, #12]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	68fa      	ldr	r2, [r7, #12]
 800234c:	635a      	str	r2, [r3, #52]	@ 0x34
 800234e:	e047      	b.n	80023e0 <ADC_RegularChannelConfig+0x188>
 8002350:	78bb      	ldrb	r3, [r7, #2]
 8002352:	2b0c      	cmp	r3, #12
 8002354:	d821      	bhi.n	800239a <ADC_RegularChannelConfig+0x142>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800235a:	60fb      	str	r3, [r7, #12]
 800235c:	78bb      	ldrb	r3, [r7, #2]
 800235e:	1fda      	subs	r2, r3, #7
 8002360:	4613      	mov	r3, r2
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	4413      	add	r3, r2
 8002366:	221f      	movs	r2, #31
 8002368:	fa02 f303 	lsl.w	r3, r2, r3
 800236c:	60bb      	str	r3, [r7, #8]
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	43db      	mvns	r3, r3
 8002372:	68fa      	ldr	r2, [r7, #12]
 8002374:	4013      	ands	r3, r2
 8002376:	60fb      	str	r3, [r7, #12]
 8002378:	78f9      	ldrb	r1, [r7, #3]
 800237a:	78bb      	ldrb	r3, [r7, #2]
 800237c:	1fda      	subs	r2, r3, #7
 800237e:	4613      	mov	r3, r2
 8002380:	009b      	lsls	r3, r3, #2
 8002382:	4413      	add	r3, r2
 8002384:	fa01 f303 	lsl.w	r3, r1, r3
 8002388:	60bb      	str	r3, [r7, #8]
 800238a:	68fa      	ldr	r2, [r7, #12]
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	4313      	orrs	r3, r2
 8002390:	60fb      	str	r3, [r7, #12]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	68fa      	ldr	r2, [r7, #12]
 8002396:	631a      	str	r2, [r3, #48]	@ 0x30
 8002398:	e022      	b.n	80023e0 <ADC_RegularChannelConfig+0x188>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800239e:	60fb      	str	r3, [r7, #12]
 80023a0:	78bb      	ldrb	r3, [r7, #2]
 80023a2:	f1a3 020d 	sub.w	r2, r3, #13
 80023a6:	4613      	mov	r3, r2
 80023a8:	009b      	lsls	r3, r3, #2
 80023aa:	4413      	add	r3, r2
 80023ac:	221f      	movs	r2, #31
 80023ae:	fa02 f303 	lsl.w	r3, r2, r3
 80023b2:	60bb      	str	r3, [r7, #8]
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	43db      	mvns	r3, r3
 80023b8:	68fa      	ldr	r2, [r7, #12]
 80023ba:	4013      	ands	r3, r2
 80023bc:	60fb      	str	r3, [r7, #12]
 80023be:	78f9      	ldrb	r1, [r7, #3]
 80023c0:	78bb      	ldrb	r3, [r7, #2]
 80023c2:	f1a3 020d 	sub.w	r2, r3, #13
 80023c6:	4613      	mov	r3, r2
 80023c8:	009b      	lsls	r3, r3, #2
 80023ca:	4413      	add	r3, r2
 80023cc:	fa01 f303 	lsl.w	r3, r1, r3
 80023d0:	60bb      	str	r3, [r7, #8]
 80023d2:	68fa      	ldr	r2, [r7, #12]
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	4313      	orrs	r3, r2
 80023d8:	60fb      	str	r3, [r7, #12]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	68fa      	ldr	r2, [r7, #12]
 80023de:	62da      	str	r2, [r3, #44]	@ 0x2c
 80023e0:	bf00      	nop
 80023e2:	3714      	adds	r7, #20
 80023e4:	46bd      	mov	sp, r7
 80023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ea:	4770      	bx	lr

080023ec <ADC_SoftwareStartConv>:
 80023ec:	b480      	push	{r7}
 80023ee:	b083      	sub	sp, #12
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	609a      	str	r2, [r3, #8]
 8002400:	bf00      	nop
 8002402:	370c      	adds	r7, #12
 8002404:	46bd      	mov	sp, r7
 8002406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240a:	4770      	bx	lr

0800240c <ADC_EOCOnEachRegularChannelCmd>:
 800240c:	b480      	push	{r7}
 800240e:	b083      	sub	sp, #12
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
 8002414:	460b      	mov	r3, r1
 8002416:	70fb      	strb	r3, [r7, #3]
 8002418:	78fb      	ldrb	r3, [r7, #3]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d006      	beq.n	800242c <ADC_EOCOnEachRegularChannelCmd+0x20>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	609a      	str	r2, [r3, #8]
 800242a:	e005      	b.n	8002438 <ADC_EOCOnEachRegularChannelCmd+0x2c>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	609a      	str	r2, [r3, #8]
 8002438:	bf00      	nop
 800243a:	370c      	adds	r7, #12
 800243c:	46bd      	mov	sp, r7
 800243e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002442:	4770      	bx	lr

08002444 <ADC_ContinuousModeCmd>:
 8002444:	b480      	push	{r7}
 8002446:	b083      	sub	sp, #12
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
 800244c:	460b      	mov	r3, r1
 800244e:	70fb      	strb	r3, [r7, #3]
 8002450:	78fb      	ldrb	r3, [r7, #3]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d006      	beq.n	8002464 <ADC_ContinuousModeCmd+0x20>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	f043 0202 	orr.w	r2, r3, #2
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	609a      	str	r2, [r3, #8]
 8002462:	e005      	b.n	8002470 <ADC_ContinuousModeCmd+0x2c>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	f023 0202 	bic.w	r2, r3, #2
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	609a      	str	r2, [r3, #8]
 8002470:	bf00      	nop
 8002472:	370c      	adds	r7, #12
 8002474:	46bd      	mov	sp, r7
 8002476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247a:	4770      	bx	lr

0800247c <ADC_DiscModeChannelCountConfig>:
 800247c:	b480      	push	{r7}
 800247e:	b085      	sub	sp, #20
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
 8002484:	460b      	mov	r3, r1
 8002486:	70fb      	strb	r3, [r7, #3]
 8002488:	2300      	movs	r3, #0
 800248a:	60fb      	str	r3, [r7, #12]
 800248c:	2300      	movs	r3, #0
 800248e:	60bb      	str	r3, [r7, #8]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	60fb      	str	r3, [r7, #12]
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 800249c:	60fb      	str	r3, [r7, #12]
 800249e:	78fb      	ldrb	r3, [r7, #3]
 80024a0:	3b01      	subs	r3, #1
 80024a2:	60bb      	str	r3, [r7, #8]
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	035b      	lsls	r3, r3, #13
 80024a8:	68fa      	ldr	r2, [r7, #12]
 80024aa:	4313      	orrs	r3, r2
 80024ac:	60fb      	str	r3, [r7, #12]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	68fa      	ldr	r2, [r7, #12]
 80024b2:	605a      	str	r2, [r3, #4]
 80024b4:	bf00      	nop
 80024b6:	3714      	adds	r7, #20
 80024b8:	46bd      	mov	sp, r7
 80024ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024be:	4770      	bx	lr

080024c0 <ADC_DiscModeCmd>:
 80024c0:	b480      	push	{r7}
 80024c2:	b083      	sub	sp, #12
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
 80024c8:	460b      	mov	r3, r1
 80024ca:	70fb      	strb	r3, [r7, #3]
 80024cc:	78fb      	ldrb	r3, [r7, #3]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d006      	beq.n	80024e0 <ADC_DiscModeCmd+0x20>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	605a      	str	r2, [r3, #4]
 80024de:	e005      	b.n	80024ec <ADC_DiscModeCmd+0x2c>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	605a      	str	r2, [r3, #4]
 80024ec:	bf00      	nop
 80024ee:	370c      	adds	r7, #12
 80024f0:	46bd      	mov	sp, r7
 80024f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f6:	4770      	bx	lr

080024f8 <ADC_GetConversionValue>:
 80024f8:	b480      	push	{r7}
 80024fa:	b083      	sub	sp, #12
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002504:	b29b      	uxth	r3, r3
 8002506:	4618      	mov	r0, r3
 8002508:	370c      	adds	r7, #12
 800250a:	46bd      	mov	sp, r7
 800250c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002510:	4770      	bx	lr

08002512 <ADC_GetFlagStatus>:
 8002512:	b480      	push	{r7}
 8002514:	b085      	sub	sp, #20
 8002516:	af00      	add	r7, sp, #0
 8002518:	6078      	str	r0, [r7, #4]
 800251a:	460b      	mov	r3, r1
 800251c:	70fb      	strb	r3, [r7, #3]
 800251e:	2300      	movs	r3, #0
 8002520:	73fb      	strb	r3, [r7, #15]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	78fb      	ldrb	r3, [r7, #3]
 8002528:	4013      	ands	r3, r2
 800252a:	2b00      	cmp	r3, #0
 800252c:	d002      	beq.n	8002534 <ADC_GetFlagStatus+0x22>
 800252e:	2301      	movs	r3, #1
 8002530:	73fb      	strb	r3, [r7, #15]
 8002532:	e001      	b.n	8002538 <ADC_GetFlagStatus+0x26>
 8002534:	2300      	movs	r3, #0
 8002536:	73fb      	strb	r3, [r7, #15]
 8002538:	7bfb      	ldrb	r3, [r7, #15]
 800253a:	4618      	mov	r0, r3
 800253c:	3714      	adds	r7, #20
 800253e:	46bd      	mov	sp, r7
 8002540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002544:	4770      	bx	lr
	...

08002548 <I2C_Init>:
 8002548:	b580      	push	{r7, lr}
 800254a:	b08a      	sub	sp, #40	@ 0x28
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
 8002550:	6039      	str	r1, [r7, #0]
 8002552:	2300      	movs	r3, #0
 8002554:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8002556:	2300      	movs	r3, #0
 8002558:	847b      	strh	r3, [r7, #34]	@ 0x22
 800255a:	2304      	movs	r3, #4
 800255c:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800255e:	4b57      	ldr	r3, [pc, #348]	@ (80026bc <I2C_Init+0x174>)
 8002560:	61fb      	str	r3, [r7, #28]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	889b      	ldrh	r3, [r3, #4]
 8002566:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8002568:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800256a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800256e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8002570:	f107 030c 	add.w	r3, r7, #12
 8002574:	4618      	mov	r0, r3
 8002576:	f7ff fb97 	bl	8001ca8 <RCC_GetClocksFreq>
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	61fb      	str	r3, [r7, #28]
 800257e:	69fb      	ldr	r3, [r7, #28]
 8002580:	4a4f      	ldr	r2, [pc, #316]	@ (80026c0 <I2C_Init+0x178>)
 8002582:	fba2 2303 	umull	r2, r3, r2, r3
 8002586:	0c9b      	lsrs	r3, r3, #18
 8002588:	847b      	strh	r3, [r7, #34]	@ 0x22
 800258a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800258c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800258e:	4313      	orrs	r3, r2
 8002590:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8002596:	809a      	strh	r2, [r3, #4]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	881b      	ldrh	r3, [r3, #0]
 800259c:	b29b      	uxth	r3, r3
 800259e:	f023 0301 	bic.w	r3, r3, #1
 80025a2:	b29a      	uxth	r2, r3
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	801a      	strh	r2, [r3, #0]
 80025a8:	2300      	movs	r3, #0
 80025aa:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a44      	ldr	r2, [pc, #272]	@ (80026c4 <I2C_Init+0x17c>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d815      	bhi.n	80025e2 <I2C_Init+0x9a>
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	005b      	lsls	r3, r3, #1
 80025bc:	69fa      	ldr	r2, [r7, #28]
 80025be:	fbb2 f3f3 	udiv	r3, r2, r3
 80025c2:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80025c4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80025c6:	2b03      	cmp	r3, #3
 80025c8:	d801      	bhi.n	80025ce <I2C_Init+0x86>
 80025ca:	2304      	movs	r3, #4
 80025cc:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80025ce:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80025d0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80025d2:	4313      	orrs	r3, r2
 80025d4:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80025d6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80025d8:	3301      	adds	r3, #1
 80025da:	b29a      	uxth	r2, r3
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	841a      	strh	r2, [r3, #32]
 80025e0:	e040      	b.n	8002664 <I2C_Init+0x11c>
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	88db      	ldrh	r3, [r3, #6]
 80025e6:	f64b 72ff 	movw	r2, #49151	@ 0xbfff
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d109      	bne.n	8002602 <I2C_Init+0xba>
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	4613      	mov	r3, r2
 80025f4:	005b      	lsls	r3, r3, #1
 80025f6:	4413      	add	r3, r2
 80025f8:	69fa      	ldr	r2, [r7, #28]
 80025fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80025fe:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8002600:	e00e      	b.n	8002620 <I2C_Init+0xd8>
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	4613      	mov	r3, r2
 8002608:	009b      	lsls	r3, r3, #2
 800260a:	4413      	add	r3, r2
 800260c:	009a      	lsls	r2, r3, #2
 800260e:	4413      	add	r3, r2
 8002610:	69fa      	ldr	r2, [r7, #28]
 8002612:	fbb2 f3f3 	udiv	r3, r2, r3
 8002616:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8002618:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800261a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800261e:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8002620:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002622:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002626:	2b00      	cmp	r3, #0
 8002628:	d103      	bne.n	8002632 <I2C_Init+0xea>
 800262a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800262c:	f043 0301 	orr.w	r3, r3, #1
 8002630:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8002632:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002634:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002636:	4313      	orrs	r3, r2
 8002638:	b29b      	uxth	r3, r3
 800263a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800263e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002642:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8002644:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8002646:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800264a:	fb02 f303 	mul.w	r3, r2, r3
 800264e:	4a1e      	ldr	r2, [pc, #120]	@ (80026c8 <I2C_Init+0x180>)
 8002650:	fb82 1203 	smull	r1, r2, r2, r3
 8002654:	1192      	asrs	r2, r2, #6
 8002656:	17db      	asrs	r3, r3, #31
 8002658:	1ad3      	subs	r3, r2, r3
 800265a:	b29b      	uxth	r3, r3
 800265c:	3301      	adds	r3, #1
 800265e:	b29a      	uxth	r2, r3
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	841a      	strh	r2, [r3, #32]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8002668:	839a      	strh	r2, [r3, #28]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	881b      	ldrh	r3, [r3, #0]
 800266e:	b29b      	uxth	r3, r3
 8002670:	f043 0301 	orr.w	r3, r3, #1
 8002674:	b29a      	uxth	r2, r3
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	801a      	strh	r2, [r3, #0]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	881b      	ldrh	r3, [r3, #0]
 800267e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8002680:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002682:	f423 6381 	bic.w	r3, r3, #1032	@ 0x408
 8002686:	f023 0302 	bic.w	r3, r3, #2
 800268a:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	889a      	ldrh	r2, [r3, #4]
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	895b      	ldrh	r3, [r3, #10]
 8002694:	4313      	orrs	r3, r2
 8002696:	b29a      	uxth	r2, r3
 8002698:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800269a:	4313      	orrs	r3, r2
 800269c:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80026a2:	801a      	strh	r2, [r3, #0]
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	899a      	ldrh	r2, [r3, #12]
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	891b      	ldrh	r3, [r3, #8]
 80026ac:	4313      	orrs	r3, r2
 80026ae:	b29a      	uxth	r2, r3
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	811a      	strh	r2, [r3, #8]
 80026b4:	bf00      	nop
 80026b6:	3728      	adds	r7, #40	@ 0x28
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}
 80026bc:	007a1200 	.word	0x007a1200
 80026c0:	431bde83 	.word	0x431bde83
 80026c4:	000186a0 	.word	0x000186a0
 80026c8:	10624dd3 	.word	0x10624dd3

080026cc <I2C_Cmd>:
 80026cc:	b480      	push	{r7}
 80026ce:	b083      	sub	sp, #12
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
 80026d4:	460b      	mov	r3, r1
 80026d6:	70fb      	strb	r3, [r7, #3]
 80026d8:	78fb      	ldrb	r3, [r7, #3]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d008      	beq.n	80026f0 <I2C_Cmd+0x24>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	881b      	ldrh	r3, [r3, #0]
 80026e2:	b29b      	uxth	r3, r3
 80026e4:	f043 0301 	orr.w	r3, r3, #1
 80026e8:	b29a      	uxth	r2, r3
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	801a      	strh	r2, [r3, #0]
 80026ee:	e007      	b.n	8002700 <I2C_Cmd+0x34>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	881b      	ldrh	r3, [r3, #0]
 80026f4:	b29b      	uxth	r3, r3
 80026f6:	f023 0301 	bic.w	r3, r3, #1
 80026fa:	b29a      	uxth	r2, r3
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	801a      	strh	r2, [r3, #0]
 8002700:	bf00      	nop
 8002702:	370c      	adds	r7, #12
 8002704:	46bd      	mov	sp, r7
 8002706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270a:	4770      	bx	lr

0800270c <I2C_GenerateSTART>:
 800270c:	b480      	push	{r7}
 800270e:	b083      	sub	sp, #12
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
 8002714:	460b      	mov	r3, r1
 8002716:	70fb      	strb	r3, [r7, #3]
 8002718:	78fb      	ldrb	r3, [r7, #3]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d008      	beq.n	8002730 <I2C_GenerateSTART+0x24>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	881b      	ldrh	r3, [r3, #0]
 8002722:	b29b      	uxth	r3, r3
 8002724:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002728:	b29a      	uxth	r2, r3
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	801a      	strh	r2, [r3, #0]
 800272e:	e007      	b.n	8002740 <I2C_GenerateSTART+0x34>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	881b      	ldrh	r3, [r3, #0]
 8002734:	b29b      	uxth	r3, r3
 8002736:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800273a:	b29a      	uxth	r2, r3
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	801a      	strh	r2, [r3, #0]
 8002740:	bf00      	nop
 8002742:	370c      	adds	r7, #12
 8002744:	46bd      	mov	sp, r7
 8002746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274a:	4770      	bx	lr

0800274c <I2C_GenerateSTOP>:
 800274c:	b480      	push	{r7}
 800274e:	b083      	sub	sp, #12
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
 8002754:	460b      	mov	r3, r1
 8002756:	70fb      	strb	r3, [r7, #3]
 8002758:	78fb      	ldrb	r3, [r7, #3]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d008      	beq.n	8002770 <I2C_GenerateSTOP+0x24>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	881b      	ldrh	r3, [r3, #0]
 8002762:	b29b      	uxth	r3, r3
 8002764:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002768:	b29a      	uxth	r2, r3
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	801a      	strh	r2, [r3, #0]
 800276e:	e007      	b.n	8002780 <I2C_GenerateSTOP+0x34>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	881b      	ldrh	r3, [r3, #0]
 8002774:	b29b      	uxth	r3, r3
 8002776:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800277a:	b29a      	uxth	r2, r3
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	801a      	strh	r2, [r3, #0]
 8002780:	bf00      	nop
 8002782:	370c      	adds	r7, #12
 8002784:	46bd      	mov	sp, r7
 8002786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278a:	4770      	bx	lr

0800278c <I2C_Send7bitAddress>:
 800278c:	b480      	push	{r7}
 800278e:	b083      	sub	sp, #12
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
 8002794:	460b      	mov	r3, r1
 8002796:	70fb      	strb	r3, [r7, #3]
 8002798:	4613      	mov	r3, r2
 800279a:	70bb      	strb	r3, [r7, #2]
 800279c:	78bb      	ldrb	r3, [r7, #2]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d004      	beq.n	80027ac <I2C_Send7bitAddress+0x20>
 80027a2:	78fb      	ldrb	r3, [r7, #3]
 80027a4:	f043 0301 	orr.w	r3, r3, #1
 80027a8:	70fb      	strb	r3, [r7, #3]
 80027aa:	e003      	b.n	80027b4 <I2C_Send7bitAddress+0x28>
 80027ac:	78fb      	ldrb	r3, [r7, #3]
 80027ae:	f023 0301 	bic.w	r3, r3, #1
 80027b2:	70fb      	strb	r3, [r7, #3]
 80027b4:	78fb      	ldrb	r3, [r7, #3]
 80027b6:	b29a      	uxth	r2, r3
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	821a      	strh	r2, [r3, #16]
 80027bc:	bf00      	nop
 80027be:	370c      	adds	r7, #12
 80027c0:	46bd      	mov	sp, r7
 80027c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c6:	4770      	bx	lr

080027c8 <I2C_AcknowledgeConfig>:
 80027c8:	b480      	push	{r7}
 80027ca:	b083      	sub	sp, #12
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
 80027d0:	460b      	mov	r3, r1
 80027d2:	70fb      	strb	r3, [r7, #3]
 80027d4:	78fb      	ldrb	r3, [r7, #3]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d008      	beq.n	80027ec <I2C_AcknowledgeConfig+0x24>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	881b      	ldrh	r3, [r3, #0]
 80027de:	b29b      	uxth	r3, r3
 80027e0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80027e4:	b29a      	uxth	r2, r3
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	801a      	strh	r2, [r3, #0]
 80027ea:	e007      	b.n	80027fc <I2C_AcknowledgeConfig+0x34>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	881b      	ldrh	r3, [r3, #0]
 80027f0:	b29b      	uxth	r3, r3
 80027f2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80027f6:	b29a      	uxth	r2, r3
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	801a      	strh	r2, [r3, #0]
 80027fc:	bf00      	nop
 80027fe:	370c      	adds	r7, #12
 8002800:	46bd      	mov	sp, r7
 8002802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002806:	4770      	bx	lr

08002808 <I2C_SendData>:
 8002808:	b480      	push	{r7}
 800280a:	b083      	sub	sp, #12
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
 8002810:	460b      	mov	r3, r1
 8002812:	70fb      	strb	r3, [r7, #3]
 8002814:	78fb      	ldrb	r3, [r7, #3]
 8002816:	b29a      	uxth	r2, r3
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	821a      	strh	r2, [r3, #16]
 800281c:	bf00      	nop
 800281e:	370c      	adds	r7, #12
 8002820:	46bd      	mov	sp, r7
 8002822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002826:	4770      	bx	lr

08002828 <I2C_ReceiveData>:
 8002828:	b480      	push	{r7}
 800282a:	b083      	sub	sp, #12
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	8a1b      	ldrh	r3, [r3, #16]
 8002834:	b29b      	uxth	r3, r3
 8002836:	b2db      	uxtb	r3, r3
 8002838:	4618      	mov	r0, r3
 800283a:	370c      	adds	r7, #12
 800283c:	46bd      	mov	sp, r7
 800283e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002842:	4770      	bx	lr

08002844 <I2C_CheckEvent>:
 8002844:	b480      	push	{r7}
 8002846:	b087      	sub	sp, #28
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
 800284c:	6039      	str	r1, [r7, #0]
 800284e:	2300      	movs	r3, #0
 8002850:	613b      	str	r3, [r7, #16]
 8002852:	2300      	movs	r3, #0
 8002854:	60fb      	str	r3, [r7, #12]
 8002856:	2300      	movs	r3, #0
 8002858:	60bb      	str	r3, [r7, #8]
 800285a:	2300      	movs	r3, #0
 800285c:	75fb      	strb	r3, [r7, #23]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	8a9b      	ldrh	r3, [r3, #20]
 8002862:	b29b      	uxth	r3, r3
 8002864:	60fb      	str	r3, [r7, #12]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	8b1b      	ldrh	r3, [r3, #24]
 800286a:	b29b      	uxth	r3, r3
 800286c:	60bb      	str	r3, [r7, #8]
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	041b      	lsls	r3, r3, #16
 8002872:	60bb      	str	r3, [r7, #8]
 8002874:	68fa      	ldr	r2, [r7, #12]
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	4313      	orrs	r3, r2
 800287a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800287e:	613b      	str	r3, [r7, #16]
 8002880:	693a      	ldr	r2, [r7, #16]
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	4013      	ands	r3, r2
 8002886:	683a      	ldr	r2, [r7, #0]
 8002888:	429a      	cmp	r2, r3
 800288a:	d102      	bne.n	8002892 <I2C_CheckEvent+0x4e>
 800288c:	2301      	movs	r3, #1
 800288e:	75fb      	strb	r3, [r7, #23]
 8002890:	e001      	b.n	8002896 <I2C_CheckEvent+0x52>
 8002892:	2300      	movs	r3, #0
 8002894:	75fb      	strb	r3, [r7, #23]
 8002896:	7dfb      	ldrb	r3, [r7, #23]
 8002898:	4618      	mov	r0, r3
 800289a:	371c      	adds	r7, #28
 800289c:	46bd      	mov	sp, r7
 800289e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a2:	4770      	bx	lr

080028a4 <I2C_GetFlagStatus>:
 80028a4:	b480      	push	{r7}
 80028a6:	b087      	sub	sp, #28
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
 80028ac:	6039      	str	r1, [r7, #0]
 80028ae:	2300      	movs	r3, #0
 80028b0:	75fb      	strb	r3, [r7, #23]
 80028b2:	2300      	movs	r3, #0
 80028b4:	613b      	str	r3, [r7, #16]
 80028b6:	2300      	movs	r3, #0
 80028b8:	60fb      	str	r3, [r7, #12]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	60fb      	str	r3, [r7, #12]
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	0f1b      	lsrs	r3, r3, #28
 80028c2:	613b      	str	r3, [r7, #16]
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80028ca:	603b      	str	r3, [r7, #0]
 80028cc:	693b      	ldr	r3, [r7, #16]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d003      	beq.n	80028da <I2C_GetFlagStatus+0x36>
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	3314      	adds	r3, #20
 80028d6:	60fb      	str	r3, [r7, #12]
 80028d8:	e005      	b.n	80028e6 <I2C_GetFlagStatus+0x42>
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	0c1b      	lsrs	r3, r3, #16
 80028de:	603b      	str	r3, [r7, #0]
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	3318      	adds	r3, #24
 80028e4:	60fb      	str	r3, [r7, #12]
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	4013      	ands	r3, r2
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d002      	beq.n	80028f8 <I2C_GetFlagStatus+0x54>
 80028f2:	2301      	movs	r3, #1
 80028f4:	75fb      	strb	r3, [r7, #23]
 80028f6:	e001      	b.n	80028fc <I2C_GetFlagStatus+0x58>
 80028f8:	2300      	movs	r3, #0
 80028fa:	75fb      	strb	r3, [r7, #23]
 80028fc:	7dfb      	ldrb	r3, [r7, #23]
 80028fe:	4618      	mov	r0, r3
 8002900:	371c      	adds	r7, #28
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr
	...

0800290c <TIM_TimeBaseInit>:
 800290c:	b480      	push	{r7}
 800290e:	b085      	sub	sp, #20
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
 8002914:	6039      	str	r1, [r7, #0]
 8002916:	2300      	movs	r3, #0
 8002918:	81fb      	strh	r3, [r7, #14]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	881b      	ldrh	r3, [r3, #0]
 800291e:	81fb      	strh	r3, [r7, #14]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	4a29      	ldr	r2, [pc, #164]	@ (80029c8 <TIM_TimeBaseInit+0xbc>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d013      	beq.n	8002950 <TIM_TimeBaseInit+0x44>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	4a28      	ldr	r2, [pc, #160]	@ (80029cc <TIM_TimeBaseInit+0xc0>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d00f      	beq.n	8002950 <TIM_TimeBaseInit+0x44>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002936:	d00b      	beq.n	8002950 <TIM_TimeBaseInit+0x44>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	4a25      	ldr	r2, [pc, #148]	@ (80029d0 <TIM_TimeBaseInit+0xc4>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d007      	beq.n	8002950 <TIM_TimeBaseInit+0x44>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	4a24      	ldr	r2, [pc, #144]	@ (80029d4 <TIM_TimeBaseInit+0xc8>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d003      	beq.n	8002950 <TIM_TimeBaseInit+0x44>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	4a23      	ldr	r2, [pc, #140]	@ (80029d8 <TIM_TimeBaseInit+0xcc>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d108      	bne.n	8002962 <TIM_TimeBaseInit+0x56>
 8002950:	89fb      	ldrh	r3, [r7, #14]
 8002952:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002956:	81fb      	strh	r3, [r7, #14]
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	885a      	ldrh	r2, [r3, #2]
 800295c:	89fb      	ldrh	r3, [r7, #14]
 800295e:	4313      	orrs	r3, r2
 8002960:	81fb      	strh	r3, [r7, #14]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	4a1d      	ldr	r2, [pc, #116]	@ (80029dc <TIM_TimeBaseInit+0xd0>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d00c      	beq.n	8002984 <TIM_TimeBaseInit+0x78>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	4a1c      	ldr	r2, [pc, #112]	@ (80029e0 <TIM_TimeBaseInit+0xd4>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d008      	beq.n	8002984 <TIM_TimeBaseInit+0x78>
 8002972:	89fb      	ldrh	r3, [r7, #14]
 8002974:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002978:	81fb      	strh	r3, [r7, #14]
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	891a      	ldrh	r2, [r3, #8]
 800297e:	89fb      	ldrh	r3, [r7, #14]
 8002980:	4313      	orrs	r3, r2
 8002982:	81fb      	strh	r3, [r7, #14]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	89fa      	ldrh	r2, [r7, #14]
 8002988:	801a      	strh	r2, [r3, #0]
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	685a      	ldr	r2, [r3, #4]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	881a      	ldrh	r2, [r3, #0]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	851a      	strh	r2, [r3, #40]	@ 0x28
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	4a0a      	ldr	r2, [pc, #40]	@ (80029c8 <TIM_TimeBaseInit+0xbc>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d003      	beq.n	80029aa <TIM_TimeBaseInit+0x9e>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	4a09      	ldr	r2, [pc, #36]	@ (80029cc <TIM_TimeBaseInit+0xc0>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d104      	bne.n	80029b4 <TIM_TimeBaseInit+0xa8>
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	7a9b      	ldrb	r3, [r3, #10]
 80029ae:	b29a      	uxth	r2, r3
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	861a      	strh	r2, [r3, #48]	@ 0x30
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2201      	movs	r2, #1
 80029b8:	829a      	strh	r2, [r3, #20]
 80029ba:	bf00      	nop
 80029bc:	3714      	adds	r7, #20
 80029be:	46bd      	mov	sp, r7
 80029c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c4:	4770      	bx	lr
 80029c6:	bf00      	nop
 80029c8:	40010000 	.word	0x40010000
 80029cc:	40010400 	.word	0x40010400
 80029d0:	40000400 	.word	0x40000400
 80029d4:	40000800 	.word	0x40000800
 80029d8:	40000c00 	.word	0x40000c00
 80029dc:	40001000 	.word	0x40001000
 80029e0:	40001400 	.word	0x40001400

080029e4 <TIM_Cmd>:
 80029e4:	b480      	push	{r7}
 80029e6:	b083      	sub	sp, #12
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
 80029ec:	460b      	mov	r3, r1
 80029ee:	70fb      	strb	r3, [r7, #3]
 80029f0:	78fb      	ldrb	r3, [r7, #3]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d008      	beq.n	8002a08 <TIM_Cmd+0x24>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	881b      	ldrh	r3, [r3, #0]
 80029fa:	b29b      	uxth	r3, r3
 80029fc:	f043 0301 	orr.w	r3, r3, #1
 8002a00:	b29a      	uxth	r2, r3
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	801a      	strh	r2, [r3, #0]
 8002a06:	e007      	b.n	8002a18 <TIM_Cmd+0x34>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	881b      	ldrh	r3, [r3, #0]
 8002a0c:	b29b      	uxth	r3, r3
 8002a0e:	f023 0301 	bic.w	r3, r3, #1
 8002a12:	b29a      	uxth	r2, r3
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	801a      	strh	r2, [r3, #0]
 8002a18:	bf00      	nop
 8002a1a:	370c      	adds	r7, #12
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a22:	4770      	bx	lr

08002a24 <TIM_OC4Init>:
 8002a24:	b480      	push	{r7}
 8002a26:	b085      	sub	sp, #20
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
 8002a2c:	6039      	str	r1, [r7, #0]
 8002a2e:	2300      	movs	r3, #0
 8002a30:	81bb      	strh	r3, [r7, #12]
 8002a32:	2300      	movs	r3, #0
 8002a34:	817b      	strh	r3, [r7, #10]
 8002a36:	2300      	movs	r3, #0
 8002a38:	81fb      	strh	r3, [r7, #14]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	8c1b      	ldrh	r3, [r3, #32]
 8002a3e:	b29b      	uxth	r3, r3
 8002a40:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002a44:	b29a      	uxth	r2, r3
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	841a      	strh	r2, [r3, #32]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	8c1b      	ldrh	r3, [r3, #32]
 8002a4e:	817b      	strh	r3, [r7, #10]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	889b      	ldrh	r3, [r3, #4]
 8002a54:	81fb      	strh	r3, [r7, #14]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	8b9b      	ldrh	r3, [r3, #28]
 8002a5a:	81bb      	strh	r3, [r7, #12]
 8002a5c:	89bb      	ldrh	r3, [r7, #12]
 8002a5e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002a62:	81bb      	strh	r3, [r7, #12]
 8002a64:	89bb      	ldrh	r3, [r7, #12]
 8002a66:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a6a:	81bb      	strh	r3, [r7, #12]
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	881b      	ldrh	r3, [r3, #0]
 8002a70:	021b      	lsls	r3, r3, #8
 8002a72:	b29a      	uxth	r2, r3
 8002a74:	89bb      	ldrh	r3, [r7, #12]
 8002a76:	4313      	orrs	r3, r2
 8002a78:	81bb      	strh	r3, [r7, #12]
 8002a7a:	897b      	ldrh	r3, [r7, #10]
 8002a7c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002a80:	817b      	strh	r3, [r7, #10]
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	899b      	ldrh	r3, [r3, #12]
 8002a86:	031b      	lsls	r3, r3, #12
 8002a88:	b29a      	uxth	r2, r3
 8002a8a:	897b      	ldrh	r3, [r7, #10]
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	817b      	strh	r3, [r7, #10]
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	885b      	ldrh	r3, [r3, #2]
 8002a94:	031b      	lsls	r3, r3, #12
 8002a96:	b29a      	uxth	r2, r3
 8002a98:	897b      	ldrh	r3, [r7, #10]
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	817b      	strh	r3, [r7, #10]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	4a12      	ldr	r2, [pc, #72]	@ (8002aec <TIM_OC4Init+0xc8>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d003      	beq.n	8002aae <TIM_OC4Init+0x8a>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	4a11      	ldr	r2, [pc, #68]	@ (8002af0 <TIM_OC4Init+0xcc>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d10a      	bne.n	8002ac4 <TIM_OC4Init+0xa0>
 8002aae:	89fb      	ldrh	r3, [r7, #14]
 8002ab0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002ab4:	81fb      	strh	r3, [r7, #14]
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	8a1b      	ldrh	r3, [r3, #16]
 8002aba:	019b      	lsls	r3, r3, #6
 8002abc:	b29a      	uxth	r2, r3
 8002abe:	89fb      	ldrh	r3, [r7, #14]
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	81fb      	strh	r3, [r7, #14]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	89fa      	ldrh	r2, [r7, #14]
 8002ac8:	809a      	strh	r2, [r3, #4]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	89ba      	ldrh	r2, [r7, #12]
 8002ace:	839a      	strh	r2, [r3, #28]
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	689a      	ldr	r2, [r3, #8]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	641a      	str	r2, [r3, #64]	@ 0x40
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	897a      	ldrh	r2, [r7, #10]
 8002adc:	841a      	strh	r2, [r3, #32]
 8002ade:	bf00      	nop
 8002ae0:	3714      	adds	r7, #20
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae8:	4770      	bx	lr
 8002aea:	bf00      	nop
 8002aec:	40010000 	.word	0x40010000
 8002af0:	40010400 	.word	0x40010400

08002af4 <TIM_SetCompare4>:
 8002af4:	b480      	push	{r7}
 8002af6:	b083      	sub	sp, #12
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
 8002afc:	6039      	str	r1, [r7, #0]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	683a      	ldr	r2, [r7, #0]
 8002b02:	641a      	str	r2, [r3, #64]	@ 0x40
 8002b04:	bf00      	nop
 8002b06:	370c      	adds	r7, #12
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0e:	4770      	bx	lr

08002b10 <TIM_CtrlPWMOutputs>:
 8002b10:	b480      	push	{r7}
 8002b12:	b083      	sub	sp, #12
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
 8002b18:	460b      	mov	r3, r1
 8002b1a:	70fb      	strb	r3, [r7, #3]
 8002b1c:	78fb      	ldrb	r3, [r7, #3]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d00c      	beq.n	8002b3c <TIM_CtrlPWMOutputs+0x2c>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002b28:	b29b      	uxth	r3, r3
 8002b2a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b2e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b32:	b29a      	uxth	r2, r3
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
 8002b3a:	e009      	b.n	8002b50 <TIM_CtrlPWMOutputs+0x40>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002b42:	b29b      	uxth	r3, r3
 8002b44:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002b48:	b29a      	uxth	r2, r3
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
 8002b50:	bf00      	nop
 8002b52:	370c      	adds	r7, #12
 8002b54:	46bd      	mov	sp, r7
 8002b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5a:	4770      	bx	lr

08002b5c <NVIC_SetPriority>:
 8002b5c:	b480      	push	{r7}
 8002b5e:	b083      	sub	sp, #12
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	4603      	mov	r3, r0
 8002b64:	6039      	str	r1, [r7, #0]
 8002b66:	71fb      	strb	r3, [r7, #7]
 8002b68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	da0b      	bge.n	8002b88 <NVIC_SetPriority+0x2c>
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	b2da      	uxtb	r2, r3
 8002b74:	490c      	ldr	r1, [pc, #48]	@ (8002ba8 <NVIC_SetPriority+0x4c>)
 8002b76:	79fb      	ldrb	r3, [r7, #7]
 8002b78:	f003 030f 	and.w	r3, r3, #15
 8002b7c:	3b04      	subs	r3, #4
 8002b7e:	0112      	lsls	r2, r2, #4
 8002b80:	b2d2      	uxtb	r2, r2
 8002b82:	440b      	add	r3, r1
 8002b84:	761a      	strb	r2, [r3, #24]
 8002b86:	e009      	b.n	8002b9c <NVIC_SetPriority+0x40>
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	b2da      	uxtb	r2, r3
 8002b8c:	4907      	ldr	r1, [pc, #28]	@ (8002bac <NVIC_SetPriority+0x50>)
 8002b8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b92:	0112      	lsls	r2, r2, #4
 8002b94:	b2d2      	uxtb	r2, r2
 8002b96:	440b      	add	r3, r1
 8002b98:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
 8002b9c:	bf00      	nop
 8002b9e:	370c      	adds	r7, #12
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba6:	4770      	bx	lr
 8002ba8:	e000ed00 	.word	0xe000ed00
 8002bac:	e000e100 	.word	0xe000e100

08002bb0 <SysTick_Config>:
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b082      	sub	sp, #8
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	3b01      	subs	r3, #1
 8002bbc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002bc0:	d301      	bcc.n	8002bc6 <SysTick_Config+0x16>
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e00f      	b.n	8002be6 <SysTick_Config+0x36>
 8002bc6:	4a0a      	ldr	r2, [pc, #40]	@ (8002bf0 <SysTick_Config+0x40>)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	3b01      	subs	r3, #1
 8002bcc:	6053      	str	r3, [r2, #4]
 8002bce:	210f      	movs	r1, #15
 8002bd0:	f04f 30ff 	mov.w	r0, #4294967295
 8002bd4:	f7ff ffc2 	bl	8002b5c <NVIC_SetPriority>
 8002bd8:	4b05      	ldr	r3, [pc, #20]	@ (8002bf0 <SysTick_Config+0x40>)
 8002bda:	2200      	movs	r2, #0
 8002bdc:	609a      	str	r2, [r3, #8]
 8002bde:	4b04      	ldr	r3, [pc, #16]	@ (8002bf0 <SysTick_Config+0x40>)
 8002be0:	2207      	movs	r2, #7
 8002be2:	601a      	str	r2, [r3, #0]
 8002be4:	2300      	movs	r3, #0
 8002be6:	4618      	mov	r0, r3
 8002be8:	3708      	adds	r7, #8
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	bf00      	nop
 8002bf0:	e000e010 	.word	0xe000e010

08002bf4 <TimerInit>:
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b084      	sub	sp, #16
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	463b      	mov	r3, r7
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f7ff f853 	bl	8001ca8 <RCC_GetClocksFreq>
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	4a0a      	ldr	r2, [pc, #40]	@ (8002c30 <TimerInit+0x3c>)
 8002c06:	fba2 2303 	umull	r2, r3, r2, r3
 8002c0a:	099b      	lsrs	r3, r3, #6
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f7ff ffcf 	bl	8002bb0 <SysTick_Config>
 8002c12:	2101      	movs	r1, #1
 8002c14:	f04f 30ff 	mov.w	r0, #4294967295
 8002c18:	f7ff ffa0 	bl	8002b5c <NVIC_SetPriority>
 8002c1c:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8002c20:	2100      	movs	r1, #0
 8002c22:	4804      	ldr	r0, [pc, #16]	@ (8002c34 <TimerInit+0x40>)
 8002c24:	f001 ffde 	bl	8004be4 <memsetl>
 8002c28:	bf00      	nop
 8002c2a:	3710      	adds	r7, #16
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}
 8002c30:	10624dd3 	.word	0x10624dd3
 8002c34:	200001ec 	.word	0x200001ec

08002c38 <TimerStart>:
 8002c38:	b590      	push	{r4, r7, lr}
 8002c3a:	b087      	sub	sp, #28
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	60f8      	str	r0, [r7, #12]
 8002c40:	60b9      	str	r1, [r7, #8]
 8002c42:	603b      	str	r3, [r7, #0]
 8002c44:	4613      	mov	r3, r2
 8002c46:	71fb      	strb	r3, [r7, #7]
 8002c48:	2300      	movs	r3, #0
 8002c4a:	75fb      	strb	r3, [r7, #23]
 8002c4c:	e04c      	b.n	8002ce8 <TimerStart+0xb0>
 8002c4e:	7dfa      	ldrb	r2, [r7, #23]
 8002c50:	4929      	ldr	r1, [pc, #164]	@ (8002cf8 <TimerStart+0xc0>)
 8002c52:	4613      	mov	r3, r2
 8002c54:	005b      	lsls	r3, r3, #1
 8002c56:	4413      	add	r3, r2
 8002c58:	00db      	lsls	r3, r3, #3
 8002c5a:	440b      	add	r3, r1
 8002c5c:	3310      	adds	r3, #16
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d13e      	bne.n	8002ce2 <TimerStart+0xaa>
 8002c64:	7dfa      	ldrb	r2, [r7, #23]
 8002c66:	4924      	ldr	r1, [pc, #144]	@ (8002cf8 <TimerStart+0xc0>)
 8002c68:	4613      	mov	r3, r2
 8002c6a:	005b      	lsls	r3, r3, #1
 8002c6c:	4413      	add	r3, r2
 8002c6e:	00db      	lsls	r3, r3, #3
 8002c70:	440b      	add	r3, r1
 8002c72:	68fa      	ldr	r2, [r7, #12]
 8002c74:	601a      	str	r2, [r3, #0]
 8002c76:	7dfa      	ldrb	r2, [r7, #23]
 8002c78:	491f      	ldr	r1, [pc, #124]	@ (8002cf8 <TimerStart+0xc0>)
 8002c7a:	4613      	mov	r3, r2
 8002c7c:	005b      	lsls	r3, r3, #1
 8002c7e:	4413      	add	r3, r2
 8002c80:	00db      	lsls	r3, r3, #3
 8002c82:	440b      	add	r3, r1
 8002c84:	3310      	adds	r3, #16
 8002c86:	683a      	ldr	r2, [r7, #0]
 8002c88:	601a      	str	r2, [r3, #0]
 8002c8a:	7dfa      	ldrb	r2, [r7, #23]
 8002c8c:	491a      	ldr	r1, [pc, #104]	@ (8002cf8 <TimerStart+0xc0>)
 8002c8e:	4613      	mov	r3, r2
 8002c90:	005b      	lsls	r3, r3, #1
 8002c92:	4413      	add	r3, r2
 8002c94:	00db      	lsls	r3, r3, #3
 8002c96:	440b      	add	r3, r1
 8002c98:	330c      	adds	r3, #12
 8002c9a:	79fa      	ldrb	r2, [r7, #7]
 8002c9c:	701a      	strb	r2, [r3, #0]
 8002c9e:	7dfa      	ldrb	r2, [r7, #23]
 8002ca0:	4915      	ldr	r1, [pc, #84]	@ (8002cf8 <TimerStart+0xc0>)
 8002ca2:	4613      	mov	r3, r2
 8002ca4:	005b      	lsls	r3, r3, #1
 8002ca6:	4413      	add	r3, r2
 8002ca8:	00db      	lsls	r3, r3, #3
 8002caa:	440b      	add	r3, r1
 8002cac:	3314      	adds	r3, #20
 8002cae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002cb0:	601a      	str	r2, [r3, #0]
 8002cb2:	7dfc      	ldrb	r4, [r7, #23]
 8002cb4:	f000 f872 	bl	8002d9c <GetMilSecTick>
 8002cb8:	4601      	mov	r1, r0
 8002cba:	4a0f      	ldr	r2, [pc, #60]	@ (8002cf8 <TimerStart+0xc0>)
 8002cbc:	4623      	mov	r3, r4
 8002cbe:	005b      	lsls	r3, r3, #1
 8002cc0:	4423      	add	r3, r4
 8002cc2:	00db      	lsls	r3, r3, #3
 8002cc4:	4413      	add	r3, r2
 8002cc6:	3304      	adds	r3, #4
 8002cc8:	6019      	str	r1, [r3, #0]
 8002cca:	7dfa      	ldrb	r2, [r7, #23]
 8002ccc:	490a      	ldr	r1, [pc, #40]	@ (8002cf8 <TimerStart+0xc0>)
 8002cce:	4613      	mov	r3, r2
 8002cd0:	005b      	lsls	r3, r3, #1
 8002cd2:	4413      	add	r3, r2
 8002cd4:	00db      	lsls	r3, r3, #3
 8002cd6:	440b      	add	r3, r1
 8002cd8:	3308      	adds	r3, #8
 8002cda:	68ba      	ldr	r2, [r7, #8]
 8002cdc:	601a      	str	r2, [r3, #0]
 8002cde:	7dfb      	ldrb	r3, [r7, #23]
 8002ce0:	e006      	b.n	8002cf0 <TimerStart+0xb8>
 8002ce2:	7dfb      	ldrb	r3, [r7, #23]
 8002ce4:	3301      	adds	r3, #1
 8002ce6:	75fb      	strb	r3, [r7, #23]
 8002ce8:	7dfb      	ldrb	r3, [r7, #23]
 8002cea:	2b0f      	cmp	r3, #15
 8002cec:	d9af      	bls.n	8002c4e <TimerStart+0x16>
 8002cee:	23ff      	movs	r3, #255	@ 0xff
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	371c      	adds	r7, #28
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd90      	pop	{r4, r7, pc}
 8002cf8:	200001ec 	.word	0x200001ec

08002cfc <TimerStop>:
 8002cfc:	b480      	push	{r7}
 8002cfe:	b083      	sub	sp, #12
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	4603      	mov	r3, r0
 8002d04:	71fb      	strb	r3, [r7, #7]
 8002d06:	79fb      	ldrb	r3, [r7, #7]
 8002d08:	2b0f      	cmp	r3, #15
 8002d0a:	d80a      	bhi.n	8002d22 <TimerStop+0x26>
 8002d0c:	79fa      	ldrb	r2, [r7, #7]
 8002d0e:	4922      	ldr	r1, [pc, #136]	@ (8002d98 <TimerStop+0x9c>)
 8002d10:	4613      	mov	r3, r2
 8002d12:	005b      	lsls	r3, r3, #1
 8002d14:	4413      	add	r3, r2
 8002d16:	00db      	lsls	r3, r3, #3
 8002d18:	440b      	add	r3, r1
 8002d1a:	3310      	adds	r3, #16
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d101      	bne.n	8002d26 <TimerStop+0x2a>
 8002d22:	2300      	movs	r3, #0
 8002d24:	e031      	b.n	8002d8a <TimerStop+0x8e>
 8002d26:	79fa      	ldrb	r2, [r7, #7]
 8002d28:	491b      	ldr	r1, [pc, #108]	@ (8002d98 <TimerStop+0x9c>)
 8002d2a:	4613      	mov	r3, r2
 8002d2c:	005b      	lsls	r3, r3, #1
 8002d2e:	4413      	add	r3, r2
 8002d30:	00db      	lsls	r3, r3, #3
 8002d32:	440b      	add	r3, r1
 8002d34:	2200      	movs	r2, #0
 8002d36:	601a      	str	r2, [r3, #0]
 8002d38:	79fa      	ldrb	r2, [r7, #7]
 8002d3a:	4917      	ldr	r1, [pc, #92]	@ (8002d98 <TimerStop+0x9c>)
 8002d3c:	4613      	mov	r3, r2
 8002d3e:	005b      	lsls	r3, r3, #1
 8002d40:	4413      	add	r3, r2
 8002d42:	00db      	lsls	r3, r3, #3
 8002d44:	440b      	add	r3, r1
 8002d46:	3310      	adds	r3, #16
 8002d48:	2200      	movs	r2, #0
 8002d4a:	601a      	str	r2, [r3, #0]
 8002d4c:	79fa      	ldrb	r2, [r7, #7]
 8002d4e:	4912      	ldr	r1, [pc, #72]	@ (8002d98 <TimerStop+0x9c>)
 8002d50:	4613      	mov	r3, r2
 8002d52:	005b      	lsls	r3, r3, #1
 8002d54:	4413      	add	r3, r2
 8002d56:	00db      	lsls	r3, r3, #3
 8002d58:	440b      	add	r3, r1
 8002d5a:	330c      	adds	r3, #12
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	701a      	strb	r2, [r3, #0]
 8002d60:	79fa      	ldrb	r2, [r7, #7]
 8002d62:	490d      	ldr	r1, [pc, #52]	@ (8002d98 <TimerStop+0x9c>)
 8002d64:	4613      	mov	r3, r2
 8002d66:	005b      	lsls	r3, r3, #1
 8002d68:	4413      	add	r3, r2
 8002d6a:	00db      	lsls	r3, r3, #3
 8002d6c:	440b      	add	r3, r1
 8002d6e:	3308      	adds	r3, #8
 8002d70:	2200      	movs	r2, #0
 8002d72:	601a      	str	r2, [r3, #0]
 8002d74:	79fa      	ldrb	r2, [r7, #7]
 8002d76:	4908      	ldr	r1, [pc, #32]	@ (8002d98 <TimerStop+0x9c>)
 8002d78:	4613      	mov	r3, r2
 8002d7a:	005b      	lsls	r3, r3, #1
 8002d7c:	4413      	add	r3, r2
 8002d7e:	00db      	lsls	r3, r3, #3
 8002d80:	440b      	add	r3, r1
 8002d82:	3304      	adds	r3, #4
 8002d84:	2200      	movs	r2, #0
 8002d86:	601a      	str	r2, [r3, #0]
 8002d88:	2301      	movs	r3, #1
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	370c      	adds	r7, #12
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d94:	4770      	bx	lr
 8002d96:	bf00      	nop
 8002d98:	200001ec 	.word	0x200001ec

08002d9c <GetMilSecTick>:
 8002d9c:	b480      	push	{r7}
 8002d9e:	af00      	add	r7, sp, #0
 8002da0:	4b03      	ldr	r3, [pc, #12]	@ (8002db0 <GetMilSecTick+0x14>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4618      	mov	r0, r3
 8002da6:	46bd      	mov	sp, r7
 8002da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dac:	4770      	bx	lr
 8002dae:	bf00      	nop
 8002db0:	2000036c 	.word	0x2000036c

08002db4 <processTimerScheduler>:
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b084      	sub	sp, #16
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	2300      	movs	r3, #0
 8002dbc:	73fb      	strb	r3, [r7, #15]
 8002dbe:	e068      	b.n	8002e92 <processTimerScheduler+0xde>
 8002dc0:	7bfa      	ldrb	r2, [r7, #15]
 8002dc2:	4937      	ldr	r1, [pc, #220]	@ (8002ea0 <processTimerScheduler+0xec>)
 8002dc4:	4613      	mov	r3, r2
 8002dc6:	005b      	lsls	r3, r3, #1
 8002dc8:	4413      	add	r3, r2
 8002dca:	00db      	lsls	r3, r3, #3
 8002dcc:	440b      	add	r3, r1
 8002dce:	3310      	adds	r3, #16
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d05a      	beq.n	8002e8c <processTimerScheduler+0xd8>
 8002dd6:	7bfb      	ldrb	r3, [r7, #15]
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f000 f863 	bl	8002ea4 <TimeExpired>
 8002dde:	4603      	mov	r3, r0
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d053      	beq.n	8002e8c <processTimerScheduler+0xd8>
 8002de4:	7bfa      	ldrb	r2, [r7, #15]
 8002de6:	492e      	ldr	r1, [pc, #184]	@ (8002ea0 <processTimerScheduler+0xec>)
 8002de8:	4613      	mov	r3, r2
 8002dea:	005b      	lsls	r3, r3, #1
 8002dec:	4413      	add	r3, r2
 8002dee:	00db      	lsls	r3, r3, #3
 8002df0:	440b      	add	r3, r1
 8002df2:	3310      	adds	r3, #16
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	60bb      	str	r3, [r7, #8]
 8002df8:	7bfa      	ldrb	r2, [r7, #15]
 8002dfa:	4929      	ldr	r1, [pc, #164]	@ (8002ea0 <processTimerScheduler+0xec>)
 8002dfc:	4613      	mov	r3, r2
 8002dfe:	005b      	lsls	r3, r3, #1
 8002e00:	4413      	add	r3, r2
 8002e02:	00db      	lsls	r3, r3, #3
 8002e04:	440b      	add	r3, r1
 8002e06:	3314      	adds	r3, #20
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	607b      	str	r3, [r7, #4]
 8002e0c:	7bfa      	ldrb	r2, [r7, #15]
 8002e0e:	4924      	ldr	r1, [pc, #144]	@ (8002ea0 <processTimerScheduler+0xec>)
 8002e10:	4613      	mov	r3, r2
 8002e12:	005b      	lsls	r3, r3, #1
 8002e14:	4413      	add	r3, r2
 8002e16:	00db      	lsls	r3, r3, #3
 8002e18:	440b      	add	r3, r1
 8002e1a:	330c      	adds	r3, #12
 8002e1c:	781b      	ldrb	r3, [r3, #0]
 8002e1e:	b2db      	uxtb	r3, r3
 8002e20:	2bff      	cmp	r3, #255	@ 0xff
 8002e22:	d020      	beq.n	8002e66 <processTimerScheduler+0xb2>
 8002e24:	7bfa      	ldrb	r2, [r7, #15]
 8002e26:	491e      	ldr	r1, [pc, #120]	@ (8002ea0 <processTimerScheduler+0xec>)
 8002e28:	4613      	mov	r3, r2
 8002e2a:	005b      	lsls	r3, r3, #1
 8002e2c:	4413      	add	r3, r2
 8002e2e:	00db      	lsls	r3, r3, #3
 8002e30:	440b      	add	r3, r1
 8002e32:	330c      	adds	r3, #12
 8002e34:	781b      	ldrb	r3, [r3, #0]
 8002e36:	b2db      	uxtb	r3, r3
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d014      	beq.n	8002e66 <processTimerScheduler+0xb2>
 8002e3c:	7bfa      	ldrb	r2, [r7, #15]
 8002e3e:	4918      	ldr	r1, [pc, #96]	@ (8002ea0 <processTimerScheduler+0xec>)
 8002e40:	4613      	mov	r3, r2
 8002e42:	005b      	lsls	r3, r3, #1
 8002e44:	4413      	add	r3, r2
 8002e46:	00db      	lsls	r3, r3, #3
 8002e48:	440b      	add	r3, r1
 8002e4a:	330c      	adds	r3, #12
 8002e4c:	781b      	ldrb	r3, [r3, #0]
 8002e4e:	b2db      	uxtb	r3, r3
 8002e50:	3b01      	subs	r3, #1
 8002e52:	b2d8      	uxtb	r0, r3
 8002e54:	4912      	ldr	r1, [pc, #72]	@ (8002ea0 <processTimerScheduler+0xec>)
 8002e56:	4613      	mov	r3, r2
 8002e58:	005b      	lsls	r3, r3, #1
 8002e5a:	4413      	add	r3, r2
 8002e5c:	00db      	lsls	r3, r3, #3
 8002e5e:	440b      	add	r3, r1
 8002e60:	330c      	adds	r3, #12
 8002e62:	4602      	mov	r2, r0
 8002e64:	701a      	strb	r2, [r3, #0]
 8002e66:	7bfa      	ldrb	r2, [r7, #15]
 8002e68:	490d      	ldr	r1, [pc, #52]	@ (8002ea0 <processTimerScheduler+0xec>)
 8002e6a:	4613      	mov	r3, r2
 8002e6c:	005b      	lsls	r3, r3, #1
 8002e6e:	4413      	add	r3, r2
 8002e70:	00db      	lsls	r3, r3, #3
 8002e72:	440b      	add	r3, r1
 8002e74:	330c      	adds	r3, #12
 8002e76:	781b      	ldrb	r3, [r3, #0]
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d103      	bne.n	8002e86 <processTimerScheduler+0xd2>
 8002e7e:	7bfb      	ldrb	r3, [r7, #15]
 8002e80:	4618      	mov	r0, r3
 8002e82:	f7ff ff3b 	bl	8002cfc <TimerStop>
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	6878      	ldr	r0, [r7, #4]
 8002e8a:	4798      	blx	r3
 8002e8c:	7bfb      	ldrb	r3, [r7, #15]
 8002e8e:	3301      	adds	r3, #1
 8002e90:	73fb      	strb	r3, [r7, #15]
 8002e92:	7bfb      	ldrb	r3, [r7, #15]
 8002e94:	2b0f      	cmp	r3, #15
 8002e96:	d993      	bls.n	8002dc0 <processTimerScheduler+0xc>
 8002e98:	bf00      	nop
 8002e9a:	3710      	adds	r7, #16
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}
 8002ea0:	200001ec 	.word	0x200001ec

08002ea4 <TimeExpired>:
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b084      	sub	sp, #16
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	4603      	mov	r3, r0
 8002eac:	71fb      	strb	r3, [r7, #7]
 8002eae:	2300      	movs	r3, #0
 8002eb0:	60fb      	str	r3, [r7, #12]
 8002eb2:	b672      	cpsid	i
 8002eb4:	f7ff ff72 	bl	8002d9c <GetMilSecTick>
 8002eb8:	60b8      	str	r0, [r7, #8]
 8002eba:	79fb      	ldrb	r3, [r7, #7]
 8002ebc:	2b0f      	cmp	r3, #15
 8002ebe:	d80a      	bhi.n	8002ed6 <TimeExpired+0x32>
 8002ec0:	79fa      	ldrb	r2, [r7, #7]
 8002ec2:	492a      	ldr	r1, [pc, #168]	@ (8002f6c <TimeExpired+0xc8>)
 8002ec4:	4613      	mov	r3, r2
 8002ec6:	005b      	lsls	r3, r3, #1
 8002ec8:	4413      	add	r3, r2
 8002eca:	00db      	lsls	r3, r3, #3
 8002ecc:	440b      	add	r3, r1
 8002ece:	3310      	adds	r3, #16
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d102      	bne.n	8002edc <TimeExpired+0x38>
 8002ed6:	b662      	cpsie	i
 8002ed8:	2300      	movs	r3, #0
 8002eda:	e042      	b.n	8002f62 <TimeExpired+0xbe>
 8002edc:	79fa      	ldrb	r2, [r7, #7]
 8002ede:	4923      	ldr	r1, [pc, #140]	@ (8002f6c <TimeExpired+0xc8>)
 8002ee0:	4613      	mov	r3, r2
 8002ee2:	005b      	lsls	r3, r3, #1
 8002ee4:	4413      	add	r3, r2
 8002ee6:	00db      	lsls	r3, r3, #3
 8002ee8:	440b      	add	r3, r1
 8002eea:	3304      	adds	r3, #4
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	68ba      	ldr	r2, [r7, #8]
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	d30c      	bcc.n	8002f0e <TimeExpired+0x6a>
 8002ef4:	79fa      	ldrb	r2, [r7, #7]
 8002ef6:	491d      	ldr	r1, [pc, #116]	@ (8002f6c <TimeExpired+0xc8>)
 8002ef8:	4613      	mov	r3, r2
 8002efa:	005b      	lsls	r3, r3, #1
 8002efc:	4413      	add	r3, r2
 8002efe:	00db      	lsls	r3, r3, #3
 8002f00:	440b      	add	r3, r1
 8002f02:	3304      	adds	r3, #4
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	68ba      	ldr	r2, [r7, #8]
 8002f08:	1ad3      	subs	r3, r2, r3
 8002f0a:	60fb      	str	r3, [r7, #12]
 8002f0c:	e00e      	b.n	8002f2c <TimeExpired+0x88>
 8002f0e:	79fa      	ldrb	r2, [r7, #7]
 8002f10:	4916      	ldr	r1, [pc, #88]	@ (8002f6c <TimeExpired+0xc8>)
 8002f12:	4613      	mov	r3, r2
 8002f14:	005b      	lsls	r3, r3, #1
 8002f16:	4413      	add	r3, r2
 8002f18:	00db      	lsls	r3, r3, #3
 8002f1a:	440b      	add	r3, r1
 8002f1c:	3304      	adds	r3, #4
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	1ad3      	subs	r3, r2, r3
 8002f24:	60fb      	str	r3, [r7, #12]
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	43db      	mvns	r3, r3
 8002f2a:	60fb      	str	r3, [r7, #12]
 8002f2c:	79fa      	ldrb	r2, [r7, #7]
 8002f2e:	490f      	ldr	r1, [pc, #60]	@ (8002f6c <TimeExpired+0xc8>)
 8002f30:	4613      	mov	r3, r2
 8002f32:	005b      	lsls	r3, r3, #1
 8002f34:	4413      	add	r3, r2
 8002f36:	00db      	lsls	r3, r3, #3
 8002f38:	440b      	add	r3, r1
 8002f3a:	3308      	adds	r3, #8
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	68fa      	ldr	r2, [r7, #12]
 8002f40:	429a      	cmp	r2, r3
 8002f42:	d202      	bcs.n	8002f4a <TimeExpired+0xa6>
 8002f44:	b662      	cpsie	i
 8002f46:	2300      	movs	r3, #0
 8002f48:	e00b      	b.n	8002f62 <TimeExpired+0xbe>
 8002f4a:	79fa      	ldrb	r2, [r7, #7]
 8002f4c:	4907      	ldr	r1, [pc, #28]	@ (8002f6c <TimeExpired+0xc8>)
 8002f4e:	4613      	mov	r3, r2
 8002f50:	005b      	lsls	r3, r3, #1
 8002f52:	4413      	add	r3, r2
 8002f54:	00db      	lsls	r3, r3, #3
 8002f56:	440b      	add	r3, r1
 8002f58:	3304      	adds	r3, #4
 8002f5a:	68ba      	ldr	r2, [r7, #8]
 8002f5c:	601a      	str	r2, [r3, #0]
 8002f5e:	b662      	cpsie	i
 8002f60:	2301      	movs	r3, #1
 8002f62:	4618      	mov	r0, r3
 8002f64:	3710      	adds	r7, #16
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}
 8002f6a:	bf00      	nop
 8002f6c:	200001ec 	.word	0x200001ec

08002f70 <SysTick_Handler>:
 8002f70:	b480      	push	{r7}
 8002f72:	af00      	add	r7, sp, #0
 8002f74:	4b04      	ldr	r3, [pc, #16]	@ (8002f88 <SysTick_Handler+0x18>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	3301      	adds	r3, #1
 8002f7a:	4a03      	ldr	r2, [pc, #12]	@ (8002f88 <SysTick_Handler+0x18>)
 8002f7c:	6013      	str	r3, [r2, #0]
 8002f7e:	bf00      	nop
 8002f80:	46bd      	mov	sp, r7
 8002f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f86:	4770      	bx	lr
 8002f88:	2000036c 	.word	0x2000036c

08002f8c <TemHumSensor_Init>:
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	af00      	add	r7, sp, #0
 8002f90:	f000 f802 	bl	8002f98 <i2c_config>
 8002f94:	bf00      	nop
 8002f96:	bd80      	pop	{r7, pc}

08002f98 <i2c_config>:
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b086      	sub	sp, #24
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	2101      	movs	r1, #1
 8002fa0:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8002fa4:	f7fe ff4e 	bl	8001e44 <RCC_APB1PeriphClockCmd>
 8002fa8:	4b1d      	ldr	r3, [pc, #116]	@ (8003020 <i2c_config+0x88>)
 8002faa:	60bb      	str	r3, [r7, #8]
 8002fac:	2300      	movs	r3, #0
 8002fae:	81bb      	strh	r3, [r7, #12]
 8002fb0:	f64b 73ff 	movw	r3, #49151	@ 0xbfff
 8002fb4:	81fb      	strh	r3, [r7, #14]
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	823b      	strh	r3, [r7, #16]
 8002fba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002fbe:	827b      	strh	r3, [r7, #18]
 8002fc0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002fc4:	82bb      	strh	r3, [r7, #20]
 8002fc6:	f107 0308 	add.w	r3, r7, #8
 8002fca:	4619      	mov	r1, r3
 8002fcc:	4815      	ldr	r0, [pc, #84]	@ (8003024 <i2c_config+0x8c>)
 8002fce:	f7ff fabb 	bl	8002548 <I2C_Init>
 8002fd2:	2101      	movs	r1, #1
 8002fd4:	4813      	ldr	r0, [pc, #76]	@ (8003024 <i2c_config+0x8c>)
 8002fd6:	f7ff fb79 	bl	80026cc <I2C_Cmd>
 8002fda:	2101      	movs	r1, #1
 8002fdc:	2002      	movs	r0, #2
 8002fde:	f7fe ff11 	bl	8001e04 <RCC_AHB1PeriphClockCmd>
 8002fe2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002fe6:	603b      	str	r3, [r7, #0]
 8002fe8:	2302      	movs	r3, #2
 8002fea:	713b      	strb	r3, [r7, #4]
 8002fec:	2302      	movs	r3, #2
 8002fee:	717b      	strb	r3, [r7, #5]
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	71bb      	strb	r3, [r7, #6]
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	71fb      	strb	r3, [r7, #7]
 8002ff8:	463b      	mov	r3, r7
 8002ffa:	4619      	mov	r1, r3
 8002ffc:	480a      	ldr	r0, [pc, #40]	@ (8003028 <i2c_config+0x90>)
 8002ffe:	f7fe fd63 	bl	8001ac8 <GPIO_Init>
 8003002:	2204      	movs	r2, #4
 8003004:	2108      	movs	r1, #8
 8003006:	4808      	ldr	r0, [pc, #32]	@ (8003028 <i2c_config+0x90>)
 8003008:	f7fe fe05 	bl	8001c16 <GPIO_PinAFConfig>
 800300c:	2204      	movs	r2, #4
 800300e:	2109      	movs	r1, #9
 8003010:	4805      	ldr	r0, [pc, #20]	@ (8003028 <i2c_config+0x90>)
 8003012:	f7fe fe00 	bl	8001c16 <GPIO_PinAFConfig>
 8003016:	bf00      	nop
 8003018:	3718      	adds	r7, #24
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}
 800301e:	bf00      	nop
 8003020:	00061a80 	.word	0x00061a80
 8003024:	40005400 	.word	0x40005400
 8003028:	40020400 	.word	0x40020400

0800302c <USART2_IRQHandler>:
 800302c:	b580      	push	{r7, lr}
 800302e:	b082      	sub	sp, #8
 8003030:	af00      	add	r7, sp, #0
 8003032:	b672      	cpsid	i
 8003034:	f240 5125 	movw	r1, #1317	@ 0x525
 8003038:	480e      	ldr	r0, [pc, #56]	@ (8003074 <USART2_IRQHandler+0x48>)
 800303a:	f001 fdfc 	bl	8004c36 <USART_GetITStatus>
 800303e:	4603      	mov	r3, r0
 8003040:	2b01      	cmp	r3, #1
 8003042:	d112      	bne.n	800306a <USART2_IRQHandler+0x3e>
 8003044:	4b0c      	ldr	r3, [pc, #48]	@ (8003078 <USART2_IRQHandler+0x4c>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	607b      	str	r3, [r7, #4]
 800304a:	480a      	ldr	r0, [pc, #40]	@ (8003074 <USART2_IRQHandler+0x48>)
 800304c:	f001 fde3 	bl	8004c16 <USART_ReceiveData>
 8003050:	4603      	mov	r3, r0
 8003052:	b2db      	uxtb	r3, r3
 8003054:	70fb      	strb	r3, [r7, #3]
 8003056:	1cfb      	adds	r3, r7, #3
 8003058:	4619      	mov	r1, r3
 800305a:	6878      	ldr	r0, [r7, #4]
 800305c:	f001 fd32 	bl	8004ac4 <bufEnDat>
 8003060:	f240 5125 	movw	r1, #1317	@ 0x525
 8003064:	4803      	ldr	r0, [pc, #12]	@ (8003074 <USART2_IRQHandler+0x48>)
 8003066:	f001 fe41 	bl	8004cec <USART_ClearITPendingBit>
 800306a:	b662      	cpsie	i
 800306c:	bf00      	nop
 800306e:	3708      	adds	r7, #8
 8003070:	46bd      	mov	sp, r7
 8003072:	bd80      	pop	{r7, pc}
 8003074:	40004400 	.word	0x40004400
 8003078:	20000370 	.word	0x20000370

0800307c <delayMicroseconds>:
 800307c:	b480      	push	{r7}
 800307e:	b083      	sub	sp, #12
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
 8003084:	bf00      	nop
 8003086:	370c      	adds	r7, #12
 8003088:	46bd      	mov	sp, r7
 800308a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308e:	4770      	bx	lr

08003090 <ucg_gpio_init>:
 8003090:	b580      	push	{r7, lr}
 8003092:	b082      	sub	sp, #8
 8003094:	af00      	add	r7, sp, #0
 8003096:	2101      	movs	r1, #1
 8003098:	2007      	movs	r0, #7
 800309a:	f7fe feb3 	bl	8001e04 <RCC_AHB1PeriphClockCmd>
 800309e:	2301      	movs	r3, #1
 80030a0:	713b      	strb	r3, [r7, #4]
 80030a2:	2303      	movs	r3, #3
 80030a4:	717b      	strb	r3, [r7, #5]
 80030a6:	2300      	movs	r3, #0
 80030a8:	71bb      	strb	r3, [r7, #6]
 80030aa:	2300      	movs	r3, #0
 80030ac:	71fb      	strb	r3, [r7, #7]
 80030ae:	f44f 7368 	mov.w	r3, #928	@ 0x3a0
 80030b2:	603b      	str	r3, [r7, #0]
 80030b4:	463b      	mov	r3, r7
 80030b6:	4619      	mov	r1, r3
 80030b8:	480a      	ldr	r0, [pc, #40]	@ (80030e4 <ucg_gpio_init+0x54>)
 80030ba:	f7fe fd05 	bl	8001ac8 <GPIO_Init>
 80030be:	f44f 6388 	mov.w	r3, #1088	@ 0x440
 80030c2:	603b      	str	r3, [r7, #0]
 80030c4:	463b      	mov	r3, r7
 80030c6:	4619      	mov	r1, r3
 80030c8:	4807      	ldr	r0, [pc, #28]	@ (80030e8 <ucg_gpio_init+0x58>)
 80030ca:	f7fe fcfd 	bl	8001ac8 <GPIO_Init>
 80030ce:	2380      	movs	r3, #128	@ 0x80
 80030d0:	603b      	str	r3, [r7, #0]
 80030d2:	463b      	mov	r3, r7
 80030d4:	4619      	mov	r1, r3
 80030d6:	4805      	ldr	r0, [pc, #20]	@ (80030ec <ucg_gpio_init+0x5c>)
 80030d8:	f7fe fcf6 	bl	8001ac8 <GPIO_Init>
 80030dc:	bf00      	nop
 80030de:	3708      	adds	r7, #8
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd80      	pop	{r7, pc}
 80030e4:	40020000 	.word	0x40020000
 80030e8:	40020400 	.word	0x40020400
 80030ec:	40020800 	.word	0x40020800

080030f0 <ucg_com_arduino_send_generic_SW_SPI>:
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b084      	sub	sp, #16
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
 80030f8:	460b      	mov	r3, r1
 80030fa:	70fb      	strb	r3, [r7, #3]
 80030fc:	2308      	movs	r3, #8
 80030fe:	73fb      	strb	r3, [r7, #15]
 8003100:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003104:	2b00      	cmp	r3, #0
 8003106:	da05      	bge.n	8003114 <ucg_com_arduino_send_generic_SW_SPI+0x24>
 8003108:	2201      	movs	r2, #1
 800310a:	2180      	movs	r1, #128	@ 0x80
 800310c:	4814      	ldr	r0, [pc, #80]	@ (8003160 <ucg_com_arduino_send_generic_SW_SPI+0x70>)
 800310e:	f7fe fd6a 	bl	8001be6 <GPIO_WriteBit>
 8003112:	e004      	b.n	800311e <ucg_com_arduino_send_generic_SW_SPI+0x2e>
 8003114:	2200      	movs	r2, #0
 8003116:	2180      	movs	r1, #128	@ 0x80
 8003118:	4811      	ldr	r0, [pc, #68]	@ (8003160 <ucg_com_arduino_send_generic_SW_SPI+0x70>)
 800311a:	f7fe fd64 	bl	8001be6 <GPIO_WriteBit>
 800311e:	2001      	movs	r0, #1
 8003120:	f7ff ffac 	bl	800307c <delayMicroseconds>
 8003124:	2201      	movs	r2, #1
 8003126:	2120      	movs	r1, #32
 8003128:	480d      	ldr	r0, [pc, #52]	@ (8003160 <ucg_com_arduino_send_generic_SW_SPI+0x70>)
 800312a:	f7fe fd5c 	bl	8001be6 <GPIO_WriteBit>
 800312e:	2001      	movs	r0, #1
 8003130:	f7ff ffa4 	bl	800307c <delayMicroseconds>
 8003134:	7bfb      	ldrb	r3, [r7, #15]
 8003136:	3b01      	subs	r3, #1
 8003138:	73fb      	strb	r3, [r7, #15]
 800313a:	2200      	movs	r2, #0
 800313c:	2120      	movs	r1, #32
 800313e:	4808      	ldr	r0, [pc, #32]	@ (8003160 <ucg_com_arduino_send_generic_SW_SPI+0x70>)
 8003140:	f7fe fd51 	bl	8001be6 <GPIO_WriteBit>
 8003144:	2001      	movs	r0, #1
 8003146:	f7ff ff99 	bl	800307c <delayMicroseconds>
 800314a:	78fb      	ldrb	r3, [r7, #3]
 800314c:	005b      	lsls	r3, r3, #1
 800314e:	70fb      	strb	r3, [r7, #3]
 8003150:	7bfb      	ldrb	r3, [r7, #15]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d1d4      	bne.n	8003100 <ucg_com_arduino_send_generic_SW_SPI+0x10>
 8003156:	bf00      	nop
 8003158:	3710      	adds	r7, #16
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}
 800315e:	bf00      	nop
 8003160:	40020000 	.word	0x40020000

08003164 <ucg_com_arduino_generic_SW_SPI>:
 8003164:	b580      	push	{r7, lr}
 8003166:	b084      	sub	sp, #16
 8003168:	af00      	add	r7, sp, #0
 800316a:	60f8      	str	r0, [r7, #12]
 800316c:	607b      	str	r3, [r7, #4]
 800316e:	460b      	mov	r3, r1
 8003170:	817b      	strh	r3, [r7, #10]
 8003172:	4613      	mov	r3, r2
 8003174:	813b      	strh	r3, [r7, #8]
 8003176:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800317a:	3b0a      	subs	r3, #10
 800317c:	2b0b      	cmp	r3, #11
 800317e:	f200 80dc 	bhi.w	800333a <ucg_com_arduino_generic_SW_SPI+0x1d6>
 8003182:	a201      	add	r2, pc, #4	@ (adr r2, 8003188 <ucg_com_arduino_generic_SW_SPI+0x24>)
 8003184:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003188:	080031b9 	.word	0x080031b9
 800318c:	0800333b 	.word	0x0800333b
 8003190:	0800320b 	.word	0x0800320b
 8003194:	08003215 	.word	0x08003215
 8003198:	08003225 	.word	0x08003225
 800319c:	08003235 	.word	0x08003235
 80031a0:	08003247 	.word	0x08003247
 80031a4:	08003267 	.word	0x08003267
 80031a8:	0800328f 	.word	0x0800328f
 80031ac:	080032c5 	.word	0x080032c5
 80031b0:	080032e3 	.word	0x080032e3
 80031b4:	08003333 	.word	0x08003333
 80031b8:	f7ff ff6a 	bl	8003090 <ucg_gpio_init>
 80031bc:	2201      	movs	r2, #1
 80031be:	2180      	movs	r1, #128	@ 0x80
 80031c0:	4860      	ldr	r0, [pc, #384]	@ (8003344 <ucg_com_arduino_generic_SW_SPI+0x1e0>)
 80031c2:	f7fe fd10 	bl	8001be6 <GPIO_WriteBit>
 80031c6:	2201      	movs	r2, #1
 80031c8:	2140      	movs	r1, #64	@ 0x40
 80031ca:	485f      	ldr	r0, [pc, #380]	@ (8003348 <ucg_com_arduino_generic_SW_SPI+0x1e4>)
 80031cc:	f7fe fd0b 	bl	8001be6 <GPIO_WriteBit>
 80031d0:	2201      	movs	r2, #1
 80031d2:	2180      	movs	r1, #128	@ 0x80
 80031d4:	485d      	ldr	r0, [pc, #372]	@ (800334c <ucg_com_arduino_generic_SW_SPI+0x1e8>)
 80031d6:	f7fe fd06 	bl	8001be6 <GPIO_WriteBit>
 80031da:	2201      	movs	r2, #1
 80031dc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80031e0:	4858      	ldr	r0, [pc, #352]	@ (8003344 <ucg_com_arduino_generic_SW_SPI+0x1e0>)
 80031e2:	f7fe fd00 	bl	8001be6 <GPIO_WriteBit>
 80031e6:	2200      	movs	r2, #0
 80031e8:	2120      	movs	r1, #32
 80031ea:	4856      	ldr	r0, [pc, #344]	@ (8003344 <ucg_com_arduino_generic_SW_SPI+0x1e0>)
 80031ec:	f7fe fcfb 	bl	8001be6 <GPIO_WriteBit>
 80031f0:	2201      	movs	r2, #1
 80031f2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80031f6:	4854      	ldr	r0, [pc, #336]	@ (8003348 <ucg_com_arduino_generic_SW_SPI+0x1e4>)
 80031f8:	f7fe fcf5 	bl	8001be6 <GPIO_WriteBit>
 80031fc:	2201      	movs	r2, #1
 80031fe:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003202:	4850      	ldr	r0, [pc, #320]	@ (8003344 <ucg_com_arduino_generic_SW_SPI+0x1e0>)
 8003204:	f7fe fcef 	bl	8001be6 <GPIO_WriteBit>
 8003208:	e097      	b.n	800333a <ucg_com_arduino_generic_SW_SPI+0x1d6>
 800320a:	893b      	ldrh	r3, [r7, #8]
 800320c:	4618      	mov	r0, r3
 800320e:	f7ff ff35 	bl	800307c <delayMicroseconds>
 8003212:	e092      	b.n	800333a <ucg_com_arduino_generic_SW_SPI+0x1d6>
 8003214:	893b      	ldrh	r3, [r7, #8]
 8003216:	b2db      	uxtb	r3, r3
 8003218:	461a      	mov	r2, r3
 800321a:	2180      	movs	r1, #128	@ 0x80
 800321c:	484b      	ldr	r0, [pc, #300]	@ (800334c <ucg_com_arduino_generic_SW_SPI+0x1e8>)
 800321e:	f7fe fce2 	bl	8001be6 <GPIO_WriteBit>
 8003222:	e08a      	b.n	800333a <ucg_com_arduino_generic_SW_SPI+0x1d6>
 8003224:	893b      	ldrh	r3, [r7, #8]
 8003226:	b2db      	uxtb	r3, r3
 8003228:	461a      	mov	r2, r3
 800322a:	2140      	movs	r1, #64	@ 0x40
 800322c:	4846      	ldr	r0, [pc, #280]	@ (8003348 <ucg_com_arduino_generic_SW_SPI+0x1e4>)
 800322e:	f7fe fcda 	bl	8001be6 <GPIO_WriteBit>
 8003232:	e082      	b.n	800333a <ucg_com_arduino_generic_SW_SPI+0x1d6>
 8003234:	893b      	ldrh	r3, [r7, #8]
 8003236:	b2db      	uxtb	r3, r3
 8003238:	461a      	mov	r2, r3
 800323a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800323e:	4841      	ldr	r0, [pc, #260]	@ (8003344 <ucg_com_arduino_generic_SW_SPI+0x1e0>)
 8003240:	f7fe fcd1 	bl	8001be6 <GPIO_WriteBit>
 8003244:	e079      	b.n	800333a <ucg_com_arduino_generic_SW_SPI+0x1d6>
 8003246:	893b      	ldrh	r3, [r7, #8]
 8003248:	b2db      	uxtb	r3, r3
 800324a:	4619      	mov	r1, r3
 800324c:	68f8      	ldr	r0, [r7, #12]
 800324e:	f7ff ff4f 	bl	80030f0 <ucg_com_arduino_send_generic_SW_SPI>
 8003252:	e072      	b.n	800333a <ucg_com_arduino_generic_SW_SPI+0x1d6>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	781b      	ldrb	r3, [r3, #0]
 8003258:	4619      	mov	r1, r3
 800325a:	68f8      	ldr	r0, [r7, #12]
 800325c:	f7ff ff48 	bl	80030f0 <ucg_com_arduino_send_generic_SW_SPI>
 8003260:	893b      	ldrh	r3, [r7, #8]
 8003262:	3b01      	subs	r3, #1
 8003264:	813b      	strh	r3, [r7, #8]
 8003266:	893b      	ldrh	r3, [r7, #8]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d1f3      	bne.n	8003254 <ucg_com_arduino_generic_SW_SPI+0xf0>
 800326c:	e065      	b.n	800333a <ucg_com_arduino_generic_SW_SPI+0x1d6>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	781b      	ldrb	r3, [r3, #0]
 8003272:	4619      	mov	r1, r3
 8003274:	68f8      	ldr	r0, [r7, #12]
 8003276:	f7ff ff3b 	bl	80030f0 <ucg_com_arduino_send_generic_SW_SPI>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	3301      	adds	r3, #1
 800327e:	781b      	ldrb	r3, [r3, #0]
 8003280:	4619      	mov	r1, r3
 8003282:	68f8      	ldr	r0, [r7, #12]
 8003284:	f7ff ff34 	bl	80030f0 <ucg_com_arduino_send_generic_SW_SPI>
 8003288:	893b      	ldrh	r3, [r7, #8]
 800328a:	3b01      	subs	r3, #1
 800328c:	813b      	strh	r3, [r7, #8]
 800328e:	893b      	ldrh	r3, [r7, #8]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d1ec      	bne.n	800326e <ucg_com_arduino_generic_SW_SPI+0x10a>
 8003294:	e051      	b.n	800333a <ucg_com_arduino_generic_SW_SPI+0x1d6>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	781b      	ldrb	r3, [r3, #0]
 800329a:	4619      	mov	r1, r3
 800329c:	68f8      	ldr	r0, [r7, #12]
 800329e:	f7ff ff27 	bl	80030f0 <ucg_com_arduino_send_generic_SW_SPI>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	3301      	adds	r3, #1
 80032a6:	781b      	ldrb	r3, [r3, #0]
 80032a8:	4619      	mov	r1, r3
 80032aa:	68f8      	ldr	r0, [r7, #12]
 80032ac:	f7ff ff20 	bl	80030f0 <ucg_com_arduino_send_generic_SW_SPI>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	3302      	adds	r3, #2
 80032b4:	781b      	ldrb	r3, [r3, #0]
 80032b6:	4619      	mov	r1, r3
 80032b8:	68f8      	ldr	r0, [r7, #12]
 80032ba:	f7ff ff19 	bl	80030f0 <ucg_com_arduino_send_generic_SW_SPI>
 80032be:	893b      	ldrh	r3, [r7, #8]
 80032c0:	3b01      	subs	r3, #1
 80032c2:	813b      	strh	r3, [r7, #8]
 80032c4:	893b      	ldrh	r3, [r7, #8]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d1e5      	bne.n	8003296 <ucg_com_arduino_generic_SW_SPI+0x132>
 80032ca:	e036      	b.n	800333a <ucg_com_arduino_generic_SW_SPI+0x1d6>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	1c5a      	adds	r2, r3, #1
 80032d0:	607a      	str	r2, [r7, #4]
 80032d2:	781b      	ldrb	r3, [r3, #0]
 80032d4:	4619      	mov	r1, r3
 80032d6:	68f8      	ldr	r0, [r7, #12]
 80032d8:	f7ff ff0a 	bl	80030f0 <ucg_com_arduino_send_generic_SW_SPI>
 80032dc:	893b      	ldrh	r3, [r7, #8]
 80032de:	3b01      	subs	r3, #1
 80032e0:	813b      	strh	r3, [r7, #8]
 80032e2:	893b      	ldrh	r3, [r7, #8]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d1f1      	bne.n	80032cc <ucg_com_arduino_generic_SW_SPI+0x168>
 80032e8:	e027      	b.n	800333a <ucg_com_arduino_generic_SW_SPI+0x1d6>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	781b      	ldrb	r3, [r3, #0]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d010      	beq.n	8003314 <ucg_com_arduino_generic_SW_SPI+0x1b0>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	781b      	ldrb	r3, [r3, #0]
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	d106      	bne.n	8003308 <ucg_com_arduino_generic_SW_SPI+0x1a4>
 80032fa:	2200      	movs	r2, #0
 80032fc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003300:	4810      	ldr	r0, [pc, #64]	@ (8003344 <ucg_com_arduino_generic_SW_SPI+0x1e0>)
 8003302:	f7fe fc70 	bl	8001be6 <GPIO_WriteBit>
 8003306:	e005      	b.n	8003314 <ucg_com_arduino_generic_SW_SPI+0x1b0>
 8003308:	2201      	movs	r2, #1
 800330a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800330e:	480d      	ldr	r0, [pc, #52]	@ (8003344 <ucg_com_arduino_generic_SW_SPI+0x1e0>)
 8003310:	f7fe fc69 	bl	8001be6 <GPIO_WriteBit>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	3301      	adds	r3, #1
 8003318:	607b      	str	r3, [r7, #4]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	781b      	ldrb	r3, [r3, #0]
 800331e:	4619      	mov	r1, r3
 8003320:	68f8      	ldr	r0, [r7, #12]
 8003322:	f7ff fee5 	bl	80030f0 <ucg_com_arduino_send_generic_SW_SPI>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	3301      	adds	r3, #1
 800332a:	607b      	str	r3, [r7, #4]
 800332c:	893b      	ldrh	r3, [r7, #8]
 800332e:	3b01      	subs	r3, #1
 8003330:	813b      	strh	r3, [r7, #8]
 8003332:	893b      	ldrh	r3, [r7, #8]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d1d8      	bne.n	80032ea <ucg_com_arduino_generic_SW_SPI+0x186>
 8003338:	bf00      	nop
 800333a:	2301      	movs	r3, #1
 800333c:	4618      	mov	r0, r3
 800333e:	3710      	adds	r7, #16
 8003340:	46bd      	mov	sp, r7
 8003342:	bd80      	pop	{r7, pc}
 8003344:	40020000 	.word	0x40020000
 8003348:	40020400 	.word	0x40020400
 800334c:	40020800 	.word	0x40020800

08003350 <Ucglib4WireSWSPI_begin>:
 8003350:	b580      	push	{r7, lr}
 8003352:	b082      	sub	sp, #8
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
 8003358:	460b      	mov	r3, r1
 800335a:	70fb      	strb	r3, [r7, #3]
 800335c:	4b07      	ldr	r3, [pc, #28]	@ (800337c <Ucglib4WireSWSPI_begin+0x2c>)
 800335e:	4a08      	ldr	r2, [pc, #32]	@ (8003380 <Ucglib4WireSWSPI_begin+0x30>)
 8003360:	4908      	ldr	r1, [pc, #32]	@ (8003384 <Ucglib4WireSWSPI_begin+0x34>)
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	f001 f9a2 	bl	80046ac <ucg_Init>
 8003368:	78fb      	ldrb	r3, [r7, #3]
 800336a:	4619      	mov	r1, r3
 800336c:	6878      	ldr	r0, [r7, #4]
 800336e:	f000 ff86 	bl	800427e <ucg_SetFontMode>
 8003372:	bf00      	nop
 8003374:	3708      	adds	r7, #8
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}
 800337a:	bf00      	nop
 800337c:	08003165 	.word	0x08003165
 8003380:	080039bd 	.word	0x080039bd
 8003384:	08003ae5 	.word	0x08003ae5

08003388 <ucg_DrawBox>:
 8003388:	b580      	push	{r7, lr}
 800338a:	b084      	sub	sp, #16
 800338c:	af00      	add	r7, sp, #0
 800338e:	60f8      	str	r0, [r7, #12]
 8003390:	4608      	mov	r0, r1
 8003392:	4611      	mov	r1, r2
 8003394:	461a      	mov	r2, r3
 8003396:	4603      	mov	r3, r0
 8003398:	817b      	strh	r3, [r7, #10]
 800339a:	460b      	mov	r3, r1
 800339c:	813b      	strh	r3, [r7, #8]
 800339e:	4613      	mov	r3, r2
 80033a0:	80fb      	strh	r3, [r7, #6]
 80033a2:	e014      	b.n	80033ce <ucg_DrawBox+0x46>
 80033a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80033a8:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80033ac:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80033b0:	68f8      	ldr	r0, [r7, #12]
 80033b2:	f001 f9ed 	bl	8004790 <ucg_DrawHLine>
 80033b6:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80033ba:	b29b      	uxth	r3, r3
 80033bc:	3b01      	subs	r3, #1
 80033be:	b29b      	uxth	r3, r3
 80033c0:	833b      	strh	r3, [r7, #24]
 80033c2:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80033c6:	b29b      	uxth	r3, r3
 80033c8:	3301      	adds	r3, #1
 80033ca:	b29b      	uxth	r3, r3
 80033cc:	813b      	strh	r3, [r7, #8]
 80033ce:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	dce6      	bgt.n	80033a4 <ucg_DrawBox+0x1c>
 80033d6:	bf00      	nop
 80033d8:	3710      	adds	r7, #16
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}

080033de <ucg_ClearScreen>:
 80033de:	b580      	push	{r7, lr}
 80033e0:	b084      	sub	sp, #16
 80033e2:	af02      	add	r7, sp, #8
 80033e4:	6078      	str	r0, [r7, #4]
 80033e6:	2300      	movs	r3, #0
 80033e8:	9300      	str	r3, [sp, #0]
 80033ea:	2300      	movs	r3, #0
 80033ec:	2200      	movs	r2, #0
 80033ee:	2100      	movs	r1, #0
 80033f0:	6878      	ldr	r0, [r7, #4]
 80033f2:	f001 f9ec 	bl	80047ce <ucg_SetColor>
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	f000 fb3b 	bl	8003a72 <ucg_SetMaxClipRange>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003408:	9300      	str	r3, [sp, #0]
 800340a:	4613      	mov	r3, r2
 800340c:	2200      	movs	r2, #0
 800340e:	2100      	movs	r1, #0
 8003410:	6878      	ldr	r0, [r7, #4]
 8003412:	f7ff ffb9 	bl	8003388 <ucg_DrawBox>
 8003416:	23ff      	movs	r3, #255	@ 0xff
 8003418:	9300      	str	r3, [sp, #0]
 800341a:	23ff      	movs	r3, #255	@ 0xff
 800341c:	22ff      	movs	r2, #255	@ 0xff
 800341e:	2100      	movs	r1, #0
 8003420:	6878      	ldr	r0, [r7, #4]
 8003422:	f001 f9d4 	bl	80047ce <ucg_SetColor>
 8003426:	bf00      	nop
 8003428:	3708      	adds	r7, #8
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}

0800342e <ucg_ccs_init>:
 800342e:	b480      	push	{r7}
 8003430:	b083      	sub	sp, #12
 8003432:	af00      	add	r7, sp, #0
 8003434:	6078      	str	r0, [r7, #4]
 8003436:	4608      	mov	r0, r1
 8003438:	4611      	mov	r1, r2
 800343a:	461a      	mov	r2, r3
 800343c:	4603      	mov	r3, r0
 800343e:	70fb      	strb	r3, [r7, #3]
 8003440:	460b      	mov	r3, r1
 8003442:	70bb      	strb	r3, [r7, #2]
 8003444:	4613      	mov	r3, r2
 8003446:	803b      	strh	r3, [r7, #0]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	78fa      	ldrb	r2, [r7, #3]
 800344c:	705a      	strb	r2, [r3, #1]
 800344e:	78bb      	ldrb	r3, [r7, #2]
 8003450:	b29a      	uxth	r2, r3
 8003452:	78fb      	ldrb	r3, [r7, #3]
 8003454:	b29b      	uxth	r3, r3
 8003456:	1ad3      	subs	r3, r2, r3
 8003458:	b29b      	uxth	r3, r3
 800345a:	b21a      	sxth	r2, r3
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	809a      	strh	r2, [r3, #4]
 8003460:	883b      	ldrh	r3, [r7, #0]
 8003462:	3b01      	subs	r3, #1
 8003464:	b29b      	uxth	r3, r3
 8003466:	b21a      	sxth	r2, r3
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	811a      	strh	r2, [r3, #8]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2201      	movs	r2, #1
 8003470:	805a      	strh	r2, [r3, #2]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003478:	461a      	mov	r2, r3
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003480:	fb92 f3f3 	sdiv	r3, r2, r3
 8003484:	b21a      	sxth	r2, r3
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	80da      	strh	r2, [r3, #6]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003490:	2b00      	cmp	r3, #0
 8003492:	da0c      	bge.n	80034ae <ucg_ccs_init+0x80>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800349a:	b29b      	uxth	r3, r3
 800349c:	425b      	negs	r3, r3
 800349e:	b29b      	uxth	r3, r3
 80034a0:	b21a      	sxth	r2, r3
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	809a      	strh	r2, [r3, #4]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80034ac:	805a      	strh	r2, [r3, #2]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80034b4:	687a      	ldr	r2, [r7, #4]
 80034b6:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 80034ba:	fb93 f1f2 	sdiv	r1, r3, r2
 80034be:	fb02 f201 	mul.w	r2, r2, r1
 80034c2:	1a9b      	subs	r3, r3, r2
 80034c4:	b21a      	sxth	r2, r3
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	815a      	strh	r2, [r3, #10]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80034d0:	0fda      	lsrs	r2, r3, #31
 80034d2:	4413      	add	r3, r2
 80034d4:	105b      	asrs	r3, r3, #1
 80034d6:	b21a      	sxth	r2, r3
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	819a      	strh	r2, [r3, #12]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	78fa      	ldrb	r2, [r7, #3]
 80034e0:	701a      	strb	r2, [r3, #0]
 80034e2:	bf00      	nop
 80034e4:	370c      	adds	r7, #12
 80034e6:	46bd      	mov	sp, r7
 80034e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ec:	4770      	bx	lr

080034ee <ucg_ccs_step>:
 80034ee:	b480      	push	{r7}
 80034f0:	b083      	sub	sp, #12
 80034f2:	af00      	add	r7, sp, #0
 80034f4:	6078      	str	r0, [r7, #4]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	781a      	ldrb	r2, [r3, #0]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8003500:	b2db      	uxtb	r3, r3
 8003502:	4413      	add	r3, r2
 8003504:	b2da      	uxtb	r2, r3
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	701a      	strb	r2, [r3, #0]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8003510:	b29a      	uxth	r2, r3
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8003518:	b29b      	uxth	r3, r3
 800351a:	4413      	add	r3, r2
 800351c:	b29b      	uxth	r3, r3
 800351e:	b21a      	sxth	r2, r3
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	819a      	strh	r2, [r3, #12]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003530:	429a      	cmp	r2, r3
 8003532:	db16      	blt.n	8003562 <ucg_ccs_step+0x74>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	781a      	ldrb	r2, [r3, #0]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800353e:	b2db      	uxtb	r3, r3
 8003540:	4413      	add	r3, r2
 8003542:	b2da      	uxtb	r2, r3
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	701a      	strb	r2, [r3, #0]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800354e:	b29a      	uxth	r2, r3
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003556:	b29b      	uxth	r3, r3
 8003558:	1ad3      	subs	r3, r2, r3
 800355a:	b29b      	uxth	r3, r3
 800355c:	b21a      	sxth	r2, r3
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	819a      	strh	r2, [r3, #12]
 8003562:	bf00      	nop
 8003564:	370c      	adds	r7, #12
 8003566:	46bd      	mov	sp, r7
 8003568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356c:	4770      	bx	lr

0800356e <ucg_ccs_seek>:
 800356e:	b480      	push	{r7}
 8003570:	b085      	sub	sp, #20
 8003572:	af00      	add	r7, sp, #0
 8003574:	6078      	str	r0, [r7, #4]
 8003576:	460b      	mov	r3, r1
 8003578:	807b      	strh	r3, [r7, #2]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8003580:	b2da      	uxtb	r2, r3
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	701a      	strb	r2, [r3, #0]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	781a      	ldrb	r2, [r3, #0]
 800358a:	887b      	ldrh	r3, [r7, #2]
 800358c:	b2db      	uxtb	r3, r3
 800358e:	fb12 f303 	smulbb	r3, r2, r3
 8003592:	b2da      	uxtb	r2, r3
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	701a      	strb	r2, [r3, #0]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800359e:	b29a      	uxth	r2, r3
 80035a0:	887b      	ldrh	r3, [r7, #2]
 80035a2:	fb12 f303 	smulbb	r3, r2, r3
 80035a6:	b29a      	uxth	r2, r3
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80035ae:	0fd9      	lsrs	r1, r3, #31
 80035b0:	440b      	add	r3, r1
 80035b2:	105b      	asrs	r3, r3, #1
 80035b4:	b21b      	sxth	r3, r3
 80035b6:	b29b      	uxth	r3, r3
 80035b8:	4413      	add	r3, r2
 80035ba:	b29b      	uxth	r3, r3
 80035bc:	81fb      	strh	r3, [r7, #14]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	db0e      	blt.n	80035e6 <ucg_ccs_seek+0x78>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	781a      	ldrb	r2, [r3, #0]
 80035cc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80035d0:	6879      	ldr	r1, [r7, #4]
 80035d2:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 80035d6:	fb93 f3f1 	sdiv	r3, r3, r1
 80035da:	b2db      	uxtb	r3, r3
 80035dc:	4413      	add	r3, r2
 80035de:	b2da      	uxtb	r2, r3
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	701a      	strb	r2, [r3, #0]
 80035e4:	e00d      	b.n	8003602 <ucg_ccs_seek+0x94>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	781a      	ldrb	r2, [r3, #0]
 80035ea:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80035ee:	6879      	ldr	r1, [r7, #4]
 80035f0:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 80035f4:	fb93 f3f1 	sdiv	r3, r3, r1
 80035f8:	b2db      	uxtb	r3, r3
 80035fa:	1ad3      	subs	r3, r2, r3
 80035fc:	b2da      	uxtb	r2, r3
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	701a      	strb	r2, [r3, #0]
 8003602:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003606:	687a      	ldr	r2, [r7, #4]
 8003608:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 800360c:	fb93 f1f2 	sdiv	r1, r3, r2
 8003610:	fb02 f201 	mul.w	r2, r2, r1
 8003614:	1a9b      	subs	r3, r3, r2
 8003616:	b21a      	sxth	r2, r3
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	819a      	strh	r2, [r3, #12]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	781a      	ldrb	r2, [r3, #0]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	785b      	ldrb	r3, [r3, #1]
 8003624:	4413      	add	r3, r2
 8003626:	b2da      	uxtb	r2, r3
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	701a      	strb	r2, [r3, #0]
 800362c:	bf00      	nop
 800362e:	3714      	adds	r7, #20
 8003630:	46bd      	mov	sp, r7
 8003632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003636:	4770      	bx	lr

08003638 <ucg_dev_default_cb>:
 8003638:	b580      	push	{r7, lr}
 800363a:	b084      	sub	sp, #16
 800363c:	af00      	add	r7, sp, #0
 800363e:	60f8      	str	r0, [r7, #12]
 8003640:	460b      	mov	r3, r1
 8003642:	607a      	str	r2, [r7, #4]
 8003644:	817b      	strh	r3, [r7, #10]
 8003646:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800364a:	2b0c      	cmp	r3, #12
 800364c:	d00a      	beq.n	8003664 <ucg_dev_default_cb+0x2c>
 800364e:	2b17      	cmp	r3, #23
 8003650:	d10f      	bne.n	8003672 <ucg_dev_default_cb+0x3a>
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	68db      	ldr	r3, [r3, #12]
 8003656:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 800365a:	687a      	ldr	r2, [r7, #4]
 800365c:	68f8      	ldr	r0, [r7, #12]
 800365e:	4798      	blx	r3
 8003660:	4603      	mov	r3, r0
 8003662:	e007      	b.n	8003674 <ucg_dev_default_cb+0x3c>
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	687a      	ldr	r2, [r7, #4]
 8003668:	3370      	adds	r3, #112	@ 0x70
 800366a:	6810      	ldr	r0, [r2, #0]
 800366c:	6851      	ldr	r1, [r2, #4]
 800366e:	c303      	stmia	r3!, {r0, r1}
 8003670:	bf00      	nop
 8003672:	2301      	movs	r3, #1
 8003674:	4618      	mov	r0, r3
 8003676:	3710      	adds	r7, #16
 8003678:	46bd      	mov	sp, r7
 800367a:	bd80      	pop	{r7, pc}

0800367c <ucg_ext_none>:
 800367c:	b480      	push	{r7}
 800367e:	b085      	sub	sp, #20
 8003680:	af00      	add	r7, sp, #0
 8003682:	60f8      	str	r0, [r7, #12]
 8003684:	460b      	mov	r3, r1
 8003686:	607a      	str	r2, [r7, #4]
 8003688:	817b      	strh	r3, [r7, #10]
 800368a:	2301      	movs	r3, #1
 800368c:	4618      	mov	r0, r3
 800368e:	3714      	adds	r7, #20
 8003690:	46bd      	mov	sp, r7
 8003692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003696:	4770      	bx	lr

08003698 <ucg_handle_st7735_l90fx>:
 8003698:	b590      	push	{r4, r7, lr}
 800369a:	b085      	sub	sp, #20
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
 80036a0:	6878      	ldr	r0, [r7, #4]
 80036a2:	f001 fbdd 	bl	8004e60 <ucg_clip_l90fx>
 80036a6:	4603      	mov	r3, r0
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d053      	beq.n	8003754 <ucg_handle_st7735_l90fx+0xbc>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	@ 0x2e
 80036b2:	2b01      	cmp	r3, #1
 80036b4:	d008      	beq.n	80036c8 <ucg_handle_st7735_l90fx+0x30>
 80036b6:	2b02      	cmp	r3, #2
 80036b8:	d00b      	beq.n	80036d2 <ucg_handle_st7735_l90fx+0x3a>
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d11b      	bne.n	80036f6 <ucg_handle_st7735_l90fx+0x5e>
 80036be:	4928      	ldr	r1, [pc, #160]	@ (8003760 <ucg_handle_st7735_l90fx+0xc8>)
 80036c0:	6878      	ldr	r0, [r7, #4]
 80036c2:	f001 fefb 	bl	80054bc <ucg_com_SendCmdSeq>
 80036c6:	e028      	b.n	800371a <ucg_handle_st7735_l90fx+0x82>
 80036c8:	4926      	ldr	r1, [pc, #152]	@ (8003764 <ucg_handle_st7735_l90fx+0xcc>)
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	f001 fef6 	bl	80054bc <ucg_com_SendCmdSeq>
 80036d0:	e023      	b.n	800371a <ucg_handle_st7735_l90fx+0x82>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80036d6:	81fb      	strh	r3, [r7, #14]
 80036d8:	89fb      	ldrh	r3, [r7, #14]
 80036da:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 80036de:	b29b      	uxth	r3, r3
 80036e0:	b21a      	sxth	r2, r3
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	849a      	strh	r2, [r3, #36]	@ 0x24
 80036e6:	4920      	ldr	r1, [pc, #128]	@ (8003768 <ucg_handle_st7735_l90fx+0xd0>)
 80036e8:	6878      	ldr	r0, [r7, #4]
 80036ea:	f001 fee7 	bl	80054bc <ucg_com_SendCmdSeq>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	89fa      	ldrh	r2, [r7, #14]
 80036f2:	849a      	strh	r2, [r3, #36]	@ 0x24
 80036f4:	e011      	b.n	800371a <ucg_handle_st7735_l90fx+0x82>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80036fa:	81fb      	strh	r3, [r7, #14]
 80036fc:	89fb      	ldrh	r3, [r7, #14]
 80036fe:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 8003702:	b29b      	uxth	r3, r3
 8003704:	b21a      	sxth	r2, r3
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	84da      	strh	r2, [r3, #38]	@ 0x26
 800370a:	4918      	ldr	r1, [pc, #96]	@ (800376c <ucg_handle_st7735_l90fx+0xd4>)
 800370c:	6878      	ldr	r0, [r7, #4]
 800370e:	f001 fed5 	bl	80054bc <ucg_com_SendCmdSeq>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	89fa      	ldrh	r2, [r7, #14]
 8003716:	84da      	strh	r2, [r3, #38]	@ 0x26
 8003718:	bf00      	nop
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003720:	723b      	strb	r3, [r7, #8]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8003728:	727b      	strb	r3, [r7, #9]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8003730:	72bb      	strb	r3, [r7, #10]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	69dc      	ldr	r4, [r3, #28]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	@ 0x2c
 800373c:	b29a      	uxth	r2, r3
 800373e:	f107 0308 	add.w	r3, r7, #8
 8003742:	2113      	movs	r1, #19
 8003744:	6878      	ldr	r0, [r7, #4]
 8003746:	47a0      	blx	r4
 8003748:	2101      	movs	r1, #1
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	f001 fe02 	bl	8005354 <ucg_com_SetCSLineStatus>
 8003750:	2301      	movs	r3, #1
 8003752:	e000      	b.n	8003756 <ucg_handle_st7735_l90fx+0xbe>
 8003754:	2300      	movs	r3, #0
 8003756:	4618      	mov	r0, r3
 8003758:	3714      	adds	r7, #20
 800375a:	46bd      	mov	sp, r7
 800375c:	bd90      	pop	{r4, r7, pc}
 800375e:	bf00      	nop
 8003760:	08006114 	.word	0x08006114
 8003764:	08006134 	.word	0x08006134
 8003768:	08006158 	.word	0x08006158
 800376c:	0800617c 	.word	0x0800617c

08003770 <ucg_handle_st7735_l90se>:
 8003770:	b590      	push	{r4, r7, lr}
 8003772:	b087      	sub	sp, #28
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
 8003778:	2300      	movs	r3, #0
 800377a:	75fb      	strb	r3, [r7, #23]
 800377c:	e01a      	b.n	80037b4 <ucg_handle_st7735_l90se+0x44>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	f103 0146 	add.w	r1, r3, #70	@ 0x46
 8003784:	7dfa      	ldrb	r2, [r7, #23]
 8003786:	4613      	mov	r3, r2
 8003788:	00db      	lsls	r3, r3, #3
 800378a:	1a9b      	subs	r3, r3, r2
 800378c:	005b      	lsls	r3, r3, #1
 800378e:	18c8      	adds	r0, r1, r3
 8003790:	7dfb      	ldrb	r3, [r7, #23]
 8003792:	687a      	ldr	r2, [r7, #4]
 8003794:	4413      	add	r3, r2
 8003796:	f893 103a 	ldrb.w	r1, [r3, #58]	@ 0x3a
 800379a:	7dfb      	ldrb	r3, [r7, #23]
 800379c:	687a      	ldr	r2, [r7, #4]
 800379e:	4413      	add	r3, r2
 80037a0:	f893 203d 	ldrb.w	r2, [r3, #61]	@ 0x3d
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	@ 0x2c
 80037aa:	f7ff fe40 	bl	800342e <ucg_ccs_init>
 80037ae:	7dfb      	ldrb	r3, [r7, #23]
 80037b0:	3301      	adds	r3, #1
 80037b2:	75fb      	strb	r3, [r7, #23]
 80037b4:	7dfb      	ldrb	r3, [r7, #23]
 80037b6:	2b02      	cmp	r3, #2
 80037b8:	d9e1      	bls.n	800377e <ucg_handle_st7735_l90se+0xe>
 80037ba:	6878      	ldr	r0, [r7, #4]
 80037bc:	f001 fcd0 	bl	8005160 <ucg_clip_l90se>
 80037c0:	4603      	mov	r3, r0
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d071      	beq.n	80038aa <ucg_handle_st7735_l90se+0x13a>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	@ 0x2e
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	d008      	beq.n	80037e2 <ucg_handle_st7735_l90se+0x72>
 80037d0:	2b02      	cmp	r3, #2
 80037d2:	d00b      	beq.n	80037ec <ucg_handle_st7735_l90se+0x7c>
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d11b      	bne.n	8003810 <ucg_handle_st7735_l90se+0xa0>
 80037d8:	4936      	ldr	r1, [pc, #216]	@ (80038b4 <ucg_handle_st7735_l90se+0x144>)
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f001 fe6e 	bl	80054bc <ucg_com_SendCmdSeq>
 80037e0:	e028      	b.n	8003834 <ucg_handle_st7735_l90se+0xc4>
 80037e2:	4935      	ldr	r1, [pc, #212]	@ (80038b8 <ucg_handle_st7735_l90se+0x148>)
 80037e4:	6878      	ldr	r0, [r7, #4]
 80037e6:	f001 fe69 	bl	80054bc <ucg_com_SendCmdSeq>
 80037ea:	e023      	b.n	8003834 <ucg_handle_st7735_l90se+0xc4>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80037f0:	827b      	strh	r3, [r7, #18]
 80037f2:	8a7b      	ldrh	r3, [r7, #18]
 80037f4:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 80037f8:	b29b      	uxth	r3, r3
 80037fa:	b21a      	sxth	r2, r3
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	849a      	strh	r2, [r3, #36]	@ 0x24
 8003800:	492e      	ldr	r1, [pc, #184]	@ (80038bc <ucg_handle_st7735_l90se+0x14c>)
 8003802:	6878      	ldr	r0, [r7, #4]
 8003804:	f001 fe5a 	bl	80054bc <ucg_com_SendCmdSeq>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	8a7a      	ldrh	r2, [r7, #18]
 800380c:	849a      	strh	r2, [r3, #36]	@ 0x24
 800380e:	e011      	b.n	8003834 <ucg_handle_st7735_l90se+0xc4>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003814:	827b      	strh	r3, [r7, #18]
 8003816:	8a7b      	ldrh	r3, [r7, #18]
 8003818:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 800381c:	b29b      	uxth	r3, r3
 800381e:	b21a      	sxth	r2, r3
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	84da      	strh	r2, [r3, #38]	@ 0x26
 8003824:	4926      	ldr	r1, [pc, #152]	@ (80038c0 <ucg_handle_st7735_l90se+0x150>)
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	f001 fe48 	bl	80054bc <ucg_com_SendCmdSeq>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	8a7a      	ldrh	r2, [r7, #18]
 8003830:	84da      	strh	r2, [r3, #38]	@ 0x26
 8003832:	bf00      	nop
 8003834:	2300      	movs	r3, #0
 8003836:	82bb      	strh	r3, [r7, #20]
 8003838:	e02a      	b.n	8003890 <ucg_handle_st7735_l90se+0x120>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8003840:	733b      	strb	r3, [r7, #12]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003848:	737b      	strb	r3, [r7, #13]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 8003850:	73bb      	strb	r3, [r7, #14]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	69dc      	ldr	r4, [r3, #28]
 8003856:	f107 030c 	add.w	r3, r7, #12
 800385a:	2201      	movs	r2, #1
 800385c:	2113      	movs	r1, #19
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	47a0      	blx	r4
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	3346      	adds	r3, #70	@ 0x46
 8003866:	4618      	mov	r0, r3
 8003868:	f7ff fe41 	bl	80034ee <ucg_ccs_step>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	3346      	adds	r3, #70	@ 0x46
 8003870:	330e      	adds	r3, #14
 8003872:	4618      	mov	r0, r3
 8003874:	f7ff fe3b 	bl	80034ee <ucg_ccs_step>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	3346      	adds	r3, #70	@ 0x46
 800387c:	331c      	adds	r3, #28
 800387e:	4618      	mov	r0, r3
 8003880:	f7ff fe35 	bl	80034ee <ucg_ccs_step>
 8003884:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003888:	b29b      	uxth	r3, r3
 800388a:	3301      	adds	r3, #1
 800388c:	b29b      	uxth	r3, r3
 800388e:	82bb      	strh	r3, [r7, #20]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	@ 0x2c
 8003896:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800389a:	429a      	cmp	r2, r3
 800389c:	dbcd      	blt.n	800383a <ucg_handle_st7735_l90se+0xca>
 800389e:	2101      	movs	r1, #1
 80038a0:	6878      	ldr	r0, [r7, #4]
 80038a2:	f001 fd57 	bl	8005354 <ucg_com_SetCSLineStatus>
 80038a6:	2301      	movs	r3, #1
 80038a8:	e000      	b.n	80038ac <ucg_handle_st7735_l90se+0x13c>
 80038aa:	2300      	movs	r3, #0
 80038ac:	4618      	mov	r0, r3
 80038ae:	371c      	adds	r7, #28
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bd90      	pop	{r4, r7, pc}
 80038b4:	08006114 	.word	0x08006114
 80038b8:	08006134 	.word	0x08006134
 80038bc:	08006158 	.word	0x08006158
 80038c0:	0800617c 	.word	0x0800617c

080038c4 <ucg_dev_ic_st7735_18>:
 80038c4:	b590      	push	{r4, r7, lr}
 80038c6:	b087      	sub	sp, #28
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	60f8      	str	r0, [r7, #12]
 80038cc:	460b      	mov	r3, r1
 80038ce:	607a      	str	r2, [r7, #4]
 80038d0:	817b      	strh	r3, [r7, #10]
 80038d2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80038d6:	3b0a      	subs	r3, #10
 80038d8:	2b0b      	cmp	r3, #11
 80038da:	d85f      	bhi.n	800399c <ucg_dev_ic_st7735_18+0xd8>
 80038dc:	a201      	add	r2, pc, #4	@ (adr r2, 80038e4 <ucg_dev_ic_st7735_18+0x20>)
 80038de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038e2:	bf00      	nop
 80038e4:	08003915 	.word	0x08003915
 80038e8:	0800392f 	.word	0x0800392f
 80038ec:	0800399d 	.word	0x0800399d
 80038f0:	0800399d 	.word	0x0800399d
 80038f4:	0800399d 	.word	0x0800399d
 80038f8:	0800393b 	.word	0x0800393b
 80038fc:	0800399d 	.word	0x0800399d
 8003900:	0800399d 	.word	0x0800399d
 8003904:	0800399d 	.word	0x0800399d
 8003908:	0800399d 	.word	0x0800399d
 800390c:	0800394b 	.word	0x0800394b
 8003910:	08003993 	.word	0x08003993
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	2202      	movs	r2, #2
 8003918:	841a      	strh	r2, [r3, #32]
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	2201      	movs	r2, #1
 800391e:	845a      	strh	r2, [r3, #34]	@ 0x22
 8003920:	2242      	movs	r2, #66	@ 0x42
 8003922:	2164      	movs	r1, #100	@ 0x64
 8003924:	68f8      	ldr	r0, [r7, #12]
 8003926:	f001 fc64 	bl	80051f2 <ucg_com_PowerUp>
 800392a:	4603      	mov	r3, r0
 800392c:	e03e      	b.n	80039ac <ucg_dev_ic_st7735_18+0xe8>
 800392e:	4921      	ldr	r1, [pc, #132]	@ (80039b4 <ucg_dev_ic_st7735_18+0xf0>)
 8003930:	68f8      	ldr	r0, [r7, #12]
 8003932:	f001 fdc3 	bl	80054bc <ucg_com_SendCmdSeq>
 8003936:	2301      	movs	r3, #1
 8003938:	e038      	b.n	80039ac <ucg_dev_ic_st7735_18+0xe8>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2280      	movs	r2, #128	@ 0x80
 800393e:	801a      	strh	r2, [r3, #0]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2280      	movs	r2, #128	@ 0x80
 8003944:	805a      	strh	r2, [r3, #2]
 8003946:	2301      	movs	r3, #1
 8003948:	e030      	b.n	80039ac <ucg_dev_ic_st7735_18+0xe8>
 800394a:	68f8      	ldr	r0, [r7, #12]
 800394c:	f001 fa6f 	bl	8004e2e <ucg_clip_is_pixel_visible>
 8003950:	4603      	mov	r3, r0
 8003952:	2b00      	cmp	r3, #0
 8003954:	d01b      	beq.n	800398e <ucg_dev_ic_st7735_18+0xca>
 8003956:	4918      	ldr	r1, [pc, #96]	@ (80039b8 <ucg_dev_ic_st7735_18+0xf4>)
 8003958:	68f8      	ldr	r0, [r7, #12]
 800395a:	f001 fdaf 	bl	80054bc <ucg_com_SendCmdSeq>
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003964:	753b      	strb	r3, [r7, #20]
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800396c:	757b      	strb	r3, [r7, #21]
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8003974:	75bb      	strb	r3, [r7, #22]
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	69dc      	ldr	r4, [r3, #28]
 800397a:	f107 0314 	add.w	r3, r7, #20
 800397e:	2201      	movs	r2, #1
 8003980:	2113      	movs	r1, #19
 8003982:	68f8      	ldr	r0, [r7, #12]
 8003984:	47a0      	blx	r4
 8003986:	2101      	movs	r1, #1
 8003988:	68f8      	ldr	r0, [r7, #12]
 800398a:	f001 fce3 	bl	8005354 <ucg_com_SetCSLineStatus>
 800398e:	2301      	movs	r3, #1
 8003990:	e00c      	b.n	80039ac <ucg_dev_ic_st7735_18+0xe8>
 8003992:	68f8      	ldr	r0, [r7, #12]
 8003994:	f7ff fe80 	bl	8003698 <ucg_handle_st7735_l90fx>
 8003998:	2301      	movs	r3, #1
 800399a:	e007      	b.n	80039ac <ucg_dev_ic_st7735_18+0xe8>
 800399c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80039a0:	687a      	ldr	r2, [r7, #4]
 80039a2:	4619      	mov	r1, r3
 80039a4:	68f8      	ldr	r0, [r7, #12]
 80039a6:	f7ff fe47 	bl	8003638 <ucg_dev_default_cb>
 80039aa:	4603      	mov	r3, r0
 80039ac:	4618      	mov	r0, r3
 80039ae:	371c      	adds	r7, #28
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd90      	pop	{r4, r7, pc}
 80039b4:	080061a0 	.word	0x080061a0
 80039b8:	080060f4 	.word	0x080060f4

080039bc <ucg_ext_st7735_18>:
 80039bc:	b580      	push	{r7, lr}
 80039be:	b084      	sub	sp, #16
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	60f8      	str	r0, [r7, #12]
 80039c4:	460b      	mov	r3, r1
 80039c6:	607a      	str	r2, [r7, #4]
 80039c8:	817b      	strh	r3, [r7, #10]
 80039ca:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80039ce:	2b17      	cmp	r3, #23
 80039d0:	d103      	bne.n	80039da <ucg_ext_st7735_18+0x1e>
 80039d2:	68f8      	ldr	r0, [r7, #12]
 80039d4:	f7ff fecc 	bl	8003770 <ucg_handle_st7735_l90se>
 80039d8:	bf00      	nop
 80039da:	2301      	movs	r3, #1
 80039dc:	4618      	mov	r0, r3
 80039de:	3710      	adds	r7, #16
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bd80      	pop	{r7, pc}

080039e4 <ucg_PowerDown>:
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b082      	sub	sp, #8
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	781b      	ldrb	r3, [r3, #0]
 80039f0:	f003 0301 	and.w	r3, r3, #1
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d00a      	beq.n	8003a10 <ucg_PowerDown+0x2c>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	689b      	ldr	r3, [r3, #8]
 80039fe:	2200      	movs	r2, #0
 8003a00:	210b      	movs	r1, #11
 8003a02:	6878      	ldr	r0, [r7, #4]
 8003a04:	4798      	blx	r3
 8003a06:	687a      	ldr	r2, [r7, #4]
 8003a08:	7813      	ldrb	r3, [r2, #0]
 8003a0a:	f36f 0300 	bfc	r3, #0, #1
 8003a0e:	7013      	strb	r3, [r2, #0]
 8003a10:	bf00      	nop
 8003a12:	3708      	adds	r7, #8
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd80      	pop	{r7, pc}

08003a18 <ucg_PowerUp>:
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b084      	sub	sp, #16
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
 8003a20:	6878      	ldr	r0, [r7, #4]
 8003a22:	f7ff ffdf 	bl	80039e4 <ucg_PowerDown>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	210a      	movs	r1, #10
 8003a2e:	6878      	ldr	r0, [r7, #4]
 8003a30:	4798      	blx	r3
 8003a32:	4603      	mov	r3, r0
 8003a34:	81fb      	strh	r3, [r7, #14]
 8003a36:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d004      	beq.n	8003a48 <ucg_PowerUp+0x30>
 8003a3e:	687a      	ldr	r2, [r7, #4]
 8003a40:	7813      	ldrb	r3, [r2, #0]
 8003a42:	f043 0301 	orr.w	r3, r3, #1
 8003a46:	7013      	strb	r3, [r2, #0]
 8003a48:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	3710      	adds	r7, #16
 8003a50:	46bd      	mov	sp, r7
 8003a52:	bd80      	pop	{r7, pc}

08003a54 <ucg_SetClipBox>:
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b082      	sub	sp, #8
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
 8003a5c:	6039      	str	r1, [r7, #0]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	683a      	ldr	r2, [r7, #0]
 8003a64:	210c      	movs	r1, #12
 8003a66:	6878      	ldr	r0, [r7, #4]
 8003a68:	4798      	blx	r3
 8003a6a:	bf00      	nop
 8003a6c:	3708      	adds	r7, #8
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}

08003a72 <ucg_SetMaxClipRange>:
 8003a72:	b580      	push	{r7, lr}
 8003a74:	b084      	sub	sp, #16
 8003a76:	af00      	add	r7, sp, #0
 8003a78:	6078      	str	r0, [r7, #4]
 8003a7a:	687a      	ldr	r2, [r7, #4]
 8003a7c:	f107 030c 	add.w	r3, r7, #12
 8003a80:	3202      	adds	r2, #2
 8003a82:	6810      	ldr	r0, [r2, #0]
 8003a84:	6018      	str	r0, [r3, #0]
 8003a86:	2300      	movs	r3, #0
 8003a88:	813b      	strh	r3, [r7, #8]
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	817b      	strh	r3, [r7, #10]
 8003a8e:	f107 0308 	add.w	r3, r7, #8
 8003a92:	4619      	mov	r1, r3
 8003a94:	6878      	ldr	r0, [r7, #4]
 8003a96:	f7ff ffdd 	bl	8003a54 <ucg_SetClipBox>
 8003a9a:	bf00      	nop
 8003a9c:	3710      	adds	r7, #16
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}

08003aa2 <ucg_GetDimension>:
 8003aa2:	b580      	push	{r7, lr}
 8003aa4:	b082      	sub	sp, #8
 8003aa6:	af00      	add	r7, sp, #0
 8003aa8:	6078      	str	r0, [r7, #4]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	689b      	ldr	r3, [r3, #8]
 8003aae:	687a      	ldr	r2, [r7, #4]
 8003ab0:	3202      	adds	r2, #2
 8003ab2:	210f      	movs	r1, #15
 8003ab4:	6878      	ldr	r0, [r7, #4]
 8003ab6:	4798      	blx	r3
 8003ab8:	6878      	ldr	r0, [r7, #4]
 8003aba:	f7ff ffda 	bl	8003a72 <ucg_SetMaxClipRange>
 8003abe:	bf00      	nop
 8003ac0:	3708      	adds	r7, #8
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}

08003ac6 <ucg_DrawL90FXWithArg>:
 8003ac6:	b580      	push	{r7, lr}
 8003ac8:	b082      	sub	sp, #8
 8003aca:	af00      	add	r7, sp, #0
 8003acc:	6078      	str	r0, [r7, #4]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	687a      	ldr	r2, [r7, #4]
 8003ad4:	3224      	adds	r2, #36	@ 0x24
 8003ad6:	2115      	movs	r1, #21
 8003ad8:	6878      	ldr	r0, [r7, #4]
 8003ada:	4798      	blx	r3
 8003adc:	bf00      	nop
 8003ade:	3708      	adds	r7, #8
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}

08003ae4 <ucg_dev_st7735_18x128x128>:
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b084      	sub	sp, #16
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	60f8      	str	r0, [r7, #12]
 8003aec:	460b      	mov	r3, r1
 8003aee:	607a      	str	r2, [r7, #4]
 8003af0:	817b      	strh	r3, [r7, #10]
 8003af2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003af6:	2b0b      	cmp	r3, #11
 8003af8:	d015      	beq.n	8003b26 <ucg_dev_st7735_18x128x128+0x42>
 8003afa:	2b0f      	cmp	r3, #15
 8003afc:	d01c      	beq.n	8003b38 <ucg_dev_st7735_18x128x128+0x54>
 8003afe:	2b0a      	cmp	r3, #10
 8003b00:	d122      	bne.n	8003b48 <ucg_dev_st7735_18x128x128+0x64>
 8003b02:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003b06:	687a      	ldr	r2, [r7, #4]
 8003b08:	4619      	mov	r1, r3
 8003b0a:	68f8      	ldr	r0, [r7, #12]
 8003b0c:	f7ff feda 	bl	80038c4 <ucg_dev_ic_st7735_18>
 8003b10:	4603      	mov	r3, r0
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d101      	bne.n	8003b1a <ucg_dev_st7735_18x128x128+0x36>
 8003b16:	2300      	movs	r3, #0
 8003b18:	e01e      	b.n	8003b58 <ucg_dev_st7735_18x128x128+0x74>
 8003b1a:	4911      	ldr	r1, [pc, #68]	@ (8003b60 <ucg_dev_st7735_18x128x128+0x7c>)
 8003b1c:	68f8      	ldr	r0, [r7, #12]
 8003b1e:	f001 fccd 	bl	80054bc <ucg_com_SendCmdSeq>
 8003b22:	2301      	movs	r3, #1
 8003b24:	e018      	b.n	8003b58 <ucg_dev_st7735_18x128x128+0x74>
 8003b26:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003b2a:	687a      	ldr	r2, [r7, #4]
 8003b2c:	4619      	mov	r1, r3
 8003b2e:	68f8      	ldr	r0, [r7, #12]
 8003b30:	f7ff fec8 	bl	80038c4 <ucg_dev_ic_st7735_18>
 8003b34:	4603      	mov	r3, r0
 8003b36:	e00f      	b.n	8003b58 <ucg_dev_st7735_18x128x128+0x74>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2280      	movs	r2, #128	@ 0x80
 8003b3c:	801a      	strh	r2, [r3, #0]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2280      	movs	r2, #128	@ 0x80
 8003b42:	805a      	strh	r2, [r3, #2]
 8003b44:	2301      	movs	r3, #1
 8003b46:	e007      	b.n	8003b58 <ucg_dev_st7735_18x128x128+0x74>
 8003b48:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003b4c:	687a      	ldr	r2, [r7, #4]
 8003b4e:	4619      	mov	r1, r3
 8003b50:	68f8      	ldr	r0, [r7, #12]
 8003b52:	f7ff feb7 	bl	80038c4 <ucg_dev_ic_st7735_18>
 8003b56:	4603      	mov	r3, r0
 8003b58:	4618      	mov	r0, r3
 8003b5a:	3710      	adds	r7, #16
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bd80      	pop	{r7, pc}
 8003b60:	080061a8 	.word	0x080061a8

08003b64 <ucg_font_get_byte>:
 8003b64:	b480      	push	{r7}
 8003b66:	b083      	sub	sp, #12
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
 8003b6c:	460b      	mov	r3, r1
 8003b6e:	70fb      	strb	r3, [r7, #3]
 8003b70:	78fb      	ldrb	r3, [r7, #3]
 8003b72:	687a      	ldr	r2, [r7, #4]
 8003b74:	4413      	add	r3, r2
 8003b76:	607b      	str	r3, [r7, #4]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	781b      	ldrb	r3, [r3, #0]
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	370c      	adds	r7, #12
 8003b80:	46bd      	mov	sp, r7
 8003b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b86:	4770      	bx	lr

08003b88 <ucg_font_get_word>:
 8003b88:	b480      	push	{r7}
 8003b8a:	b085      	sub	sp, #20
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
 8003b90:	460b      	mov	r3, r1
 8003b92:	70fb      	strb	r3, [r7, #3]
 8003b94:	78fb      	ldrb	r3, [r7, #3]
 8003b96:	687a      	ldr	r2, [r7, #4]
 8003b98:	4413      	add	r3, r2
 8003b9a:	607b      	str	r3, [r7, #4]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	781b      	ldrb	r3, [r3, #0]
 8003ba0:	81fb      	strh	r3, [r7, #14]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	3301      	adds	r3, #1
 8003ba6:	607b      	str	r3, [r7, #4]
 8003ba8:	89fb      	ldrh	r3, [r7, #14]
 8003baa:	021b      	lsls	r3, r3, #8
 8003bac:	81fb      	strh	r3, [r7, #14]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	781b      	ldrb	r3, [r3, #0]
 8003bb2:	b29a      	uxth	r2, r3
 8003bb4:	89fb      	ldrh	r3, [r7, #14]
 8003bb6:	4413      	add	r3, r2
 8003bb8:	81fb      	strh	r3, [r7, #14]
 8003bba:	89fb      	ldrh	r3, [r7, #14]
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	3714      	adds	r7, #20
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc6:	4770      	bx	lr

08003bc8 <ucg_read_font_info>:
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b082      	sub	sp, #8
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
 8003bd0:	6039      	str	r1, [r7, #0]
 8003bd2:	2100      	movs	r1, #0
 8003bd4:	6838      	ldr	r0, [r7, #0]
 8003bd6:	f7ff ffc5 	bl	8003b64 <ucg_font_get_byte>
 8003bda:	4603      	mov	r3, r0
 8003bdc:	461a      	mov	r2, r3
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	701a      	strb	r2, [r3, #0]
 8003be2:	2101      	movs	r1, #1
 8003be4:	6838      	ldr	r0, [r7, #0]
 8003be6:	f7ff ffbd 	bl	8003b64 <ucg_font_get_byte>
 8003bea:	4603      	mov	r3, r0
 8003bec:	461a      	mov	r2, r3
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	705a      	strb	r2, [r3, #1]
 8003bf2:	2102      	movs	r1, #2
 8003bf4:	6838      	ldr	r0, [r7, #0]
 8003bf6:	f7ff ffb5 	bl	8003b64 <ucg_font_get_byte>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	461a      	mov	r2, r3
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	709a      	strb	r2, [r3, #2]
 8003c02:	2103      	movs	r1, #3
 8003c04:	6838      	ldr	r0, [r7, #0]
 8003c06:	f7ff ffad 	bl	8003b64 <ucg_font_get_byte>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	461a      	mov	r2, r3
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	70da      	strb	r2, [r3, #3]
 8003c12:	2104      	movs	r1, #4
 8003c14:	6838      	ldr	r0, [r7, #0]
 8003c16:	f7ff ffa5 	bl	8003b64 <ucg_font_get_byte>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	461a      	mov	r2, r3
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	711a      	strb	r2, [r3, #4]
 8003c22:	2105      	movs	r1, #5
 8003c24:	6838      	ldr	r0, [r7, #0]
 8003c26:	f7ff ff9d 	bl	8003b64 <ucg_font_get_byte>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	461a      	mov	r2, r3
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	715a      	strb	r2, [r3, #5]
 8003c32:	2106      	movs	r1, #6
 8003c34:	6838      	ldr	r0, [r7, #0]
 8003c36:	f7ff ff95 	bl	8003b64 <ucg_font_get_byte>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	461a      	mov	r2, r3
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	719a      	strb	r2, [r3, #6]
 8003c42:	2107      	movs	r1, #7
 8003c44:	6838      	ldr	r0, [r7, #0]
 8003c46:	f7ff ff8d 	bl	8003b64 <ucg_font_get_byte>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	461a      	mov	r2, r3
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	71da      	strb	r2, [r3, #7]
 8003c52:	2108      	movs	r1, #8
 8003c54:	6838      	ldr	r0, [r7, #0]
 8003c56:	f7ff ff85 	bl	8003b64 <ucg_font_get_byte>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	461a      	mov	r2, r3
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	721a      	strb	r2, [r3, #8]
 8003c62:	2109      	movs	r1, #9
 8003c64:	6838      	ldr	r0, [r7, #0]
 8003c66:	f7ff ff7d 	bl	8003b64 <ucg_font_get_byte>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	b25a      	sxtb	r2, r3
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	725a      	strb	r2, [r3, #9]
 8003c72:	210a      	movs	r1, #10
 8003c74:	6838      	ldr	r0, [r7, #0]
 8003c76:	f7ff ff75 	bl	8003b64 <ucg_font_get_byte>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	b25a      	sxtb	r2, r3
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	729a      	strb	r2, [r3, #10]
 8003c82:	210b      	movs	r1, #11
 8003c84:	6838      	ldr	r0, [r7, #0]
 8003c86:	f7ff ff6d 	bl	8003b64 <ucg_font_get_byte>
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	b25a      	sxtb	r2, r3
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	72da      	strb	r2, [r3, #11]
 8003c92:	210c      	movs	r1, #12
 8003c94:	6838      	ldr	r0, [r7, #0]
 8003c96:	f7ff ff65 	bl	8003b64 <ucg_font_get_byte>
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	b25a      	sxtb	r2, r3
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	731a      	strb	r2, [r3, #12]
 8003ca2:	210d      	movs	r1, #13
 8003ca4:	6838      	ldr	r0, [r7, #0]
 8003ca6:	f7ff ff5d 	bl	8003b64 <ucg_font_get_byte>
 8003caa:	4603      	mov	r3, r0
 8003cac:	b25a      	sxtb	r2, r3
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	735a      	strb	r2, [r3, #13]
 8003cb2:	210e      	movs	r1, #14
 8003cb4:	6838      	ldr	r0, [r7, #0]
 8003cb6:	f7ff ff55 	bl	8003b64 <ucg_font_get_byte>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	b25a      	sxtb	r2, r3
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	739a      	strb	r2, [r3, #14]
 8003cc2:	210f      	movs	r1, #15
 8003cc4:	6838      	ldr	r0, [r7, #0]
 8003cc6:	f7ff ff4d 	bl	8003b64 <ucg_font_get_byte>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	b25a      	sxtb	r2, r3
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	73da      	strb	r2, [r3, #15]
 8003cd2:	2110      	movs	r1, #16
 8003cd4:	6838      	ldr	r0, [r7, #0]
 8003cd6:	f7ff ff45 	bl	8003b64 <ucg_font_get_byte>
 8003cda:	4603      	mov	r3, r0
 8003cdc:	b25a      	sxtb	r2, r3
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	741a      	strb	r2, [r3, #16]
 8003ce2:	2111      	movs	r1, #17
 8003ce4:	6838      	ldr	r0, [r7, #0]
 8003ce6:	f7ff ff4f 	bl	8003b88 <ucg_font_get_word>
 8003cea:	4603      	mov	r3, r0
 8003cec:	461a      	mov	r2, r3
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	825a      	strh	r2, [r3, #18]
 8003cf2:	2113      	movs	r1, #19
 8003cf4:	6838      	ldr	r0, [r7, #0]
 8003cf6:	f7ff ff47 	bl	8003b88 <ucg_font_get_word>
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	461a      	mov	r2, r3
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	829a      	strh	r2, [r3, #20]
 8003d02:	bf00      	nop
 8003d04:	3708      	adds	r7, #8
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}

08003d0a <ucg_font_decode_get_unsigned_bits>:
 8003d0a:	b480      	push	{r7}
 8003d0c:	b085      	sub	sp, #20
 8003d0e:	af00      	add	r7, sp, #0
 8003d10:	6078      	str	r0, [r7, #4]
 8003d12:	460b      	mov	r3, r1
 8003d14:	70fb      	strb	r3, [r7, #3]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	7b1b      	ldrb	r3, [r3, #12]
 8003d1a:	737b      	strb	r3, [r7, #13]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	781b      	ldrb	r3, [r3, #0]
 8003d22:	73fb      	strb	r3, [r7, #15]
 8003d24:	7bfa      	ldrb	r2, [r7, #15]
 8003d26:	7b7b      	ldrb	r3, [r7, #13]
 8003d28:	fa42 f303 	asr.w	r3, r2, r3
 8003d2c:	73fb      	strb	r3, [r7, #15]
 8003d2e:	7b7b      	ldrb	r3, [r7, #13]
 8003d30:	73bb      	strb	r3, [r7, #14]
 8003d32:	7bba      	ldrb	r2, [r7, #14]
 8003d34:	78fb      	ldrb	r3, [r7, #3]
 8003d36:	4413      	add	r3, r2
 8003d38:	73bb      	strb	r3, [r7, #14]
 8003d3a:	7bbb      	ldrb	r3, [r7, #14]
 8003d3c:	2b07      	cmp	r3, #7
 8003d3e:	d91a      	bls.n	8003d76 <ucg_font_decode_get_unsigned_bits+0x6c>
 8003d40:	2308      	movs	r3, #8
 8003d42:	733b      	strb	r3, [r7, #12]
 8003d44:	7b3a      	ldrb	r2, [r7, #12]
 8003d46:	7b7b      	ldrb	r3, [r7, #13]
 8003d48:	1ad3      	subs	r3, r2, r3
 8003d4a:	733b      	strb	r3, [r7, #12]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	1c5a      	adds	r2, r3, #1
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	601a      	str	r2, [r3, #0]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	781b      	ldrb	r3, [r3, #0]
 8003d5c:	461a      	mov	r2, r3
 8003d5e:	7b3b      	ldrb	r3, [r7, #12]
 8003d60:	fa02 f303 	lsl.w	r3, r2, r3
 8003d64:	b25a      	sxtb	r2, r3
 8003d66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	b25b      	sxtb	r3, r3
 8003d6e:	73fb      	strb	r3, [r7, #15]
 8003d70:	7bbb      	ldrb	r3, [r7, #14]
 8003d72:	3b08      	subs	r3, #8
 8003d74:	73bb      	strb	r3, [r7, #14]
 8003d76:	78fb      	ldrb	r3, [r7, #3]
 8003d78:	f04f 32ff 	mov.w	r2, #4294967295
 8003d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d80:	b2db      	uxtb	r3, r3
 8003d82:	43db      	mvns	r3, r3
 8003d84:	b2da      	uxtb	r2, r3
 8003d86:	7bfb      	ldrb	r3, [r7, #15]
 8003d88:	4013      	ands	r3, r2
 8003d8a:	73fb      	strb	r3, [r7, #15]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	7bba      	ldrb	r2, [r7, #14]
 8003d90:	731a      	strb	r2, [r3, #12]
 8003d92:	7bfb      	ldrb	r3, [r7, #15]
 8003d94:	4618      	mov	r0, r3
 8003d96:	3714      	adds	r7, #20
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9e:	4770      	bx	lr

08003da0 <ucg_font_decode_get_signed_bits>:
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b084      	sub	sp, #16
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
 8003da8:	460b      	mov	r3, r1
 8003daa:	70fb      	strb	r3, [r7, #3]
 8003dac:	78fb      	ldrb	r3, [r7, #3]
 8003dae:	4619      	mov	r1, r3
 8003db0:	6878      	ldr	r0, [r7, #4]
 8003db2:	f7ff ffaa 	bl	8003d0a <ucg_font_decode_get_unsigned_bits>
 8003db6:	4603      	mov	r3, r0
 8003db8:	73fb      	strb	r3, [r7, #15]
 8003dba:	2301      	movs	r3, #1
 8003dbc:	73bb      	strb	r3, [r7, #14]
 8003dbe:	78fb      	ldrb	r3, [r7, #3]
 8003dc0:	3b01      	subs	r3, #1
 8003dc2:	70fb      	strb	r3, [r7, #3]
 8003dc4:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8003dc8:	78fb      	ldrb	r3, [r7, #3]
 8003dca:	fa02 f303 	lsl.w	r3, r2, r3
 8003dce:	73bb      	strb	r3, [r7, #14]
 8003dd0:	7bfa      	ldrb	r2, [r7, #15]
 8003dd2:	7bbb      	ldrb	r3, [r7, #14]
 8003dd4:	1ad3      	subs	r3, r2, r3
 8003dd6:	b2db      	uxtb	r3, r3
 8003dd8:	73fb      	strb	r3, [r7, #15]
 8003dda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003dde:	4618      	mov	r0, r3
 8003de0:	3710      	adds	r7, #16
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}

08003de6 <ucg_add_vector_y>:
 8003de6:	b490      	push	{r4, r7}
 8003de8:	b082      	sub	sp, #8
 8003dea:	af00      	add	r7, sp, #0
 8003dec:	4604      	mov	r4, r0
 8003dee:	4608      	mov	r0, r1
 8003df0:	4611      	mov	r1, r2
 8003df2:	461a      	mov	r2, r3
 8003df4:	4623      	mov	r3, r4
 8003df6:	80fb      	strh	r3, [r7, #6]
 8003df8:	4603      	mov	r3, r0
 8003dfa:	717b      	strb	r3, [r7, #5]
 8003dfc:	460b      	mov	r3, r1
 8003dfe:	713b      	strb	r3, [r7, #4]
 8003e00:	4613      	mov	r3, r2
 8003e02:	70fb      	strb	r3, [r7, #3]
 8003e04:	78fb      	ldrb	r3, [r7, #3]
 8003e06:	2b01      	cmp	r3, #1
 8003e08:	d00b      	beq.n	8003e22 <ucg_add_vector_y+0x3c>
 8003e0a:	2b02      	cmp	r3, #2
 8003e0c:	d011      	beq.n	8003e32 <ucg_add_vector_y+0x4c>
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d117      	bne.n	8003e42 <ucg_add_vector_y+0x5c>
 8003e12:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8003e16:	b29a      	uxth	r2, r3
 8003e18:	88fb      	ldrh	r3, [r7, #6]
 8003e1a:	4413      	add	r3, r2
 8003e1c:	b29b      	uxth	r3, r3
 8003e1e:	80fb      	strh	r3, [r7, #6]
 8003e20:	e017      	b.n	8003e52 <ucg_add_vector_y+0x6c>
 8003e22:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8003e26:	b29a      	uxth	r2, r3
 8003e28:	88fb      	ldrh	r3, [r7, #6]
 8003e2a:	4413      	add	r3, r2
 8003e2c:	b29b      	uxth	r3, r3
 8003e2e:	80fb      	strh	r3, [r7, #6]
 8003e30:	e00f      	b.n	8003e52 <ucg_add_vector_y+0x6c>
 8003e32:	88fa      	ldrh	r2, [r7, #6]
 8003e34:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8003e38:	b29b      	uxth	r3, r3
 8003e3a:	1ad3      	subs	r3, r2, r3
 8003e3c:	b29b      	uxth	r3, r3
 8003e3e:	80fb      	strh	r3, [r7, #6]
 8003e40:	e007      	b.n	8003e52 <ucg_add_vector_y+0x6c>
 8003e42:	88fa      	ldrh	r2, [r7, #6]
 8003e44:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8003e48:	b29b      	uxth	r3, r3
 8003e4a:	1ad3      	subs	r3, r2, r3
 8003e4c:	b29b      	uxth	r3, r3
 8003e4e:	80fb      	strh	r3, [r7, #6]
 8003e50:	bf00      	nop
 8003e52:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003e56:	4618      	mov	r0, r3
 8003e58:	3708      	adds	r7, #8
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bc90      	pop	{r4, r7}
 8003e5e:	4770      	bx	lr

08003e60 <ucg_add_vector_x>:
 8003e60:	b490      	push	{r4, r7}
 8003e62:	b082      	sub	sp, #8
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	4604      	mov	r4, r0
 8003e68:	4608      	mov	r0, r1
 8003e6a:	4611      	mov	r1, r2
 8003e6c:	461a      	mov	r2, r3
 8003e6e:	4623      	mov	r3, r4
 8003e70:	80fb      	strh	r3, [r7, #6]
 8003e72:	4603      	mov	r3, r0
 8003e74:	717b      	strb	r3, [r7, #5]
 8003e76:	460b      	mov	r3, r1
 8003e78:	713b      	strb	r3, [r7, #4]
 8003e7a:	4613      	mov	r3, r2
 8003e7c:	70fb      	strb	r3, [r7, #3]
 8003e7e:	78fb      	ldrb	r3, [r7, #3]
 8003e80:	2b01      	cmp	r3, #1
 8003e82:	d00b      	beq.n	8003e9c <ucg_add_vector_x+0x3c>
 8003e84:	2b02      	cmp	r3, #2
 8003e86:	d011      	beq.n	8003eac <ucg_add_vector_x+0x4c>
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d117      	bne.n	8003ebc <ucg_add_vector_x+0x5c>
 8003e8c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8003e90:	b29a      	uxth	r2, r3
 8003e92:	88fb      	ldrh	r3, [r7, #6]
 8003e94:	4413      	add	r3, r2
 8003e96:	b29b      	uxth	r3, r3
 8003e98:	80fb      	strh	r3, [r7, #6]
 8003e9a:	e017      	b.n	8003ecc <ucg_add_vector_x+0x6c>
 8003e9c:	88fa      	ldrh	r2, [r7, #6]
 8003e9e:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8003ea2:	b29b      	uxth	r3, r3
 8003ea4:	1ad3      	subs	r3, r2, r3
 8003ea6:	b29b      	uxth	r3, r3
 8003ea8:	80fb      	strh	r3, [r7, #6]
 8003eaa:	e00f      	b.n	8003ecc <ucg_add_vector_x+0x6c>
 8003eac:	88fa      	ldrh	r2, [r7, #6]
 8003eae:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8003eb2:	b29b      	uxth	r3, r3
 8003eb4:	1ad3      	subs	r3, r2, r3
 8003eb6:	b29b      	uxth	r3, r3
 8003eb8:	80fb      	strh	r3, [r7, #6]
 8003eba:	e007      	b.n	8003ecc <ucg_add_vector_x+0x6c>
 8003ebc:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8003ec0:	b29a      	uxth	r2, r3
 8003ec2:	88fb      	ldrh	r3, [r7, #6]
 8003ec4:	4413      	add	r3, r2
 8003ec6:	b29b      	uxth	r3, r3
 8003ec8:	80fb      	strh	r3, [r7, #6]
 8003eca:	bf00      	nop
 8003ecc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	3708      	adds	r7, #8
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bc90      	pop	{r4, r7}
 8003ed8:	4770      	bx	lr

08003eda <ucg_font_decode_len>:
 8003eda:	b590      	push	{r4, r7, lr}
 8003edc:	b089      	sub	sp, #36	@ 0x24
 8003ede:	af02      	add	r7, sp, #8
 8003ee0:	6078      	str	r0, [r7, #4]
 8003ee2:	460b      	mov	r3, r1
 8003ee4:	70fb      	strb	r3, [r7, #3]
 8003ee6:	4613      	mov	r3, r2
 8003ee8:	70bb      	strb	r3, [r7, #2]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	3380      	adds	r3, #128	@ 0x80
 8003eee:	613b      	str	r3, [r7, #16]
 8003ef0:	78fb      	ldrb	r3, [r7, #3]
 8003ef2:	75fb      	strb	r3, [r7, #23]
 8003ef4:	693b      	ldr	r3, [r7, #16]
 8003ef6:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8003efa:	757b      	strb	r3, [r7, #21]
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8003f02:	753b      	strb	r3, [r7, #20]
 8003f04:	693b      	ldr	r3, [r7, #16]
 8003f06:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8003f0a:	73fb      	strb	r3, [r7, #15]
 8003f0c:	7bfa      	ldrb	r2, [r7, #15]
 8003f0e:	7d7b      	ldrb	r3, [r7, #21]
 8003f10:	1ad3      	subs	r3, r2, r3
 8003f12:	73fb      	strb	r3, [r7, #15]
 8003f14:	7bfb      	ldrb	r3, [r7, #15]
 8003f16:	75bb      	strb	r3, [r7, #22]
 8003f18:	7dfa      	ldrb	r2, [r7, #23]
 8003f1a:	7bfb      	ldrb	r3, [r7, #15]
 8003f1c:	429a      	cmp	r2, r3
 8003f1e:	d201      	bcs.n	8003f24 <ucg_font_decode_len+0x4a>
 8003f20:	7dfb      	ldrb	r3, [r7, #23]
 8003f22:	75bb      	strb	r3, [r7, #22]
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	889b      	ldrh	r3, [r3, #4]
 8003f28:	81bb      	strh	r3, [r7, #12]
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	88db      	ldrh	r3, [r3, #6]
 8003f2e:	817b      	strh	r3, [r7, #10]
 8003f30:	f997 1015 	ldrsb.w	r1, [r7, #21]
 8003f34:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	7b9b      	ldrb	r3, [r3, #14]
 8003f3c:	f9b7 000c 	ldrsh.w	r0, [r7, #12]
 8003f40:	f7ff ff8e 	bl	8003e60 <ucg_add_vector_x>
 8003f44:	4603      	mov	r3, r0
 8003f46:	81bb      	strh	r3, [r7, #12]
 8003f48:	f997 1015 	ldrsb.w	r1, [r7, #21]
 8003f4c:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	7b9b      	ldrb	r3, [r3, #14]
 8003f54:	f9b7 000a 	ldrsh.w	r0, [r7, #10]
 8003f58:	f7ff ff45 	bl	8003de6 <ucg_add_vector_y>
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	817b      	strh	r3, [r7, #10]
 8003f60:	78bb      	ldrb	r3, [r7, #2]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d011      	beq.n	8003f8a <ucg_font_decode_len+0xb0>
 8003f66:	7dbb      	ldrb	r3, [r7, #22]
 8003f68:	b21c      	sxth	r4, r3
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	7b9b      	ldrb	r3, [r3, #14]
 8003f6e:	b21b      	sxth	r3, r3
 8003f70:	f9b7 000a 	ldrsh.w	r0, [r7, #10]
 8003f74:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	9201      	str	r2, [sp, #4]
 8003f7c:	9300      	str	r3, [sp, #0]
 8003f7e:	4623      	mov	r3, r4
 8003f80:	4602      	mov	r2, r0
 8003f82:	6878      	ldr	r0, [r7, #4]
 8003f84:	f000 fbc0 	bl	8004708 <ucg_Draw90Line>
 8003f88:	e014      	b.n	8003fb4 <ucg_font_decode_len+0xda>
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	7b5b      	ldrb	r3, [r3, #13]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d110      	bne.n	8003fb4 <ucg_font_decode_len+0xda>
 8003f92:	7dbb      	ldrb	r3, [r7, #22]
 8003f94:	b21c      	sxth	r4, r3
 8003f96:	693b      	ldr	r3, [r7, #16]
 8003f98:	7b9b      	ldrb	r3, [r3, #14]
 8003f9a:	b21b      	sxth	r3, r3
 8003f9c:	f9b7 000a 	ldrsh.w	r0, [r7, #10]
 8003fa0:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8003fa4:	2201      	movs	r2, #1
 8003fa6:	9201      	str	r2, [sp, #4]
 8003fa8:	9300      	str	r3, [sp, #0]
 8003faa:	4623      	mov	r3, r4
 8003fac:	4602      	mov	r2, r0
 8003fae:	6878      	ldr	r0, [r7, #4]
 8003fb0:	f000 fbaa 	bl	8004708 <ucg_Draw90Line>
 8003fb4:	7dfa      	ldrb	r2, [r7, #23]
 8003fb6:	7bfb      	ldrb	r3, [r7, #15]
 8003fb8:	429a      	cmp	r2, r3
 8003fba:	d309      	bcc.n	8003fd0 <ucg_font_decode_len+0xf6>
 8003fbc:	7dfa      	ldrb	r2, [r7, #23]
 8003fbe:	7bfb      	ldrb	r3, [r7, #15]
 8003fc0:	1ad3      	subs	r3, r2, r3
 8003fc2:	75fb      	strb	r3, [r7, #23]
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	757b      	strb	r3, [r7, #21]
 8003fc8:	7d3b      	ldrb	r3, [r7, #20]
 8003fca:	3301      	adds	r3, #1
 8003fcc:	753b      	strb	r3, [r7, #20]
 8003fce:	e799      	b.n	8003f04 <ucg_font_decode_len+0x2a>
 8003fd0:	bf00      	nop
 8003fd2:	7d7a      	ldrb	r2, [r7, #21]
 8003fd4:	7dfb      	ldrb	r3, [r7, #23]
 8003fd6:	4413      	add	r3, r2
 8003fd8:	757b      	strb	r3, [r7, #21]
 8003fda:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	721a      	strb	r2, [r3, #8]
 8003fe2:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	725a      	strb	r2, [r3, #9]
 8003fea:	bf00      	nop
 8003fec:	371c      	adds	r7, #28
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bd90      	pop	{r4, r7, pc}

08003ff2 <ucg_font_setup_decode>:
 8003ff2:	b580      	push	{r7, lr}
 8003ff4:	b084      	sub	sp, #16
 8003ff6:	af00      	add	r7, sp, #0
 8003ff8:	6078      	str	r0, [r7, #4]
 8003ffa:	6039      	str	r1, [r7, #0]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	3380      	adds	r3, #128	@ 0x80
 8004000:	60fb      	str	r3, [r7, #12]
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	683a      	ldr	r2, [r7, #0]
 8004006:	601a      	str	r2, [r3, #0]
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	2200      	movs	r2, #0
 800400c:	731a      	strb	r2, [r3, #12]
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	1c5a      	adds	r2, r3, #1
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	601a      	str	r2, [r3, #0]
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	1c5a      	adds	r2, r3, #1
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	601a      	str	r2, [r3, #0]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	f893 3094 	ldrb.w	r3, [r3, #148]	@ 0x94
 8004028:	4619      	mov	r1, r3
 800402a:	68f8      	ldr	r0, [r7, #12]
 800402c:	f7ff fe6d 	bl	8003d0a <ucg_font_decode_get_unsigned_bits>
 8004030:	4603      	mov	r3, r0
 8004032:	b25a      	sxtb	r2, r3
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	729a      	strb	r2, [r3, #10]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 800403e:	4619      	mov	r1, r3
 8004040:	68f8      	ldr	r0, [r7, #12]
 8004042:	f7ff fe62 	bl	8003d0a <ucg_font_decode_get_unsigned_bits>
 8004046:	4603      	mov	r3, r0
 8004048:	b25a      	sxtb	r2, r3
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	72da      	strb	r2, [r3, #11]
 800404e:	bf00      	nop
 8004050:	3710      	adds	r7, #16
 8004052:	46bd      	mov	sp, r7
 8004054:	bd80      	pop	{r7, pc}

08004056 <ucg_font_decode_glyph>:
 8004056:	b580      	push	{r7, lr}
 8004058:	b084      	sub	sp, #16
 800405a:	af00      	add	r7, sp, #0
 800405c:	6078      	str	r0, [r7, #4]
 800405e:	6039      	str	r1, [r7, #0]
 8004060:	6839      	ldr	r1, [r7, #0]
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	f7ff ffc5 	bl	8003ff2 <ucg_font_setup_decode>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	f893 308b 	ldrb.w	r3, [r3, #139]	@ 0x8b
 800406e:	73fb      	strb	r3, [r7, #15]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	f103 0280 	add.w	r2, r3, #128	@ 0x80
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	f893 3096 	ldrb.w	r3, [r3, #150]	@ 0x96
 800407c:	4619      	mov	r1, r3
 800407e:	4610      	mov	r0, r2
 8004080:	f7ff fe8e 	bl	8003da0 <ucg_font_decode_get_signed_bits>
 8004084:	4603      	mov	r3, r0
 8004086:	73bb      	strb	r3, [r7, #14]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	f103 0280 	add.w	r2, r3, #128	@ 0x80
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	f893 3097 	ldrb.w	r3, [r3, #151]	@ 0x97
 8004094:	4619      	mov	r1, r3
 8004096:	4610      	mov	r0, r2
 8004098:	f7ff fe82 	bl	8003da0 <ucg_font_decode_get_signed_bits>
 800409c:	4603      	mov	r3, r0
 800409e:	737b      	strb	r3, [r7, #13]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	f103 0280 	add.w	r2, r3, #128	@ 0x80
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80040ac:	4619      	mov	r1, r3
 80040ae:	4610      	mov	r0, r2
 80040b0:	f7ff fe76 	bl	8003da0 <ucg_font_decode_get_signed_bits>
 80040b4:	4603      	mov	r3, r0
 80040b6:	733b      	strb	r3, [r7, #12]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	f993 308a 	ldrsb.w	r3, [r3, #138]	@ 0x8a
 80040be:	2b00      	cmp	r3, #0
 80040c0:	dd69      	ble.n	8004196 <ucg_font_decode_glyph+0x140>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	f9b3 0084 	ldrsh.w	r0, [r3, #132]	@ 0x84
 80040c8:	7bfa      	ldrb	r2, [r7, #15]
 80040ca:	7b7b      	ldrb	r3, [r7, #13]
 80040cc:	4413      	add	r3, r2
 80040ce:	b2db      	uxtb	r3, r3
 80040d0:	425b      	negs	r3, r3
 80040d2:	b2db      	uxtb	r3, r3
 80040d4:	b25a      	sxtb	r2, r3
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	f893 308e 	ldrb.w	r3, [r3, #142]	@ 0x8e
 80040dc:	f997 100e 	ldrsb.w	r1, [r7, #14]
 80040e0:	f7ff febe 	bl	8003e60 <ucg_add_vector_x>
 80040e4:	4603      	mov	r3, r0
 80040e6:	461a      	mov	r2, r3
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	f8a3 2084 	strh.w	r2, [r3, #132]	@ 0x84
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	f9b3 0086 	ldrsh.w	r0, [r3, #134]	@ 0x86
 80040f4:	7bfa      	ldrb	r2, [r7, #15]
 80040f6:	7b7b      	ldrb	r3, [r7, #13]
 80040f8:	4413      	add	r3, r2
 80040fa:	b2db      	uxtb	r3, r3
 80040fc:	425b      	negs	r3, r3
 80040fe:	b2db      	uxtb	r3, r3
 8004100:	b25a      	sxtb	r2, r3
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	f893 308e 	ldrb.w	r3, [r3, #142]	@ 0x8e
 8004108:	f997 100e 	ldrsb.w	r1, [r7, #14]
 800410c:	f7ff fe6b 	bl	8003de6 <ucg_add_vector_y>
 8004110:	4603      	mov	r3, r0
 8004112:	461a      	mov	r2, r3
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	f8a3 2086 	strh.w	r2, [r3, #134]	@ 0x86
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2200      	movs	r2, #0
 800411e:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2200      	movs	r2, #0
 8004126:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	f103 0280 	add.w	r2, r3, #128	@ 0x80
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 8004136:	4619      	mov	r1, r3
 8004138:	4610      	mov	r0, r2
 800413a:	f7ff fde6 	bl	8003d0a <ucg_font_decode_get_unsigned_bits>
 800413e:	4603      	mov	r3, r0
 8004140:	72fb      	strb	r3, [r7, #11]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	f103 0280 	add.w	r2, r3, #128	@ 0x80
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 800414e:	4619      	mov	r1, r3
 8004150:	4610      	mov	r0, r2
 8004152:	f7ff fdda 	bl	8003d0a <ucg_font_decode_get_unsigned_bits>
 8004156:	4603      	mov	r3, r0
 8004158:	72bb      	strb	r3, [r7, #10]
 800415a:	7afb      	ldrb	r3, [r7, #11]
 800415c:	2200      	movs	r2, #0
 800415e:	4619      	mov	r1, r3
 8004160:	6878      	ldr	r0, [r7, #4]
 8004162:	f7ff feba 	bl	8003eda <ucg_font_decode_len>
 8004166:	7abb      	ldrb	r3, [r7, #10]
 8004168:	2201      	movs	r2, #1
 800416a:	4619      	mov	r1, r3
 800416c:	6878      	ldr	r0, [r7, #4]
 800416e:	f7ff feb4 	bl	8003eda <ucg_font_decode_len>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	3380      	adds	r3, #128	@ 0x80
 8004176:	2101      	movs	r1, #1
 8004178:	4618      	mov	r0, r3
 800417a:	f7ff fdc6 	bl	8003d0a <ucg_font_decode_get_unsigned_bits>
 800417e:	4603      	mov	r3, r0
 8004180:	2b00      	cmp	r3, #0
 8004182:	d1ea      	bne.n	800415a <ucg_font_decode_glyph+0x104>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	f993 3089 	ldrsb.w	r3, [r3, #137]	@ 0x89
 800418a:	f997 200f 	ldrsb.w	r2, [r7, #15]
 800418e:	429a      	cmp	r2, r3
 8004190:	dd00      	ble.n	8004194 <ucg_font_decode_glyph+0x13e>
 8004192:	e7ca      	b.n	800412a <ucg_font_decode_glyph+0xd4>
 8004194:	bf00      	nop
 8004196:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800419a:	4618      	mov	r0, r3
 800419c:	3710      	adds	r7, #16
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}

080041a2 <ucg_font_get_glyph_data>:
 80041a2:	b480      	push	{r7}
 80041a4:	b085      	sub	sp, #20
 80041a6:	af00      	add	r7, sp, #0
 80041a8:	6078      	str	r0, [r7, #4]
 80041aa:	460b      	mov	r3, r1
 80041ac:	70fb      	strb	r3, [r7, #3]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80041b2:	60fb      	str	r3, [r7, #12]
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	3315      	adds	r3, #21
 80041b8:	60fb      	str	r3, [r7, #12]
 80041ba:	78fb      	ldrb	r3, [r7, #3]
 80041bc:	2b60      	cmp	r3, #96	@ 0x60
 80041be:	d907      	bls.n	80041d0 <ucg_font_get_glyph_data+0x2e>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	@ 0xa4
 80041c6:	461a      	mov	r2, r3
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	4413      	add	r3, r2
 80041cc:	60fb      	str	r3, [r7, #12]
 80041ce:	e009      	b.n	80041e4 <ucg_font_get_glyph_data+0x42>
 80041d0:	78fb      	ldrb	r3, [r7, #3]
 80041d2:	2b40      	cmp	r3, #64	@ 0x40
 80041d4:	d906      	bls.n	80041e4 <ucg_font_get_glyph_data+0x42>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	f8b3 30a2 	ldrh.w	r3, [r3, #162]	@ 0xa2
 80041dc:	461a      	mov	r2, r3
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	4413      	add	r3, r2
 80041e2:	60fb      	str	r3, [r7, #12]
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	3301      	adds	r3, #1
 80041e8:	781b      	ldrb	r3, [r3, #0]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d00e      	beq.n	800420c <ucg_font_get_glyph_data+0x6a>
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	781b      	ldrb	r3, [r3, #0]
 80041f2:	78fa      	ldrb	r2, [r7, #3]
 80041f4:	429a      	cmp	r2, r3
 80041f6:	d101      	bne.n	80041fc <ucg_font_get_glyph_data+0x5a>
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	e009      	b.n	8004210 <ucg_font_get_glyph_data+0x6e>
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	3301      	adds	r3, #1
 8004200:	781b      	ldrb	r3, [r3, #0]
 8004202:	461a      	mov	r2, r3
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	4413      	add	r3, r2
 8004208:	60fb      	str	r3, [r7, #12]
 800420a:	e7eb      	b.n	80041e4 <ucg_font_get_glyph_data+0x42>
 800420c:	bf00      	nop
 800420e:	2300      	movs	r3, #0
 8004210:	4618      	mov	r0, r3
 8004212:	3714      	adds	r7, #20
 8004214:	46bd      	mov	sp, r7
 8004216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421a:	4770      	bx	lr

0800421c <ucg_font_draw_glyph>:
 800421c:	b580      	push	{r7, lr}
 800421e:	b086      	sub	sp, #24
 8004220:	af00      	add	r7, sp, #0
 8004222:	60f8      	str	r0, [r7, #12]
 8004224:	4608      	mov	r0, r1
 8004226:	4611      	mov	r1, r2
 8004228:	461a      	mov	r2, r3
 800422a:	4603      	mov	r3, r0
 800422c:	817b      	strh	r3, [r7, #10]
 800422e:	460b      	mov	r3, r1
 8004230:	813b      	strh	r3, [r7, #8]
 8004232:	4613      	mov	r3, r2
 8004234:	71fb      	strb	r3, [r7, #7]
 8004236:	2300      	movs	r3, #0
 8004238:	82fb      	strh	r3, [r7, #22]
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	897a      	ldrh	r2, [r7, #10]
 800423e:	f8a3 2084 	strh.w	r2, [r3, #132]	@ 0x84
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	893a      	ldrh	r2, [r7, #8]
 8004246:	f8a3 2086 	strh.w	r2, [r3, #134]	@ 0x86
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	79fa      	ldrb	r2, [r7, #7]
 800424e:	f883 208e 	strb.w	r2, [r3, #142]	@ 0x8e
 8004252:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004256:	4619      	mov	r1, r3
 8004258:	68f8      	ldr	r0, [r7, #12]
 800425a:	f7ff ffa2 	bl	80041a2 <ucg_font_get_glyph_data>
 800425e:	6138      	str	r0, [r7, #16]
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d005      	beq.n	8004272 <ucg_font_draw_glyph+0x56>
 8004266:	6939      	ldr	r1, [r7, #16]
 8004268:	68f8      	ldr	r0, [r7, #12]
 800426a:	f7ff fef4 	bl	8004056 <ucg_font_decode_glyph>
 800426e:	4603      	mov	r3, r0
 8004270:	82fb      	strh	r3, [r7, #22]
 8004272:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004276:	4618      	mov	r0, r3
 8004278:	3718      	adds	r7, #24
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}

0800427e <ucg_SetFontMode>:
 800427e:	b480      	push	{r7}
 8004280:	b083      	sub	sp, #12
 8004282:	af00      	add	r7, sp, #0
 8004284:	6078      	str	r0, [r7, #4]
 8004286:	460b      	mov	r3, r1
 8004288:	70fb      	strb	r3, [r7, #3]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	78fa      	ldrb	r2, [r7, #3]
 800428e:	f883 208d 	strb.w	r2, [r3, #141]	@ 0x8d
 8004292:	bf00      	nop
 8004294:	370c      	adds	r7, #12
 8004296:	46bd      	mov	sp, r7
 8004298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429c:	4770      	bx	lr
	...

080042a0 <ucg_DrawGlyph>:
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b086      	sub	sp, #24
 80042a4:	af02      	add	r7, sp, #8
 80042a6:	60f8      	str	r0, [r7, #12]
 80042a8:	4608      	mov	r0, r1
 80042aa:	4611      	mov	r1, r2
 80042ac:	461a      	mov	r2, r3
 80042ae:	4603      	mov	r3, r0
 80042b0:	817b      	strh	r3, [r7, #10]
 80042b2:	460b      	mov	r3, r1
 80042b4:	813b      	strh	r3, [r7, #8]
 80042b6:	4613      	mov	r3, r2
 80042b8:	71fb      	strb	r3, [r7, #7]
 80042ba:	79fb      	ldrb	r3, [r7, #7]
 80042bc:	2b03      	cmp	r3, #3
 80042be:	d837      	bhi.n	8004330 <ucg_DrawGlyph+0x90>
 80042c0:	a201      	add	r2, pc, #4	@ (adr r2, 80042c8 <ucg_DrawGlyph+0x28>)
 80042c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042c6:	bf00      	nop
 80042c8:	080042d9 	.word	0x080042d9
 80042cc:	080042ef 	.word	0x080042ef
 80042d0:	08004305 	.word	0x08004305
 80042d4:	0800431b 	.word	0x0800431b
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80042dc:	68f8      	ldr	r0, [r7, #12]
 80042de:	4798      	blx	r3
 80042e0:	4603      	mov	r3, r0
 80042e2:	b29a      	uxth	r2, r3
 80042e4:	893b      	ldrh	r3, [r7, #8]
 80042e6:	4413      	add	r3, r2
 80042e8:	b29b      	uxth	r3, r3
 80042ea:	813b      	strh	r3, [r7, #8]
 80042ec:	e020      	b.n	8004330 <ucg_DrawGlyph+0x90>
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80042f2:	68f8      	ldr	r0, [r7, #12]
 80042f4:	4798      	blx	r3
 80042f6:	4603      	mov	r3, r0
 80042f8:	897a      	ldrh	r2, [r7, #10]
 80042fa:	b29b      	uxth	r3, r3
 80042fc:	1ad3      	subs	r3, r2, r3
 80042fe:	b29b      	uxth	r3, r3
 8004300:	817b      	strh	r3, [r7, #10]
 8004302:	e015      	b.n	8004330 <ucg_DrawGlyph+0x90>
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004308:	68f8      	ldr	r0, [r7, #12]
 800430a:	4798      	blx	r3
 800430c:	4603      	mov	r3, r0
 800430e:	893a      	ldrh	r2, [r7, #8]
 8004310:	b29b      	uxth	r3, r3
 8004312:	1ad3      	subs	r3, r2, r3
 8004314:	b29b      	uxth	r3, r3
 8004316:	813b      	strh	r3, [r7, #8]
 8004318:	e00a      	b.n	8004330 <ucg_DrawGlyph+0x90>
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800431e:	68f8      	ldr	r0, [r7, #12]
 8004320:	4798      	blx	r3
 8004322:	4603      	mov	r3, r0
 8004324:	b29a      	uxth	r2, r3
 8004326:	897b      	ldrh	r3, [r7, #10]
 8004328:	4413      	add	r3, r2
 800432a:	b29b      	uxth	r3, r3
 800432c:	817b      	strh	r3, [r7, #10]
 800432e:	bf00      	nop
 8004330:	79f8      	ldrb	r0, [r7, #7]
 8004332:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8004336:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 800433a:	7e3b      	ldrb	r3, [r7, #24]
 800433c:	9300      	str	r3, [sp, #0]
 800433e:	4603      	mov	r3, r0
 8004340:	68f8      	ldr	r0, [r7, #12]
 8004342:	f7ff ff6b 	bl	800421c <ucg_font_draw_glyph>
 8004346:	4603      	mov	r3, r0
 8004348:	4618      	mov	r0, r3
 800434a:	3710      	adds	r7, #16
 800434c:	46bd      	mov	sp, r7
 800434e:	bd80      	pop	{r7, pc}

08004350 <task_drawString>:
 8004350:	b580      	push	{r7, lr}
 8004352:	b086      	sub	sp, #24
 8004354:	af02      	add	r7, sp, #8
 8004356:	6078      	str	r0, [r7, #4]
 8004358:	2300      	movs	r3, #0
 800435a:	81fb      	strh	r3, [r7, #14]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	60bb      	str	r3, [r7, #8]
 8004360:	4b45      	ldr	r3, [pc, #276]	@ (8004478 <task_drawString+0x128>)
 8004362:	781b      	ldrb	r3, [r3, #0]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d002      	beq.n	800436e <task_drawString+0x1e>
 8004368:	2b01      	cmp	r3, #1
 800436a:	d01e      	beq.n	80043aa <task_drawString+0x5a>
 800436c:	e07b      	b.n	8004466 <task_drawString+0x116>
 800436e:	4843      	ldr	r0, [pc, #268]	@ (800447c <task_drawString+0x12c>)
 8004370:	f000 fb5d 	bl	8004a2e <bufNumItems>
 8004374:	4603      	mov	r3, r0
 8004376:	2b00      	cmp	r3, #0
 8004378:	d007      	beq.n	800438a <task_drawString+0x3a>
 800437a:	4941      	ldr	r1, [pc, #260]	@ (8004480 <task_drawString+0x130>)
 800437c:	483f      	ldr	r0, [pc, #252]	@ (800447c <task_drawString+0x12c>)
 800437e:	f000 fbef 	bl	8004b60 <bufDeDat>
 8004382:	4b3d      	ldr	r3, [pc, #244]	@ (8004478 <task_drawString+0x128>)
 8004384:	2201      	movs	r2, #1
 8004386:	701a      	strb	r2, [r3, #0]
 8004388:	e071      	b.n	800446e <task_drawString+0x11e>
 800438a:	4b3e      	ldr	r3, [pc, #248]	@ (8004484 <task_drawString+0x134>)
 800438c:	781b      	ldrb	r3, [r3, #0]
 800438e:	2bff      	cmp	r3, #255	@ 0xff
 8004390:	d007      	beq.n	80043a2 <task_drawString+0x52>
 8004392:	4b3c      	ldr	r3, [pc, #240]	@ (8004484 <task_drawString+0x134>)
 8004394:	781b      	ldrb	r3, [r3, #0]
 8004396:	4618      	mov	r0, r3
 8004398:	f7fe fcb0 	bl	8002cfc <TimerStop>
 800439c:	4b39      	ldr	r3, [pc, #228]	@ (8004484 <task_drawString+0x134>)
 800439e:	22ff      	movs	r2, #255	@ 0xff
 80043a0:	701a      	strb	r2, [r3, #0]
 80043a2:	4b35      	ldr	r3, [pc, #212]	@ (8004478 <task_drawString+0x128>)
 80043a4:	2200      	movs	r2, #0
 80043a6:	701a      	strb	r2, [r3, #0]
 80043a8:	e061      	b.n	800446e <task_drawString+0x11e>
 80043aa:	4b35      	ldr	r3, [pc, #212]	@ (8004480 <task_drawString+0x130>)
 80043ac:	689b      	ldr	r3, [r3, #8]
 80043ae:	781b      	ldrb	r3, [r3, #0]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d054      	beq.n	800445e <task_drawString+0x10e>
 80043b4:	4b32      	ldr	r3, [pc, #200]	@ (8004480 <task_drawString+0x130>)
 80043b6:	f9b3 1000 	ldrsh.w	r1, [r3]
 80043ba:	4b31      	ldr	r3, [pc, #196]	@ (8004480 <task_drawString+0x130>)
 80043bc:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80043c0:	4b2f      	ldr	r3, [pc, #188]	@ (8004480 <task_drawString+0x130>)
 80043c2:	7918      	ldrb	r0, [r3, #4]
 80043c4:	4b2e      	ldr	r3, [pc, #184]	@ (8004480 <task_drawString+0x130>)
 80043c6:	689b      	ldr	r3, [r3, #8]
 80043c8:	781b      	ldrb	r3, [r3, #0]
 80043ca:	9300      	str	r3, [sp, #0]
 80043cc:	4603      	mov	r3, r0
 80043ce:	68b8      	ldr	r0, [r7, #8]
 80043d0:	f7ff ff66 	bl	80042a0 <ucg_DrawGlyph>
 80043d4:	4603      	mov	r3, r0
 80043d6:	81fb      	strh	r3, [r7, #14]
 80043d8:	4b29      	ldr	r3, [pc, #164]	@ (8004480 <task_drawString+0x130>)
 80043da:	791b      	ldrb	r3, [r3, #4]
 80043dc:	2b03      	cmp	r3, #3
 80043de:	d837      	bhi.n	8004450 <task_drawString+0x100>
 80043e0:	a201      	add	r2, pc, #4	@ (adr r2, 80043e8 <task_drawString+0x98>)
 80043e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043e6:	bf00      	nop
 80043e8:	080043f9 	.word	0x080043f9
 80043ec:	0800440f 	.word	0x0800440f
 80043f0:	08004425 	.word	0x08004425
 80043f4:	0800443b 	.word	0x0800443b
 80043f8:	4b21      	ldr	r3, [pc, #132]	@ (8004480 <task_drawString+0x130>)
 80043fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80043fe:	b29a      	uxth	r2, r3
 8004400:	89fb      	ldrh	r3, [r7, #14]
 8004402:	4413      	add	r3, r2
 8004404:	b29b      	uxth	r3, r3
 8004406:	b21a      	sxth	r2, r3
 8004408:	4b1d      	ldr	r3, [pc, #116]	@ (8004480 <task_drawString+0x130>)
 800440a:	801a      	strh	r2, [r3, #0]
 800440c:	e021      	b.n	8004452 <task_drawString+0x102>
 800440e:	4b1c      	ldr	r3, [pc, #112]	@ (8004480 <task_drawString+0x130>)
 8004410:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004414:	b29a      	uxth	r2, r3
 8004416:	89fb      	ldrh	r3, [r7, #14]
 8004418:	4413      	add	r3, r2
 800441a:	b29b      	uxth	r3, r3
 800441c:	b21a      	sxth	r2, r3
 800441e:	4b18      	ldr	r3, [pc, #96]	@ (8004480 <task_drawString+0x130>)
 8004420:	805a      	strh	r2, [r3, #2]
 8004422:	e016      	b.n	8004452 <task_drawString+0x102>
 8004424:	4b16      	ldr	r3, [pc, #88]	@ (8004480 <task_drawString+0x130>)
 8004426:	f9b3 3000 	ldrsh.w	r3, [r3]
 800442a:	b29a      	uxth	r2, r3
 800442c:	89fb      	ldrh	r3, [r7, #14]
 800442e:	1ad3      	subs	r3, r2, r3
 8004430:	b29b      	uxth	r3, r3
 8004432:	b21a      	sxth	r2, r3
 8004434:	4b12      	ldr	r3, [pc, #72]	@ (8004480 <task_drawString+0x130>)
 8004436:	801a      	strh	r2, [r3, #0]
 8004438:	e00b      	b.n	8004452 <task_drawString+0x102>
 800443a:	4b11      	ldr	r3, [pc, #68]	@ (8004480 <task_drawString+0x130>)
 800443c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004440:	b29a      	uxth	r2, r3
 8004442:	89fb      	ldrh	r3, [r7, #14]
 8004444:	1ad3      	subs	r3, r2, r3
 8004446:	b29b      	uxth	r3, r3
 8004448:	b21a      	sxth	r2, r3
 800444a:	4b0d      	ldr	r3, [pc, #52]	@ (8004480 <task_drawString+0x130>)
 800444c:	805a      	strh	r2, [r3, #2]
 800444e:	e000      	b.n	8004452 <task_drawString+0x102>
 8004450:	bf00      	nop
 8004452:	4b0b      	ldr	r3, [pc, #44]	@ (8004480 <task_drawString+0x130>)
 8004454:	689b      	ldr	r3, [r3, #8]
 8004456:	3301      	adds	r3, #1
 8004458:	4a09      	ldr	r2, [pc, #36]	@ (8004480 <task_drawString+0x130>)
 800445a:	6093      	str	r3, [r2, #8]
 800445c:	e007      	b.n	800446e <task_drawString+0x11e>
 800445e:	4b06      	ldr	r3, [pc, #24]	@ (8004478 <task_drawString+0x128>)
 8004460:	2200      	movs	r2, #0
 8004462:	701a      	strb	r2, [r3, #0]
 8004464:	e003      	b.n	800446e <task_drawString+0x11e>
 8004466:	4b04      	ldr	r3, [pc, #16]	@ (8004478 <task_drawString+0x128>)
 8004468:	2200      	movs	r2, #0
 800446a:	701a      	strb	r2, [r3, #0]
 800446c:	bf00      	nop
 800446e:	bf00      	nop
 8004470:	3710      	adds	r7, #16
 8004472:	46bd      	mov	sp, r7
 8004474:	bd80      	pop	{r7, pc}
 8004476:	bf00      	nop
 8004478:	20001388 	.word	0x20001388
 800447c:	20000378 	.word	0x20000378
 8004480:	200014d4 	.word	0x200014d4
 8004484:	20000024 	.word	0x20000024

08004488 <ucg_DrawString>:
 8004488:	b580      	push	{r7, lr}
 800448a:	b08a      	sub	sp, #40	@ 0x28
 800448c:	af02      	add	r7, sp, #8
 800448e:	60f8      	str	r0, [r7, #12]
 8004490:	4608      	mov	r0, r1
 8004492:	4611      	mov	r1, r2
 8004494:	461a      	mov	r2, r3
 8004496:	4603      	mov	r3, r0
 8004498:	817b      	strh	r3, [r7, #10]
 800449a:	460b      	mov	r3, r1
 800449c:	813b      	strh	r3, [r7, #8]
 800449e:	4613      	mov	r3, r2
 80044a0:	71fb      	strb	r3, [r7, #7]
 80044a2:	2300      	movs	r3, #0
 80044a4:	83fb      	strh	r3, [r7, #30]
 80044a6:	897b      	ldrh	r3, [r7, #10]
 80044a8:	823b      	strh	r3, [r7, #16]
 80044aa:	893b      	ldrh	r3, [r7, #8]
 80044ac:	827b      	strh	r3, [r7, #18]
 80044ae:	79fb      	ldrb	r3, [r7, #7]
 80044b0:	753b      	strb	r3, [r7, #20]
 80044b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044b4:	61bb      	str	r3, [r7, #24]
 80044b6:	f107 0310 	add.w	r3, r7, #16
 80044ba:	4619      	mov	r1, r3
 80044bc:	480c      	ldr	r0, [pc, #48]	@ (80044f0 <ucg_DrawString+0x68>)
 80044be:	f000 fb01 	bl	8004ac4 <bufEnDat>
 80044c2:	4b0c      	ldr	r3, [pc, #48]	@ (80044f4 <ucg_DrawString+0x6c>)
 80044c4:	781b      	ldrb	r3, [r3, #0]
 80044c6:	2bff      	cmp	r3, #255	@ 0xff
 80044c8:	d10b      	bne.n	80044e2 <ucg_DrawString+0x5a>
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	9300      	str	r3, [sp, #0]
 80044ce:	4b0a      	ldr	r3, [pc, #40]	@ (80044f8 <ucg_DrawString+0x70>)
 80044d0:	22ff      	movs	r2, #255	@ 0xff
 80044d2:	211e      	movs	r1, #30
 80044d4:	4809      	ldr	r0, [pc, #36]	@ (80044fc <ucg_DrawString+0x74>)
 80044d6:	f7fe fbaf 	bl	8002c38 <TimerStart>
 80044da:	4603      	mov	r3, r0
 80044dc:	461a      	mov	r2, r3
 80044de:	4b05      	ldr	r3, [pc, #20]	@ (80044f4 <ucg_DrawString+0x6c>)
 80044e0:	701a      	strb	r2, [r3, #0]
 80044e2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80044e6:	4618      	mov	r0, r3
 80044e8:	3720      	adds	r7, #32
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bd80      	pop	{r7, pc}
 80044ee:	bf00      	nop
 80044f0:	20000378 	.word	0x20000378
 80044f4:	20000024 	.word	0x20000024
 80044f8:	08004351 	.word	0x08004351
 80044fc:	080060e4 	.word	0x080060e4

08004500 <ucg_UpdateRefHeight>:
 8004500:	b480      	push	{r7}
 8004502:	b083      	sub	sp, #12
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800450c:	2b00      	cmp	r3, #0
 800450e:	d05d      	beq.n	80045cc <ucg_UpdateRefHeight+0xcc>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	f993 209d 	ldrsb.w	r2, [r3, #157]	@ 0x9d
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	f883 20ac 	strb.w	r2, [r3, #172]	@ 0xac
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	f993 209e 	ldrsb.w	r2, [r3, #158]	@ 0x9e
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	f883 20ad 	strb.w	r2, [r3, #173]	@ 0xad
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	f893 30ab 	ldrb.w	r3, [r3, #171]	@ 0xab
 800452e:	2b00      	cmp	r3, #0
 8004530:	d04d      	beq.n	80045ce <ucg_UpdateRefHeight+0xce>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	f893 30ab 	ldrb.w	r3, [r3, #171]	@ 0xab
 8004538:	2b01      	cmp	r3, #1
 800453a:	d11c      	bne.n	8004576 <ucg_UpdateRefHeight+0x76>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	f993 20ac 	ldrsb.w	r2, [r3, #172]	@ 0xac
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	f993 309f 	ldrsb.w	r3, [r3, #159]	@ 0x9f
 8004548:	429a      	cmp	r2, r3
 800454a:	da05      	bge.n	8004558 <ucg_UpdateRefHeight+0x58>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	f993 209f 	ldrsb.w	r2, [r3, #159]	@ 0x9f
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	f883 20ac 	strb.w	r2, [r3, #172]	@ 0xac
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	f993 20ad 	ldrsb.w	r2, [r3, #173]	@ 0xad
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	f993 30a0 	ldrsb.w	r3, [r3, #160]	@ 0xa0
 8004564:	429a      	cmp	r2, r3
 8004566:	dd32      	ble.n	80045ce <ucg_UpdateRefHeight+0xce>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	f993 20a0 	ldrsb.w	r2, [r3, #160]	@ 0xa0
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	f883 20ad 	strb.w	r2, [r3, #173]	@ 0xad
 8004574:	e02b      	b.n	80045ce <ucg_UpdateRefHeight+0xce>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	f993 30ac 	ldrsb.w	r3, [r3, #172]	@ 0xac
 800457c:	461a      	mov	r2, r3
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	f993 309a 	ldrsb.w	r3, [r3, #154]	@ 0x9a
 8004584:	4619      	mov	r1, r3
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	f993 309c 	ldrsb.w	r3, [r3, #156]	@ 0x9c
 800458c:	440b      	add	r3, r1
 800458e:	429a      	cmp	r2, r3
 8004590:	da0d      	bge.n	80045ae <ucg_UpdateRefHeight+0xae>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	f993 309a 	ldrsb.w	r3, [r3, #154]	@ 0x9a
 8004598:	b2da      	uxtb	r2, r3
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	f993 309c 	ldrsb.w	r3, [r3, #156]	@ 0x9c
 80045a0:	b2db      	uxtb	r3, r3
 80045a2:	4413      	add	r3, r2
 80045a4:	b2db      	uxtb	r3, r3
 80045a6:	b25a      	sxtb	r2, r3
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	f883 20ac 	strb.w	r2, [r3, #172]	@ 0xac
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	f993 20ad 	ldrsb.w	r2, [r3, #173]	@ 0xad
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	f993 309c 	ldrsb.w	r3, [r3, #156]	@ 0x9c
 80045ba:	429a      	cmp	r2, r3
 80045bc:	dd07      	ble.n	80045ce <ucg_UpdateRefHeight+0xce>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	f993 209c 	ldrsb.w	r2, [r3, #156]	@ 0x9c
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	f883 20ad 	strb.w	r2, [r3, #173]	@ 0xad
 80045ca:	e000      	b.n	80045ce <ucg_UpdateRefHeight+0xce>
 80045cc:	bf00      	nop
 80045ce:	370c      	adds	r7, #12
 80045d0:	46bd      	mov	sp, r7
 80045d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d6:	4770      	bx	lr

080045d8 <ucg_font_calc_vref_font>:
 80045d8:	b480      	push	{r7}
 80045da:	b083      	sub	sp, #12
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
 80045e0:	2300      	movs	r3, #0
 80045e2:	4618      	mov	r0, r3
 80045e4:	370c      	adds	r7, #12
 80045e6:	46bd      	mov	sp, r7
 80045e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ec:	4770      	bx	lr
	...

080045f0 <ucg_SetFontPosBaseline>:
 80045f0:	b480      	push	{r7}
 80045f2:	b083      	sub	sp, #12
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	4a04      	ldr	r2, [pc, #16]	@ (800460c <ucg_SetFontPosBaseline+0x1c>)
 80045fc:	67da      	str	r2, [r3, #124]	@ 0x7c
 80045fe:	bf00      	nop
 8004600:	370c      	adds	r7, #12
 8004602:	46bd      	mov	sp, r7
 8004604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004608:	4770      	bx	lr
 800460a:	bf00      	nop
 800460c:	080045d9 	.word	0x080045d9

08004610 <ucg_SetFont>:
 8004610:	b580      	push	{r7, lr}
 8004612:	b082      	sub	sp, #8
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
 8004618:	6039      	str	r1, [r7, #0]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800461e:	683a      	ldr	r2, [r7, #0]
 8004620:	429a      	cmp	r2, r3
 8004622:	d012      	beq.n	800464a <ucg_SetFont+0x3a>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	683a      	ldr	r2, [r7, #0]
 8004628:	679a      	str	r2, [r3, #120]	@ 0x78
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	3390      	adds	r3, #144	@ 0x90
 800462e:	6839      	ldr	r1, [r7, #0]
 8004630:	4618      	mov	r0, r3
 8004632:	f7ff fac9 	bl	8003bc8 <ucg_read_font_info>
 8004636:	6878      	ldr	r0, [r7, #4]
 8004638:	f7ff ff62 	bl	8004500 <ucg_UpdateRefHeight>
 800463c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004640:	220c      	movs	r2, #12
 8004642:	4904      	ldr	r1, [pc, #16]	@ (8004654 <ucg_SetFont+0x44>)
 8004644:	4804      	ldr	r0, [pc, #16]	@ (8004658 <ucg_SetFont+0x48>)
 8004646:	f000 f9d7 	bl	80049f8 <bufInit>
 800464a:	bf00      	nop
 800464c:	3708      	adds	r7, #8
 800464e:	46bd      	mov	sp, r7
 8004650:	bd80      	pop	{r7, pc}
 8004652:	bf00      	nop
 8004654:	20000378 	.word	0x20000378
 8004658:	20000388 	.word	0x20000388

0800465c <ucg_init_struct>:
 800465c:	b480      	push	{r7}
 800465e:	b083      	sub	sp, #12
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
 8004664:	687a      	ldr	r2, [r7, #4]
 8004666:	7813      	ldrb	r3, [r2, #0]
 8004668:	f36f 0300 	bfc	r3, #0, #1
 800466c:	7013      	strb	r3, [r2, #0]
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2200      	movs	r2, #0
 8004672:	611a      	str	r2, [r3, #16]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2201      	movs	r2, #1
 8004678:	865a      	strh	r2, [r3, #50]	@ 0x32
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2200      	movs	r2, #0
 800467e:	679a      	str	r2, [r3, #120]	@ 0x78
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2201      	movs	r2, #1
 8004684:	f883 208d 	strb.w	r2, [r3, #141]	@ 0x8d
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2200      	movs	r2, #0
 800468c:	f883 20ae 	strb.w	r2, [r3, #174]	@ 0xae
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2200      	movs	r2, #0
 8004694:	f883 20af 	strb.w	r2, [r3, #175]	@ 0xaf
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2200      	movs	r2, #0
 800469c:	f883 20b0 	strb.w	r2, [r3, #176]	@ 0xb0
 80046a0:	bf00      	nop
 80046a2:	370c      	adds	r7, #12
 80046a4:	46bd      	mov	sp, r7
 80046a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046aa:	4770      	bx	lr

080046ac <ucg_Init>:
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b086      	sub	sp, #24
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	60f8      	str	r0, [r7, #12]
 80046b4:	60b9      	str	r1, [r7, #8]
 80046b6:	607a      	str	r2, [r7, #4]
 80046b8:	603b      	str	r3, [r7, #0]
 80046ba:	68f8      	ldr	r0, [r7, #12]
 80046bc:	f7ff ffce 	bl	800465c <ucg_init_struct>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d103      	bne.n	80046ce <ucg_Init+0x22>
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	4a0e      	ldr	r2, [pc, #56]	@ (8004704 <ucg_Init+0x58>)
 80046ca:	60da      	str	r2, [r3, #12]
 80046cc:	e002      	b.n	80046d4 <ucg_Init+0x28>
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	687a      	ldr	r2, [r7, #4]
 80046d2:	60da      	str	r2, [r3, #12]
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	68ba      	ldr	r2, [r7, #8]
 80046d8:	609a      	str	r2, [r3, #8]
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	683a      	ldr	r2, [r7, #0]
 80046de:	61da      	str	r2, [r3, #28]
 80046e0:	68f8      	ldr	r0, [r7, #12]
 80046e2:	f7ff ff85 	bl	80045f0 <ucg_SetFontPosBaseline>
 80046e6:	68f8      	ldr	r0, [r7, #12]
 80046e8:	f7ff f996 	bl	8003a18 <ucg_PowerUp>
 80046ec:	4603      	mov	r3, r0
 80046ee:	82fb      	strh	r3, [r7, #22]
 80046f0:	68f8      	ldr	r0, [r7, #12]
 80046f2:	f7ff f9d6 	bl	8003aa2 <ucg_GetDimension>
 80046f6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80046fa:	4618      	mov	r0, r3
 80046fc:	3718      	adds	r7, #24
 80046fe:	46bd      	mov	sp, r7
 8004700:	bd80      	pop	{r7, pc}
 8004702:	bf00      	nop
 8004704:	0800367d 	.word	0x0800367d

08004708 <ucg_Draw90Line>:
 8004708:	b580      	push	{r7, lr}
 800470a:	b084      	sub	sp, #16
 800470c:	af00      	add	r7, sp, #0
 800470e:	60f8      	str	r0, [r7, #12]
 8004710:	4608      	mov	r0, r1
 8004712:	4611      	mov	r1, r2
 8004714:	461a      	mov	r2, r3
 8004716:	4603      	mov	r3, r0
 8004718:	817b      	strh	r3, [r7, #10]
 800471a:	460b      	mov	r3, r1
 800471c:	813b      	strh	r3, [r7, #8]
 800471e:	4613      	mov	r3, r2
 8004720:	80fb      	strh	r3, [r7, #6]
 8004722:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8004726:	68f9      	ldr	r1, [r7, #12]
 8004728:	4613      	mov	r3, r2
 800472a:	005b      	lsls	r3, r3, #1
 800472c:	4413      	add	r3, r2
 800472e:	440b      	add	r3, r1
 8004730:	333a      	adds	r3, #58	@ 0x3a
 8004732:	781a      	ldrb	r2, [r3, #0]
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 800473a:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800473e:	68f9      	ldr	r1, [r7, #12]
 8004740:	4613      	mov	r3, r2
 8004742:	005b      	lsls	r3, r3, #1
 8004744:	4413      	add	r3, r2
 8004746:	440b      	add	r3, r1
 8004748:	333b      	adds	r3, #59	@ 0x3b
 800474a:	781a      	ldrb	r2, [r3, #0]
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
 8004752:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8004756:	68f9      	ldr	r1, [r7, #12]
 8004758:	4613      	mov	r3, r2
 800475a:	005b      	lsls	r3, r3, #1
 800475c:	4413      	add	r3, r2
 800475e:	440b      	add	r3, r1
 8004760:	333c      	adds	r3, #60	@ 0x3c
 8004762:	781a      	ldrb	r2, [r3, #0]
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	897a      	ldrh	r2, [r7, #10]
 800476e:	849a      	strh	r2, [r3, #36]	@ 0x24
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	893a      	ldrh	r2, [r7, #8]
 8004774:	84da      	strh	r2, [r3, #38]	@ 0x26
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	88fa      	ldrh	r2, [r7, #6]
 800477a:	859a      	strh	r2, [r3, #44]	@ 0x2c
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	8b3a      	ldrh	r2, [r7, #24]
 8004780:	85da      	strh	r2, [r3, #46]	@ 0x2e
 8004782:	68f8      	ldr	r0, [r7, #12]
 8004784:	f7ff f99f 	bl	8003ac6 <ucg_DrawL90FXWithArg>
 8004788:	bf00      	nop
 800478a:	3710      	adds	r7, #16
 800478c:	46bd      	mov	sp, r7
 800478e:	bd80      	pop	{r7, pc}

08004790 <ucg_DrawHLine>:
 8004790:	b580      	push	{r7, lr}
 8004792:	b086      	sub	sp, #24
 8004794:	af02      	add	r7, sp, #8
 8004796:	60f8      	str	r0, [r7, #12]
 8004798:	4608      	mov	r0, r1
 800479a:	4611      	mov	r1, r2
 800479c:	461a      	mov	r2, r3
 800479e:	4603      	mov	r3, r0
 80047a0:	817b      	strh	r3, [r7, #10]
 80047a2:	460b      	mov	r3, r1
 80047a4:	813b      	strh	r3, [r7, #8]
 80047a6:	4613      	mov	r3, r2
 80047a8:	80fb      	strh	r3, [r7, #6]
 80047aa:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80047ae:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80047b2:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80047b6:	2300      	movs	r3, #0
 80047b8:	9301      	str	r3, [sp, #4]
 80047ba:	2300      	movs	r3, #0
 80047bc:	9300      	str	r3, [sp, #0]
 80047be:	4603      	mov	r3, r0
 80047c0:	68f8      	ldr	r0, [r7, #12]
 80047c2:	f7ff ffa1 	bl	8004708 <ucg_Draw90Line>
 80047c6:	bf00      	nop
 80047c8:	3710      	adds	r7, #16
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bd80      	pop	{r7, pc}

080047ce <ucg_SetColor>:
 80047ce:	b480      	push	{r7}
 80047d0:	b083      	sub	sp, #12
 80047d2:	af00      	add	r7, sp, #0
 80047d4:	6078      	str	r0, [r7, #4]
 80047d6:	4608      	mov	r0, r1
 80047d8:	4611      	mov	r1, r2
 80047da:	461a      	mov	r2, r3
 80047dc:	4603      	mov	r3, r0
 80047de:	70fb      	strb	r3, [r7, #3]
 80047e0:	460b      	mov	r3, r1
 80047e2:	70bb      	strb	r3, [r7, #2]
 80047e4:	4613      	mov	r3, r2
 80047e6:	707b      	strb	r3, [r7, #1]
 80047e8:	78fa      	ldrb	r2, [r7, #3]
 80047ea:	6879      	ldr	r1, [r7, #4]
 80047ec:	4613      	mov	r3, r2
 80047ee:	005b      	lsls	r3, r3, #1
 80047f0:	4413      	add	r3, r2
 80047f2:	440b      	add	r3, r1
 80047f4:	333a      	adds	r3, #58	@ 0x3a
 80047f6:	78ba      	ldrb	r2, [r7, #2]
 80047f8:	701a      	strb	r2, [r3, #0]
 80047fa:	78fa      	ldrb	r2, [r7, #3]
 80047fc:	6879      	ldr	r1, [r7, #4]
 80047fe:	4613      	mov	r3, r2
 8004800:	005b      	lsls	r3, r3, #1
 8004802:	4413      	add	r3, r2
 8004804:	440b      	add	r3, r1
 8004806:	333b      	adds	r3, #59	@ 0x3b
 8004808:	787a      	ldrb	r2, [r7, #1]
 800480a:	701a      	strb	r2, [r3, #0]
 800480c:	78fa      	ldrb	r2, [r7, #3]
 800480e:	6879      	ldr	r1, [r7, #4]
 8004810:	4613      	mov	r3, r2
 8004812:	005b      	lsls	r3, r3, #1
 8004814:	4413      	add	r3, r2
 8004816:	440b      	add	r3, r1
 8004818:	333c      	adds	r3, #60	@ 0x3c
 800481a:	7c3a      	ldrb	r2, [r7, #16]
 800481c:	701a      	strb	r2, [r3, #0]
 800481e:	bf00      	nop
 8004820:	370c      	adds	r7, #12
 8004822:	46bd      	mov	sp, r7
 8004824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004828:	4770      	bx	lr

0800482a <ucg_UndoRotate>:
 800482a:	b580      	push	{r7, lr}
 800482c:	b082      	sub	sp, #8
 800482e:	af00      	add	r7, sp, #0
 8004830:	6078      	str	r0, [r7, #4]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	691b      	ldr	r3, [r3, #16]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d006      	beq.n	8004848 <ucg_UndoRotate+0x1e>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	691a      	ldr	r2, [r3, #16]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	609a      	str	r2, [r3, #8]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2200      	movs	r2, #0
 8004846:	611a      	str	r2, [r3, #16]
 8004848:	6878      	ldr	r0, [r7, #4]
 800484a:	f7ff f92a 	bl	8003aa2 <ucg_GetDimension>
 800484e:	6878      	ldr	r0, [r7, #4]
 8004850:	f7ff f90f 	bl	8003a72 <ucg_SetMaxClipRange>
 8004854:	bf00      	nop
 8004856:	3708      	adds	r7, #8
 8004858:	46bd      	mov	sp, r7
 800485a:	bd80      	pop	{r7, pc}

0800485c <ucg_rotate_180_xy>:
 800485c:	b480      	push	{r7}
 800485e:	b085      	sub	sp, #20
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
 8004864:	6039      	str	r1, [r7, #0]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	8adb      	ldrh	r3, [r3, #22]
 800486a:	81fb      	strh	r3, [r7, #14]
 800486c:	89fa      	ldrh	r2, [r7, #14]
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004874:	b29b      	uxth	r3, r3
 8004876:	1ad3      	subs	r3, r2, r3
 8004878:	b29b      	uxth	r3, r3
 800487a:	81fb      	strh	r3, [r7, #14]
 800487c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004880:	b29b      	uxth	r3, r3
 8004882:	3b01      	subs	r3, #1
 8004884:	b29b      	uxth	r3, r3
 8004886:	81fb      	strh	r3, [r7, #14]
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	89fa      	ldrh	r2, [r7, #14]
 800488c:	805a      	strh	r2, [r3, #2]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	8a9b      	ldrh	r3, [r3, #20]
 8004892:	81bb      	strh	r3, [r7, #12]
 8004894:	89ba      	ldrh	r2, [r7, #12]
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	f9b3 3000 	ldrsh.w	r3, [r3]
 800489c:	b29b      	uxth	r3, r3
 800489e:	1ad3      	subs	r3, r2, r3
 80048a0:	b29b      	uxth	r3, r3
 80048a2:	81bb      	strh	r3, [r7, #12]
 80048a4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80048a8:	b29b      	uxth	r3, r3
 80048aa:	3b01      	subs	r3, #1
 80048ac:	b29b      	uxth	r3, r3
 80048ae:	81bb      	strh	r3, [r7, #12]
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	89ba      	ldrh	r2, [r7, #12]
 80048b4:	801a      	strh	r2, [r3, #0]
 80048b6:	bf00      	nop
 80048b8:	3714      	adds	r7, #20
 80048ba:	46bd      	mov	sp, r7
 80048bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c0:	4770      	bx	lr
	...

080048c4 <ucg_dev_rotate180>:
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b084      	sub	sp, #16
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	60f8      	str	r0, [r7, #12]
 80048cc:	460b      	mov	r3, r1
 80048ce:	607a      	str	r2, [r7, #4]
 80048d0:	817b      	strh	r3, [r7, #10]
 80048d2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80048d6:	3b0c      	subs	r3, #12
 80048d8:	2b0b      	cmp	r3, #11
 80048da:	d866      	bhi.n	80049aa <ucg_dev_rotate180+0xe6>
 80048dc:	a201      	add	r2, pc, #4	@ (adr r2, 80048e4 <ucg_dev_rotate180+0x20>)
 80048de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048e2:	bf00      	nop
 80048e4:	08004933 	.word	0x08004933
 80048e8:	080049ab 	.word	0x080049ab
 80048ec:	080049ab 	.word	0x080049ab
 80048f0:	08004915 	.word	0x08004915
 80048f4:	080049ab 	.word	0x080049ab
 80048f8:	080049ab 	.word	0x080049ab
 80048fc:	080049ab 	.word	0x080049ab
 8004900:	080049ab 	.word	0x080049ab
 8004904:	0800497b 	.word	0x0800497b
 8004908:	0800497b 	.word	0x0800497b
 800490c:	080049ab 	.word	0x080049ab
 8004910:	0800497b 	.word	0x0800497b
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	691b      	ldr	r3, [r3, #16]
 8004918:	68fa      	ldr	r2, [r7, #12]
 800491a:	3214      	adds	r2, #20
 800491c:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8004920:	68f8      	ldr	r0, [r7, #12]
 8004922:	4798      	blx	r3
 8004924:	687a      	ldr	r2, [r7, #4]
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	3314      	adds	r3, #20
 800492a:	6818      	ldr	r0, [r3, #0]
 800492c:	6010      	str	r0, [r2, #0]
 800492e:	2301      	movs	r3, #1
 8004930:	e043      	b.n	80049ba <ucg_dev_rotate180+0xf6>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004938:	b29a      	uxth	r2, r3
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8004940:	b29b      	uxth	r3, r3
 8004942:	4413      	add	r3, r2
 8004944:	b29b      	uxth	r3, r3
 8004946:	3b01      	subs	r3, #1
 8004948:	b29b      	uxth	r3, r3
 800494a:	b21a      	sxth	r2, r3
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	805a      	strh	r2, [r3, #2]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004956:	b29a      	uxth	r2, r3
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800495e:	b29b      	uxth	r3, r3
 8004960:	4413      	add	r3, r2
 8004962:	b29b      	uxth	r3, r3
 8004964:	3b01      	subs	r3, #1
 8004966:	b29b      	uxth	r3, r3
 8004968:	b21a      	sxth	r2, r3
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	801a      	strh	r2, [r3, #0]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	4619      	mov	r1, r3
 8004972:	68f8      	ldr	r0, [r7, #12]
 8004974:	f7ff ff72 	bl	800485c <ucg_rotate_180_xy>
 8004978:	e017      	b.n	80049aa <ucg_dev_rotate180+0xe6>
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	@ 0x2e
 8004980:	b29b      	uxth	r3, r3
 8004982:	3302      	adds	r3, #2
 8004984:	b29b      	uxth	r3, r3
 8004986:	b21a      	sxth	r2, r3
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	85da      	strh	r2, [r3, #46]	@ 0x2e
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	@ 0x2e
 8004992:	f003 0303 	and.w	r3, r3, #3
 8004996:	b21a      	sxth	r2, r3
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	85da      	strh	r2, [r3, #46]	@ 0x2e
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	3324      	adds	r3, #36	@ 0x24
 80049a0:	4619      	mov	r1, r3
 80049a2:	68f8      	ldr	r0, [r7, #12]
 80049a4:	f7ff ff5a 	bl	800485c <ucg_rotate_180_xy>
 80049a8:	bf00      	nop
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	691b      	ldr	r3, [r3, #16]
 80049ae:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80049b2:	687a      	ldr	r2, [r7, #4]
 80049b4:	68f8      	ldr	r0, [r7, #12]
 80049b6:	4798      	blx	r3
 80049b8:	4603      	mov	r3, r0
 80049ba:	4618      	mov	r0, r3
 80049bc:	3710      	adds	r7, #16
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd80      	pop	{r7, pc}
 80049c2:	bf00      	nop

080049c4 <ucg_SetRotate180>:
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b082      	sub	sp, #8
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
 80049cc:	6878      	ldr	r0, [r7, #4]
 80049ce:	f7ff ff2c 	bl	800482a <ucg_UndoRotate>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	689a      	ldr	r2, [r3, #8]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	611a      	str	r2, [r3, #16]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	4a05      	ldr	r2, [pc, #20]	@ (80049f4 <ucg_SetRotate180+0x30>)
 80049de:	609a      	str	r2, [r3, #8]
 80049e0:	6878      	ldr	r0, [r7, #4]
 80049e2:	f7ff f85e 	bl	8003aa2 <ucg_GetDimension>
 80049e6:	6878      	ldr	r0, [r7, #4]
 80049e8:	f7ff f843 	bl	8003a72 <ucg_SetMaxClipRange>
 80049ec:	bf00      	nop
 80049ee:	3708      	adds	r7, #8
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bd80      	pop	{r7, pc}
 80049f4:	080048c5 	.word	0x080048c5

080049f8 <bufInit>:
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b084      	sub	sp, #16
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	60f8      	str	r0, [r7, #12]
 8004a00:	60b9      	str	r1, [r7, #8]
 8004a02:	4611      	mov	r1, r2
 8004a04:	461a      	mov	r2, r3
 8004a06:	460b      	mov	r3, r1
 8004a08:	71fb      	strb	r3, [r7, #7]
 8004a0a:	4613      	mov	r3, r2
 8004a0c:	80bb      	strh	r3, [r7, #4]
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	88ba      	ldrh	r2, [r7, #4]
 8004a12:	801a      	strh	r2, [r3, #0]
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	79fa      	ldrb	r2, [r7, #7]
 8004a18:	711a      	strb	r2, [r3, #4]
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	68fa      	ldr	r2, [r7, #12]
 8004a1e:	60da      	str	r2, [r3, #12]
 8004a20:	68b8      	ldr	r0, [r7, #8]
 8004a22:	f000 f836 	bl	8004a92 <bufFlush>
 8004a26:	bf00      	nop
 8004a28:	3710      	adds	r7, #16
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bd80      	pop	{r7, pc}

08004a2e <bufNumItems>:
 8004a2e:	b480      	push	{r7}
 8004a30:	b083      	sub	sp, #12
 8004a32:	af00      	add	r7, sp, #0
 8004a34:	6078      	str	r0, [r7, #4]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	885b      	ldrh	r3, [r3, #2]
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	370c      	adds	r7, #12
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a44:	4770      	bx	lr

08004a46 <bufIsFull>:
 8004a46:	b480      	push	{r7}
 8004a48:	b083      	sub	sp, #12
 8004a4a:	af00      	add	r7, sp, #0
 8004a4c:	6078      	str	r0, [r7, #4]
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	885a      	ldrh	r2, [r3, #2]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	881b      	ldrh	r3, [r3, #0]
 8004a56:	429a      	cmp	r2, r3
 8004a58:	bf2c      	ite	cs
 8004a5a:	2301      	movcs	r3, #1
 8004a5c:	2300      	movcc	r3, #0
 8004a5e:	b2db      	uxtb	r3, r3
 8004a60:	4618      	mov	r0, r3
 8004a62:	370c      	adds	r7, #12
 8004a64:	46bd      	mov	sp, r7
 8004a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6a:	4770      	bx	lr

08004a6c <bufIsEmpty>:
 8004a6c:	b480      	push	{r7}
 8004a6e:	b083      	sub	sp, #12
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	88da      	ldrh	r2, [r3, #6]
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	891b      	ldrh	r3, [r3, #8]
 8004a7c:	429a      	cmp	r2, r3
 8004a7e:	bf0c      	ite	eq
 8004a80:	2301      	moveq	r3, #1
 8004a82:	2300      	movne	r3, #0
 8004a84:	b2db      	uxtb	r3, r3
 8004a86:	4618      	mov	r0, r3
 8004a88:	370c      	adds	r7, #12
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a90:	4770      	bx	lr

08004a92 <bufFlush>:
 8004a92:	b580      	push	{r7, lr}
 8004a94:	b082      	sub	sp, #8
 8004a96:	af00      	add	r7, sp, #0
 8004a98:	6078      	str	r0, [r7, #4]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	80da      	strh	r2, [r3, #6]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	811a      	strh	r2, [r3, #8]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	805a      	strh	r2, [r3, #2]
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	68d8      	ldr	r0, [r3, #12]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	881b      	ldrh	r3, [r3, #0]
 8004ab4:	461a      	mov	r2, r3
 8004ab6:	2100      	movs	r1, #0
 8004ab8:	f000 f894 	bl	8004be4 <memsetl>
 8004abc:	bf00      	nop
 8004abe:	3708      	adds	r7, #8
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bd80      	pop	{r7, pc}

08004ac4 <bufEnDat>:
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b084      	sub	sp, #16
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
 8004acc:	6039      	str	r1, [r7, #0]
 8004ace:	b672      	cpsid	i
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	73fb      	strb	r3, [r7, #15]
 8004ad4:	e021      	b.n	8004b1a <bufEnDat+0x56>
 8004ad6:	7bfb      	ldrb	r3, [r7, #15]
 8004ad8:	683a      	ldr	r2, [r7, #0]
 8004ada:	441a      	add	r2, r3
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	68db      	ldr	r3, [r3, #12]
 8004ae0:	6879      	ldr	r1, [r7, #4]
 8004ae2:	88c9      	ldrh	r1, [r1, #6]
 8004ae4:	440b      	add	r3, r1
 8004ae6:	7812      	ldrb	r2, [r2, #0]
 8004ae8:	701a      	strb	r2, [r3, #0]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	88db      	ldrh	r3, [r3, #6]
 8004aee:	3301      	adds	r3, #1
 8004af0:	b29b      	uxth	r3, r3
 8004af2:	b21a      	sxth	r2, r3
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	881b      	ldrh	r3, [r3, #0]
 8004af8:	3b01      	subs	r3, #1
 8004afa:	b29b      	uxth	r3, r3
 8004afc:	b21b      	sxth	r3, r3
 8004afe:	4013      	ands	r3, r2
 8004b00:	b21b      	sxth	r3, r3
 8004b02:	b29a      	uxth	r2, r3
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	80da      	strh	r2, [r3, #6]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	885b      	ldrh	r3, [r3, #2]
 8004b0c:	3301      	adds	r3, #1
 8004b0e:	b29a      	uxth	r2, r3
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	805a      	strh	r2, [r3, #2]
 8004b14:	7bfb      	ldrb	r3, [r7, #15]
 8004b16:	3301      	adds	r3, #1
 8004b18:	73fb      	strb	r3, [r7, #15]
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	791b      	ldrb	r3, [r3, #4]
 8004b1e:	7bfa      	ldrb	r2, [r7, #15]
 8004b20:	429a      	cmp	r2, r3
 8004b22:	d3d8      	bcc.n	8004ad6 <bufEnDat+0x12>
 8004b24:	6878      	ldr	r0, [r7, #4]
 8004b26:	f7ff ff8e 	bl	8004a46 <bufIsFull>
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d011      	beq.n	8004b54 <bufEnDat+0x90>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	891a      	ldrh	r2, [r3, #8]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	791b      	ldrb	r3, [r3, #4]
 8004b38:	b29b      	uxth	r3, r3
 8004b3a:	4413      	add	r3, r2
 8004b3c:	b29b      	uxth	r3, r3
 8004b3e:	b21a      	sxth	r2, r3
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	881b      	ldrh	r3, [r3, #0]
 8004b44:	3b01      	subs	r3, #1
 8004b46:	b29b      	uxth	r3, r3
 8004b48:	b21b      	sxth	r3, r3
 8004b4a:	4013      	ands	r3, r2
 8004b4c:	b21b      	sxth	r3, r3
 8004b4e:	b29a      	uxth	r2, r3
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	811a      	strh	r2, [r3, #8]
 8004b54:	b662      	cpsie	i
 8004b56:	2300      	movs	r3, #0
 8004b58:	4618      	mov	r0, r3
 8004b5a:	3710      	adds	r7, #16
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bd80      	pop	{r7, pc}

08004b60 <bufDeDat>:
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b084      	sub	sp, #16
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
 8004b68:	6039      	str	r1, [r7, #0]
 8004b6a:	b672      	cpsid	i
 8004b6c:	6878      	ldr	r0, [r7, #4]
 8004b6e:	f7ff ff7d 	bl	8004a6c <bufIsEmpty>
 8004b72:	4603      	mov	r3, r0
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d005      	beq.n	8004b84 <bufDeDat+0x24>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	805a      	strh	r2, [r3, #2]
 8004b7e:	b662      	cpsie	i
 8004b80:	2302      	movs	r3, #2
 8004b82:	e02b      	b.n	8004bdc <bufDeDat+0x7c>
 8004b84:	2300      	movs	r3, #0
 8004b86:	73fb      	strb	r3, [r7, #15]
 8004b88:	e021      	b.n	8004bce <bufDeDat+0x6e>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	68db      	ldr	r3, [r3, #12]
 8004b8e:	687a      	ldr	r2, [r7, #4]
 8004b90:	8912      	ldrh	r2, [r2, #8]
 8004b92:	441a      	add	r2, r3
 8004b94:	7bfb      	ldrb	r3, [r7, #15]
 8004b96:	6839      	ldr	r1, [r7, #0]
 8004b98:	440b      	add	r3, r1
 8004b9a:	7812      	ldrb	r2, [r2, #0]
 8004b9c:	701a      	strb	r2, [r3, #0]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	891b      	ldrh	r3, [r3, #8]
 8004ba2:	3301      	adds	r3, #1
 8004ba4:	b29b      	uxth	r3, r3
 8004ba6:	b21a      	sxth	r2, r3
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	881b      	ldrh	r3, [r3, #0]
 8004bac:	3b01      	subs	r3, #1
 8004bae:	b29b      	uxth	r3, r3
 8004bb0:	b21b      	sxth	r3, r3
 8004bb2:	4013      	ands	r3, r2
 8004bb4:	b21b      	sxth	r3, r3
 8004bb6:	b29a      	uxth	r2, r3
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	811a      	strh	r2, [r3, #8]
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	885b      	ldrh	r3, [r3, #2]
 8004bc0:	3b01      	subs	r3, #1
 8004bc2:	b29a      	uxth	r2, r3
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	805a      	strh	r2, [r3, #2]
 8004bc8:	7bfb      	ldrb	r3, [r7, #15]
 8004bca:	3301      	adds	r3, #1
 8004bcc:	73fb      	strb	r3, [r7, #15]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	791b      	ldrb	r3, [r3, #4]
 8004bd2:	7bfa      	ldrb	r2, [r7, #15]
 8004bd4:	429a      	cmp	r2, r3
 8004bd6:	d3d8      	bcc.n	8004b8a <bufDeDat+0x2a>
 8004bd8:	b662      	cpsie	i
 8004bda:	2300      	movs	r3, #0
 8004bdc:	4618      	mov	r0, r3
 8004bde:	3710      	adds	r7, #16
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bd80      	pop	{r7, pc}

08004be4 <memsetl>:
 8004be4:	b480      	push	{r7}
 8004be6:	b083      	sub	sp, #12
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
 8004bec:	460b      	mov	r3, r1
 8004bee:	70fb      	strb	r3, [r7, #3]
 8004bf0:	4613      	mov	r3, r2
 8004bf2:	803b      	strh	r3, [r7, #0]
 8004bf4:	e004      	b.n	8004c00 <memsetl+0x1c>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	1c5a      	adds	r2, r3, #1
 8004bfa:	607a      	str	r2, [r7, #4]
 8004bfc:	78fa      	ldrb	r2, [r7, #3]
 8004bfe:	701a      	strb	r2, [r3, #0]
 8004c00:	883b      	ldrh	r3, [r7, #0]
 8004c02:	1e5a      	subs	r2, r3, #1
 8004c04:	803a      	strh	r2, [r7, #0]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d1f5      	bne.n	8004bf6 <memsetl+0x12>
 8004c0a:	bf00      	nop
 8004c0c:	370c      	adds	r7, #12
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c14:	4770      	bx	lr

08004c16 <USART_ReceiveData>:
 8004c16:	b480      	push	{r7}
 8004c18:	b083      	sub	sp, #12
 8004c1a:	af00      	add	r7, sp, #0
 8004c1c:	6078      	str	r0, [r7, #4]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	889b      	ldrh	r3, [r3, #4]
 8004c22:	b29b      	uxth	r3, r3
 8004c24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c28:	b29b      	uxth	r3, r3
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	370c      	adds	r7, #12
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c34:	4770      	bx	lr

08004c36 <USART_GetITStatus>:
 8004c36:	b480      	push	{r7}
 8004c38:	b087      	sub	sp, #28
 8004c3a:	af00      	add	r7, sp, #0
 8004c3c:	6078      	str	r0, [r7, #4]
 8004c3e:	460b      	mov	r3, r1
 8004c40:	807b      	strh	r3, [r7, #2]
 8004c42:	2300      	movs	r3, #0
 8004c44:	60fb      	str	r3, [r7, #12]
 8004c46:	2300      	movs	r3, #0
 8004c48:	617b      	str	r3, [r7, #20]
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	60bb      	str	r3, [r7, #8]
 8004c4e:	2300      	movs	r3, #0
 8004c50:	74fb      	strb	r3, [r7, #19]
 8004c52:	887b      	ldrh	r3, [r7, #2]
 8004c54:	b2db      	uxtb	r3, r3
 8004c56:	095b      	lsrs	r3, r3, #5
 8004c58:	b2db      	uxtb	r3, r3
 8004c5a:	60bb      	str	r3, [r7, #8]
 8004c5c:	887b      	ldrh	r3, [r7, #2]
 8004c5e:	f003 031f 	and.w	r3, r3, #31
 8004c62:	617b      	str	r3, [r7, #20]
 8004c64:	2201      	movs	r2, #1
 8004c66:	697b      	ldr	r3, [r7, #20]
 8004c68:	fa02 f303 	lsl.w	r3, r2, r3
 8004c6c:	617b      	str	r3, [r7, #20]
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	2b01      	cmp	r3, #1
 8004c72:	d107      	bne.n	8004c84 <USART_GetITStatus+0x4e>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	899b      	ldrh	r3, [r3, #12]
 8004c78:	b29b      	uxth	r3, r3
 8004c7a:	461a      	mov	r2, r3
 8004c7c:	697b      	ldr	r3, [r7, #20]
 8004c7e:	4013      	ands	r3, r2
 8004c80:	617b      	str	r3, [r7, #20]
 8004c82:	e011      	b.n	8004ca8 <USART_GetITStatus+0x72>
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	2b02      	cmp	r3, #2
 8004c88:	d107      	bne.n	8004c9a <USART_GetITStatus+0x64>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	8a1b      	ldrh	r3, [r3, #16]
 8004c8e:	b29b      	uxth	r3, r3
 8004c90:	461a      	mov	r2, r3
 8004c92:	697b      	ldr	r3, [r7, #20]
 8004c94:	4013      	ands	r3, r2
 8004c96:	617b      	str	r3, [r7, #20]
 8004c98:	e006      	b.n	8004ca8 <USART_GetITStatus+0x72>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	8a9b      	ldrh	r3, [r3, #20]
 8004c9e:	b29b      	uxth	r3, r3
 8004ca0:	461a      	mov	r2, r3
 8004ca2:	697b      	ldr	r3, [r7, #20]
 8004ca4:	4013      	ands	r3, r2
 8004ca6:	617b      	str	r3, [r7, #20]
 8004ca8:	887b      	ldrh	r3, [r7, #2]
 8004caa:	0a1b      	lsrs	r3, r3, #8
 8004cac:	b29b      	uxth	r3, r3
 8004cae:	60fb      	str	r3, [r7, #12]
 8004cb0:	2201      	movs	r2, #1
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8004cb8:	60fb      	str	r3, [r7, #12]
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	881b      	ldrh	r3, [r3, #0]
 8004cbe:	b29b      	uxth	r3, r3
 8004cc0:	461a      	mov	r2, r3
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	4013      	ands	r3, r2
 8004cc6:	60fb      	str	r3, [r7, #12]
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d005      	beq.n	8004cda <USART_GetITStatus+0xa4>
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d002      	beq.n	8004cda <USART_GetITStatus+0xa4>
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	74fb      	strb	r3, [r7, #19]
 8004cd8:	e001      	b.n	8004cde <USART_GetITStatus+0xa8>
 8004cda:	2300      	movs	r3, #0
 8004cdc:	74fb      	strb	r3, [r7, #19]
 8004cde:	7cfb      	ldrb	r3, [r7, #19]
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	371c      	adds	r7, #28
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cea:	4770      	bx	lr

08004cec <USART_ClearITPendingBit>:
 8004cec:	b480      	push	{r7}
 8004cee:	b085      	sub	sp, #20
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
 8004cf4:	460b      	mov	r3, r1
 8004cf6:	807b      	strh	r3, [r7, #2]
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	81fb      	strh	r3, [r7, #14]
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	81bb      	strh	r3, [r7, #12]
 8004d00:	887b      	ldrh	r3, [r7, #2]
 8004d02:	0a1b      	lsrs	r3, r3, #8
 8004d04:	81fb      	strh	r3, [r7, #14]
 8004d06:	89fb      	ldrh	r3, [r7, #14]
 8004d08:	2201      	movs	r2, #1
 8004d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d0e:	81bb      	strh	r3, [r7, #12]
 8004d10:	89bb      	ldrh	r3, [r7, #12]
 8004d12:	43db      	mvns	r3, r3
 8004d14:	b29a      	uxth	r2, r3
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	801a      	strh	r2, [r3, #0]
 8004d1a:	bf00      	nop
 8004d1c:	3714      	adds	r7, #20
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d24:	4770      	bx	lr

08004d26 <ucg_clip_is_x_visible>:
 8004d26:	b480      	push	{r7}
 8004d28:	b085      	sub	sp, #20
 8004d2a:	af00      	add	r7, sp, #0
 8004d2c:	6078      	str	r0, [r7, #4]
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8004d32:	81fb      	strh	r3, [r7, #14]
 8004d34:	89fa      	ldrh	r2, [r7, #14]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	f9b3 3070 	ldrsh.w	r3, [r3, #112]	@ 0x70
 8004d3c:	b29b      	uxth	r3, r3
 8004d3e:	1ad3      	subs	r3, r2, r3
 8004d40:	b29b      	uxth	r3, r3
 8004d42:	81fb      	strh	r3, [r7, #14]
 8004d44:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	da01      	bge.n	8004d50 <ucg_clip_is_x_visible+0x2a>
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	e009      	b.n	8004d64 <ucg_clip_is_x_visible+0x3e>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	f9b3 3074 	ldrsh.w	r3, [r3, #116]	@ 0x74
 8004d56:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8004d5a:	429a      	cmp	r2, r3
 8004d5c:	db01      	blt.n	8004d62 <ucg_clip_is_x_visible+0x3c>
 8004d5e:	2300      	movs	r3, #0
 8004d60:	e000      	b.n	8004d64 <ucg_clip_is_x_visible+0x3e>
 8004d62:	2301      	movs	r3, #1
 8004d64:	4618      	mov	r0, r3
 8004d66:	3714      	adds	r7, #20
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6e:	4770      	bx	lr

08004d70 <ucg_clip_is_y_visible>:
 8004d70:	b480      	push	{r7}
 8004d72:	b085      	sub	sp, #20
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004d7c:	81fb      	strh	r3, [r7, #14]
 8004d7e:	89fa      	ldrh	r2, [r7, #14]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	f9b3 3072 	ldrsh.w	r3, [r3, #114]	@ 0x72
 8004d86:	b29b      	uxth	r3, r3
 8004d88:	1ad3      	subs	r3, r2, r3
 8004d8a:	b29b      	uxth	r3, r3
 8004d8c:	81fb      	strh	r3, [r7, #14]
 8004d8e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	da01      	bge.n	8004d9a <ucg_clip_is_y_visible+0x2a>
 8004d96:	2300      	movs	r3, #0
 8004d98:	e009      	b.n	8004dae <ucg_clip_is_y_visible+0x3e>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	f9b3 3076 	ldrsh.w	r3, [r3, #118]	@ 0x76
 8004da0:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8004da4:	429a      	cmp	r2, r3
 8004da6:	db01      	blt.n	8004dac <ucg_clip_is_y_visible+0x3c>
 8004da8:	2300      	movs	r3, #0
 8004daa:	e000      	b.n	8004dae <ucg_clip_is_y_visible+0x3e>
 8004dac:	2301      	movs	r3, #1
 8004dae:	4618      	mov	r0, r3
 8004db0:	3714      	adds	r7, #20
 8004db2:	46bd      	mov	sp, r7
 8004db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db8:	4770      	bx	lr

08004dba <ucg_clip_intersection>:
 8004dba:	b480      	push	{r7}
 8004dbc:	b087      	sub	sp, #28
 8004dbe:	af00      	add	r7, sp, #0
 8004dc0:	60f8      	str	r0, [r7, #12]
 8004dc2:	60b9      	str	r1, [r7, #8]
 8004dc4:	4611      	mov	r1, r2
 8004dc6:	461a      	mov	r2, r3
 8004dc8:	460b      	mov	r3, r1
 8004dca:	80fb      	strh	r3, [r7, #6]
 8004dcc:	4613      	mov	r3, r2
 8004dce:	80bb      	strh	r3, [r7, #4]
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	881b      	ldrh	r3, [r3, #0]
 8004dd4:	82fb      	strh	r3, [r7, #22]
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	881b      	ldrh	r3, [r3, #0]
 8004dda:	82bb      	strh	r3, [r7, #20]
 8004ddc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8004de0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004de4:	429a      	cmp	r2, r3
 8004de6:	db01      	blt.n	8004dec <ucg_clip_intersection+0x32>
 8004de8:	2300      	movs	r3, #0
 8004dea:	e01a      	b.n	8004e22 <ucg_clip_intersection+0x68>
 8004dec:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8004df0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004df4:	429a      	cmp	r2, r3
 8004df6:	dc01      	bgt.n	8004dfc <ucg_clip_intersection+0x42>
 8004df8:	2300      	movs	r3, #0
 8004dfa:	e012      	b.n	8004e22 <ucg_clip_intersection+0x68>
 8004dfc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8004e00:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004e04:	429a      	cmp	r2, r3
 8004e06:	da02      	bge.n	8004e0e <ucg_clip_intersection+0x54>
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	88fa      	ldrh	r2, [r7, #6]
 8004e0c:	801a      	strh	r2, [r3, #0]
 8004e0e:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8004e12:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004e16:	429a      	cmp	r2, r3
 8004e18:	dd02      	ble.n	8004e20 <ucg_clip_intersection+0x66>
 8004e1a:	68bb      	ldr	r3, [r7, #8]
 8004e1c:	88ba      	ldrh	r2, [r7, #4]
 8004e1e:	801a      	strh	r2, [r3, #0]
 8004e20:	2301      	movs	r3, #1
 8004e22:	4618      	mov	r0, r3
 8004e24:	371c      	adds	r7, #28
 8004e26:	46bd      	mov	sp, r7
 8004e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2c:	4770      	bx	lr

08004e2e <ucg_clip_is_pixel_visible>:
 8004e2e:	b580      	push	{r7, lr}
 8004e30:	b082      	sub	sp, #8
 8004e32:	af00      	add	r7, sp, #0
 8004e34:	6078      	str	r0, [r7, #4]
 8004e36:	6878      	ldr	r0, [r7, #4]
 8004e38:	f7ff ff75 	bl	8004d26 <ucg_clip_is_x_visible>
 8004e3c:	4603      	mov	r3, r0
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d101      	bne.n	8004e46 <ucg_clip_is_pixel_visible+0x18>
 8004e42:	2300      	movs	r3, #0
 8004e44:	e008      	b.n	8004e58 <ucg_clip_is_pixel_visible+0x2a>
 8004e46:	6878      	ldr	r0, [r7, #4]
 8004e48:	f7ff ff92 	bl	8004d70 <ucg_clip_is_y_visible>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d101      	bne.n	8004e56 <ucg_clip_is_pixel_visible+0x28>
 8004e52:	2300      	movs	r3, #0
 8004e54:	e000      	b.n	8004e58 <ucg_clip_is_pixel_visible+0x2a>
 8004e56:	2301      	movs	r3, #1
 8004e58:	4618      	mov	r0, r3
 8004e5a:	3708      	adds	r7, #8
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bd80      	pop	{r7, pc}

08004e60 <ucg_clip_l90fx>:
 8004e60:	b590      	push	{r4, r7, lr}
 8004e62:	b085      	sub	sp, #20
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	861a      	strh	r2, [r3, #48]	@ 0x30
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	@ 0x2e
 8004e74:	2b03      	cmp	r3, #3
 8004e76:	f200 816d 	bhi.w	8005154 <ucg_clip_l90fx+0x2f4>
 8004e7a:	a201      	add	r2, pc, #4	@ (adr r2, 8004e80 <ucg_clip_l90fx+0x20>)
 8004e7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e80:	08004e91 	.word	0x08004e91
 8004e84:	08004f37 	.word	0x08004f37
 8004e88:	08004fdd 	.word	0x08004fdd
 8004e8c:	08005099 	.word	0x08005099
 8004e90:	6878      	ldr	r0, [r7, #4]
 8004e92:	f7ff ff6d 	bl	8004d70 <ucg_clip_is_y_visible>
 8004e96:	4603      	mov	r3, r0
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d101      	bne.n	8004ea0 <ucg_clip_l90fx+0x40>
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	e15a      	b.n	8005156 <ucg_clip_l90fx+0x2f6>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 8004ea6:	81fb      	strh	r3, [r7, #14]
 8004ea8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004eac:	81bb      	strh	r3, [r7, #12]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	@ 0x2c
 8004eb4:	b29a      	uxth	r2, r3
 8004eb6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004eba:	b29b      	uxth	r3, r3
 8004ebc:	4413      	add	r3, r2
 8004ebe:	b29b      	uxth	r3, r3
 8004ec0:	b21b      	sxth	r3, r3
 8004ec2:	81bb      	strh	r3, [r7, #12]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	f9b3 4070 	ldrsh.w	r4, [r3, #112]	@ 0x70
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	f9b3 3070 	ldrsh.w	r3, [r3, #112]	@ 0x70
 8004ed0:	b29a      	uxth	r2, r3
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	f9b3 3074 	ldrsh.w	r3, [r3, #116]	@ 0x74
 8004ed8:	b29b      	uxth	r3, r3
 8004eda:	4413      	add	r3, r2
 8004edc:	b29b      	uxth	r3, r3
 8004ede:	b21b      	sxth	r3, r3
 8004ee0:	f107 010c 	add.w	r1, r7, #12
 8004ee4:	f107 000e 	add.w	r0, r7, #14
 8004ee8:	4622      	mov	r2, r4
 8004eea:	f7ff ff66 	bl	8004dba <ucg_clip_intersection>
 8004eee:	4603      	mov	r3, r0
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d101      	bne.n	8004ef8 <ucg_clip_l90fx+0x98>
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	e12e      	b.n	8005156 <ucg_clip_l90fx+0x2f6>
 8004ef8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004efc:	b29a      	uxth	r2, r3
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 8004f04:	b29b      	uxth	r3, r3
 8004f06:	1ad3      	subs	r3, r2, r3
 8004f08:	b29b      	uxth	r3, r3
 8004f0a:	b21a      	sxth	r2, r3
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	861a      	strh	r2, [r3, #48]	@ 0x30
 8004f10:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	849a      	strh	r2, [r3, #36]	@ 0x24
 8004f18:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004f1c:	b29a      	uxth	r2, r3
 8004f1e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004f22:	b29b      	uxth	r3, r3
 8004f24:	1ad3      	subs	r3, r2, r3
 8004f26:	b29b      	uxth	r3, r3
 8004f28:	b21b      	sxth	r3, r3
 8004f2a:	81bb      	strh	r3, [r7, #12]
 8004f2c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	859a      	strh	r2, [r3, #44]	@ 0x2c
 8004f34:	e10e      	b.n	8005154 <ucg_clip_l90fx+0x2f4>
 8004f36:	6878      	ldr	r0, [r7, #4]
 8004f38:	f7ff fef5 	bl	8004d26 <ucg_clip_is_x_visible>
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d101      	bne.n	8004f46 <ucg_clip_l90fx+0xe6>
 8004f42:	2300      	movs	r3, #0
 8004f44:	e107      	b.n	8005156 <ucg_clip_l90fx+0x2f6>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	@ 0x26
 8004f4c:	81fb      	strh	r3, [r7, #14]
 8004f4e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004f52:	81bb      	strh	r3, [r7, #12]
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	@ 0x2c
 8004f5a:	b29a      	uxth	r2, r3
 8004f5c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004f60:	b29b      	uxth	r3, r3
 8004f62:	4413      	add	r3, r2
 8004f64:	b29b      	uxth	r3, r3
 8004f66:	b21b      	sxth	r3, r3
 8004f68:	81bb      	strh	r3, [r7, #12]
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	f9b3 4072 	ldrsh.w	r4, [r3, #114]	@ 0x72
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	f9b3 3072 	ldrsh.w	r3, [r3, #114]	@ 0x72
 8004f76:	b29a      	uxth	r2, r3
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	f9b3 3076 	ldrsh.w	r3, [r3, #118]	@ 0x76
 8004f7e:	b29b      	uxth	r3, r3
 8004f80:	4413      	add	r3, r2
 8004f82:	b29b      	uxth	r3, r3
 8004f84:	b21b      	sxth	r3, r3
 8004f86:	f107 010c 	add.w	r1, r7, #12
 8004f8a:	f107 000e 	add.w	r0, r7, #14
 8004f8e:	4622      	mov	r2, r4
 8004f90:	f7ff ff13 	bl	8004dba <ucg_clip_intersection>
 8004f94:	4603      	mov	r3, r0
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d101      	bne.n	8004f9e <ucg_clip_l90fx+0x13e>
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	e0db      	b.n	8005156 <ucg_clip_l90fx+0x2f6>
 8004f9e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004fa2:	b29a      	uxth	r2, r3
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	@ 0x26
 8004faa:	b29b      	uxth	r3, r3
 8004fac:	1ad3      	subs	r3, r2, r3
 8004fae:	b29b      	uxth	r3, r3
 8004fb0:	b21a      	sxth	r2, r3
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	861a      	strh	r2, [r3, #48]	@ 0x30
 8004fb6:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	84da      	strh	r2, [r3, #38]	@ 0x26
 8004fbe:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004fc2:	b29a      	uxth	r2, r3
 8004fc4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004fc8:	b29b      	uxth	r3, r3
 8004fca:	1ad3      	subs	r3, r2, r3
 8004fcc:	b29b      	uxth	r3, r3
 8004fce:	b21b      	sxth	r3, r3
 8004fd0:	81bb      	strh	r3, [r7, #12]
 8004fd2:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	859a      	strh	r2, [r3, #44]	@ 0x2c
 8004fda:	e0bb      	b.n	8005154 <ucg_clip_l90fx+0x2f4>
 8004fdc:	6878      	ldr	r0, [r7, #4]
 8004fde:	f7ff fec7 	bl	8004d70 <ucg_clip_is_y_visible>
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d101      	bne.n	8004fec <ucg_clip_l90fx+0x18c>
 8004fe8:	2300      	movs	r3, #0
 8004fea:	e0b4      	b.n	8005156 <ucg_clip_l90fx+0x2f6>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 8004ff2:	81bb      	strh	r3, [r7, #12]
 8004ff4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004ff8:	b29b      	uxth	r3, r3
 8004ffa:	3301      	adds	r3, #1
 8004ffc:	b29b      	uxth	r3, r3
 8004ffe:	b21b      	sxth	r3, r3
 8005000:	81bb      	strh	r3, [r7, #12]
 8005002:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8005006:	81fb      	strh	r3, [r7, #14]
 8005008:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800500c:	b29a      	uxth	r2, r3
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	@ 0x2c
 8005014:	b29b      	uxth	r3, r3
 8005016:	1ad3      	subs	r3, r2, r3
 8005018:	b29b      	uxth	r3, r3
 800501a:	b21b      	sxth	r3, r3
 800501c:	81fb      	strh	r3, [r7, #14]
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	f9b3 4070 	ldrsh.w	r4, [r3, #112]	@ 0x70
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	f9b3 3070 	ldrsh.w	r3, [r3, #112]	@ 0x70
 800502a:	b29a      	uxth	r2, r3
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	f9b3 3074 	ldrsh.w	r3, [r3, #116]	@ 0x74
 8005032:	b29b      	uxth	r3, r3
 8005034:	4413      	add	r3, r2
 8005036:	b29b      	uxth	r3, r3
 8005038:	b21b      	sxth	r3, r3
 800503a:	f107 010c 	add.w	r1, r7, #12
 800503e:	f107 000e 	add.w	r0, r7, #14
 8005042:	4622      	mov	r2, r4
 8005044:	f7ff feb9 	bl	8004dba <ucg_clip_intersection>
 8005048:	4603      	mov	r3, r0
 800504a:	2b00      	cmp	r3, #0
 800504c:	d101      	bne.n	8005052 <ucg_clip_l90fx+0x1f2>
 800504e:	2300      	movs	r3, #0
 8005050:	e081      	b.n	8005156 <ucg_clip_l90fx+0x2f6>
 8005052:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8005056:	b29a      	uxth	r2, r3
 8005058:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800505c:	b29b      	uxth	r3, r3
 800505e:	1ad3      	subs	r3, r2, r3
 8005060:	b29b      	uxth	r3, r3
 8005062:	b21a      	sxth	r2, r3
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	859a      	strh	r2, [r3, #44]	@ 0x2c
 8005068:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800506c:	b29b      	uxth	r3, r3
 800506e:	3b01      	subs	r3, #1
 8005070:	b29b      	uxth	r3, r3
 8005072:	b21b      	sxth	r3, r3
 8005074:	81bb      	strh	r3, [r7, #12]
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 800507c:	b29a      	uxth	r2, r3
 800507e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8005082:	b29b      	uxth	r3, r3
 8005084:	1ad3      	subs	r3, r2, r3
 8005086:	b29b      	uxth	r3, r3
 8005088:	b21a      	sxth	r2, r3
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	861a      	strh	r2, [r3, #48]	@ 0x30
 800508e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	849a      	strh	r2, [r3, #36]	@ 0x24
 8005096:	e05d      	b.n	8005154 <ucg_clip_l90fx+0x2f4>
 8005098:	6878      	ldr	r0, [r7, #4]
 800509a:	f7ff fe44 	bl	8004d26 <ucg_clip_is_x_visible>
 800509e:	4603      	mov	r3, r0
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d101      	bne.n	80050a8 <ucg_clip_l90fx+0x248>
 80050a4:	2300      	movs	r3, #0
 80050a6:	e056      	b.n	8005156 <ucg_clip_l90fx+0x2f6>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	@ 0x26
 80050ae:	81bb      	strh	r3, [r7, #12]
 80050b0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80050b4:	b29b      	uxth	r3, r3
 80050b6:	3301      	adds	r3, #1
 80050b8:	b29b      	uxth	r3, r3
 80050ba:	b21b      	sxth	r3, r3
 80050bc:	81bb      	strh	r3, [r7, #12]
 80050be:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80050c2:	81fb      	strh	r3, [r7, #14]
 80050c4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80050c8:	b29a      	uxth	r2, r3
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	@ 0x2c
 80050d0:	b29b      	uxth	r3, r3
 80050d2:	1ad3      	subs	r3, r2, r3
 80050d4:	b29b      	uxth	r3, r3
 80050d6:	b21b      	sxth	r3, r3
 80050d8:	81fb      	strh	r3, [r7, #14]
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	f9b3 4072 	ldrsh.w	r4, [r3, #114]	@ 0x72
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	f9b3 3072 	ldrsh.w	r3, [r3, #114]	@ 0x72
 80050e6:	b29a      	uxth	r2, r3
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	f9b3 3076 	ldrsh.w	r3, [r3, #118]	@ 0x76
 80050ee:	b29b      	uxth	r3, r3
 80050f0:	4413      	add	r3, r2
 80050f2:	b29b      	uxth	r3, r3
 80050f4:	b21b      	sxth	r3, r3
 80050f6:	f107 010c 	add.w	r1, r7, #12
 80050fa:	f107 000e 	add.w	r0, r7, #14
 80050fe:	4622      	mov	r2, r4
 8005100:	f7ff fe5b 	bl	8004dba <ucg_clip_intersection>
 8005104:	4603      	mov	r3, r0
 8005106:	2b00      	cmp	r3, #0
 8005108:	d101      	bne.n	800510e <ucg_clip_l90fx+0x2ae>
 800510a:	2300      	movs	r3, #0
 800510c:	e023      	b.n	8005156 <ucg_clip_l90fx+0x2f6>
 800510e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8005112:	b29a      	uxth	r2, r3
 8005114:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005118:	b29b      	uxth	r3, r3
 800511a:	1ad3      	subs	r3, r2, r3
 800511c:	b29b      	uxth	r3, r3
 800511e:	b21a      	sxth	r2, r3
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	859a      	strh	r2, [r3, #44]	@ 0x2c
 8005124:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8005128:	b29b      	uxth	r3, r3
 800512a:	3b01      	subs	r3, #1
 800512c:	b29b      	uxth	r3, r3
 800512e:	b21b      	sxth	r3, r3
 8005130:	81bb      	strh	r3, [r7, #12]
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	@ 0x26
 8005138:	b29a      	uxth	r2, r3
 800513a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800513e:	b29b      	uxth	r3, r3
 8005140:	1ad3      	subs	r3, r2, r3
 8005142:	b29b      	uxth	r3, r3
 8005144:	b21a      	sxth	r2, r3
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	861a      	strh	r2, [r3, #48]	@ 0x30
 800514a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	84da      	strh	r2, [r3, #38]	@ 0x26
 8005152:	bf00      	nop
 8005154:	2301      	movs	r3, #1
 8005156:	4618      	mov	r0, r3
 8005158:	3714      	adds	r7, #20
 800515a:	46bd      	mov	sp, r7
 800515c:	bd90      	pop	{r4, r7, pc}
 800515e:	bf00      	nop

08005160 <ucg_clip_l90se>:
 8005160:	b580      	push	{r7, lr}
 8005162:	b084      	sub	sp, #16
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
 8005168:	6878      	ldr	r0, [r7, #4]
 800516a:	f7ff fe79 	bl	8004e60 <ucg_clip_l90fx>
 800516e:	4603      	mov	r3, r0
 8005170:	2b00      	cmp	r3, #0
 8005172:	d101      	bne.n	8005178 <ucg_clip_l90se+0x18>
 8005174:	2300      	movs	r3, #0
 8005176:	e019      	b.n	80051ac <ucg_clip_l90se+0x4c>
 8005178:	2300      	movs	r3, #0
 800517a:	73fb      	strb	r3, [r7, #15]
 800517c:	e012      	b.n	80051a4 <ucg_clip_l90se+0x44>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	f103 0146 	add.w	r1, r3, #70	@ 0x46
 8005184:	7bfa      	ldrb	r2, [r7, #15]
 8005186:	4613      	mov	r3, r2
 8005188:	00db      	lsls	r3, r3, #3
 800518a:	1a9b      	subs	r3, r3, r2
 800518c:	005b      	lsls	r3, r3, #1
 800518e:	18ca      	adds	r2, r1, r3
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8005196:	4619      	mov	r1, r3
 8005198:	4610      	mov	r0, r2
 800519a:	f7fe f9e8 	bl	800356e <ucg_ccs_seek>
 800519e:	7bfb      	ldrb	r3, [r7, #15]
 80051a0:	3301      	adds	r3, #1
 80051a2:	73fb      	strb	r3, [r7, #15]
 80051a4:	7bfb      	ldrb	r3, [r7, #15]
 80051a6:	2b02      	cmp	r3, #2
 80051a8:	d9e9      	bls.n	800517e <ucg_clip_l90se+0x1e>
 80051aa:	2301      	movs	r3, #1
 80051ac:	4618      	mov	r0, r3
 80051ae:	3710      	adds	r7, #16
 80051b0:	46bd      	mov	sp, r7
 80051b2:	bd80      	pop	{r7, pc}

080051b4 <ucg_com_PowerDown>:
 80051b4:	b590      	push	{r4, r7, lr}
 80051b6:	b083      	sub	sp, #12
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	f893 30af 	ldrb.w	r3, [r3, #175]	@ 0xaf
 80051c2:	f003 0308 	and.w	r3, r3, #8
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d006      	beq.n	80051d8 <ucg_com_PowerDown+0x24>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	69dc      	ldr	r4, [r3, #28]
 80051ce:	2300      	movs	r3, #0
 80051d0:	2200      	movs	r2, #0
 80051d2:	210b      	movs	r1, #11
 80051d4:	6878      	ldr	r0, [r7, #4]
 80051d6:	47a0      	blx	r4
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	f893 30af 	ldrb.w	r3, [r3, #175]	@ 0xaf
 80051de:	f023 0308 	bic.w	r3, r3, #8
 80051e2:	b2da      	uxtb	r2, r3
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	f883 20af 	strb.w	r2, [r3, #175]	@ 0xaf
 80051ea:	bf00      	nop
 80051ec:	370c      	adds	r7, #12
 80051ee:	46bd      	mov	sp, r7
 80051f0:	bd90      	pop	{r4, r7, pc}

080051f2 <ucg_com_PowerUp>:
 80051f2:	b590      	push	{r4, r7, lr}
 80051f4:	b085      	sub	sp, #20
 80051f6:	af00      	add	r7, sp, #0
 80051f8:	6078      	str	r0, [r7, #4]
 80051fa:	460b      	mov	r3, r1
 80051fc:	807b      	strh	r3, [r7, #2]
 80051fe:	4613      	mov	r3, r2
 8005200:	803b      	strh	r3, [r7, #0]
 8005202:	887b      	ldrh	r3, [r7, #2]
 8005204:	813b      	strh	r3, [r7, #8]
 8005206:	883b      	ldrh	r3, [r7, #0]
 8005208:	817b      	strh	r3, [r7, #10]
 800520a:	6878      	ldr	r0, [r7, #4]
 800520c:	f7ff ffd2 	bl	80051b4 <ucg_com_PowerDown>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2200      	movs	r2, #0
 8005214:	f883 20ae 	strb.w	r2, [r3, #174]	@ 0xae
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	69dc      	ldr	r4, [r3, #28]
 800521c:	f107 0308 	add.w	r3, r7, #8
 8005220:	2200      	movs	r2, #0
 8005222:	210a      	movs	r1, #10
 8005224:	6878      	ldr	r0, [r7, #4]
 8005226:	47a0      	blx	r4
 8005228:	4603      	mov	r3, r0
 800522a:	81fb      	strh	r3, [r7, #14]
 800522c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d008      	beq.n	8005246 <ucg_com_PowerUp+0x54>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	f893 30af 	ldrb.w	r3, [r3, #175]	@ 0xaf
 800523a:	f043 0308 	orr.w	r3, r3, #8
 800523e:	b2da      	uxtb	r2, r3
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	f883 20af 	strb.w	r2, [r3, #175]	@ 0xaf
 8005246:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800524a:	4618      	mov	r0, r3
 800524c:	3714      	adds	r7, #20
 800524e:	46bd      	mov	sp, r7
 8005250:	bd90      	pop	{r4, r7, pc}

08005252 <ucg_com_SetLineStatus>:
 8005252:	b590      	push	{r4, r7, lr}
 8005254:	b083      	sub	sp, #12
 8005256:	af00      	add	r7, sp, #0
 8005258:	6078      	str	r0, [r7, #4]
 800525a:	4608      	mov	r0, r1
 800525c:	4611      	mov	r1, r2
 800525e:	461a      	mov	r2, r3
 8005260:	4603      	mov	r3, r0
 8005262:	70fb      	strb	r3, [r7, #3]
 8005264:	460b      	mov	r3, r1
 8005266:	70bb      	strb	r3, [r7, #2]
 8005268:	4613      	mov	r3, r2
 800526a:	707b      	strb	r3, [r7, #1]
 800526c:	78fb      	ldrb	r3, [r7, #3]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d131      	bne.n	80052d6 <ucg_com_SetLineStatus+0x84>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	f893 20ae 	ldrb.w	r2, [r3, #174]	@ 0xae
 8005278:	78bb      	ldrb	r3, [r7, #2]
 800527a:	4013      	ands	r3, r2
 800527c:	b2db      	uxtb	r3, r3
 800527e:	2b00      	cmp	r3, #0
 8005280:	d008      	beq.n	8005294 <ucg_com_SetLineStatus+0x42>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	f893 20af 	ldrb.w	r2, [r3, #175]	@ 0xaf
 8005288:	78bb      	ldrb	r3, [r7, #2]
 800528a:	4013      	ands	r3, r2
 800528c:	b2db      	uxtb	r3, r3
 800528e:	78ba      	ldrb	r2, [r7, #2]
 8005290:	429a      	cmp	r2, r3
 8005292:	d14b      	bne.n	800532c <ucg_com_SetLineStatus+0xda>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	69dc      	ldr	r4, [r3, #28]
 8005298:	787b      	ldrb	r3, [r7, #1]
 800529a:	b219      	sxth	r1, r3
 800529c:	78fb      	ldrb	r3, [r7, #3]
 800529e:	b29a      	uxth	r2, r3
 80052a0:	2300      	movs	r3, #0
 80052a2:	6878      	ldr	r0, [r7, #4]
 80052a4:	47a0      	blx	r4
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	f893 30af 	ldrb.w	r3, [r3, #175]	@ 0xaf
 80052ac:	b25a      	sxtb	r2, r3
 80052ae:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80052b2:	43db      	mvns	r3, r3
 80052b4:	b25b      	sxtb	r3, r3
 80052b6:	4013      	ands	r3, r2
 80052b8:	b25b      	sxtb	r3, r3
 80052ba:	b2da      	uxtb	r2, r3
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	f883 20af 	strb.w	r2, [r3, #175]	@ 0xaf
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	f893 20ae 	ldrb.w	r2, [r3, #174]	@ 0xae
 80052c8:	78bb      	ldrb	r3, [r7, #2]
 80052ca:	4313      	orrs	r3, r2
 80052cc:	b2da      	uxtb	r2, r3
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	f883 20ae 	strb.w	r2, [r3, #174]	@ 0xae
 80052d4:	e02a      	b.n	800532c <ucg_com_SetLineStatus+0xda>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	f893 20ae 	ldrb.w	r2, [r3, #174]	@ 0xae
 80052dc:	78bb      	ldrb	r3, [r7, #2]
 80052de:	4013      	ands	r3, r2
 80052e0:	b2db      	uxtb	r3, r3
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d007      	beq.n	80052f6 <ucg_com_SetLineStatus+0xa4>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	f893 20af 	ldrb.w	r2, [r3, #175]	@ 0xaf
 80052ec:	78bb      	ldrb	r3, [r7, #2]
 80052ee:	4013      	ands	r3, r2
 80052f0:	b2db      	uxtb	r3, r3
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d11a      	bne.n	800532c <ucg_com_SetLineStatus+0xda>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	69dc      	ldr	r4, [r3, #28]
 80052fa:	787b      	ldrb	r3, [r7, #1]
 80052fc:	b219      	sxth	r1, r3
 80052fe:	78fb      	ldrb	r3, [r7, #3]
 8005300:	b29a      	uxth	r2, r3
 8005302:	2300      	movs	r3, #0
 8005304:	6878      	ldr	r0, [r7, #4]
 8005306:	47a0      	blx	r4
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	f893 20af 	ldrb.w	r2, [r3, #175]	@ 0xaf
 800530e:	78bb      	ldrb	r3, [r7, #2]
 8005310:	4313      	orrs	r3, r2
 8005312:	b2da      	uxtb	r2, r3
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	f883 20af 	strb.w	r2, [r3, #175]	@ 0xaf
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	f893 20ae 	ldrb.w	r2, [r3, #174]	@ 0xae
 8005320:	78bb      	ldrb	r3, [r7, #2]
 8005322:	4313      	orrs	r3, r2
 8005324:	b2da      	uxtb	r2, r3
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	f883 20ae 	strb.w	r2, [r3, #174]	@ 0xae
 800532c:	bf00      	nop
 800532e:	370c      	adds	r7, #12
 8005330:	46bd      	mov	sp, r7
 8005332:	bd90      	pop	{r4, r7, pc}

08005334 <ucg_com_SetResetLineStatus>:
 8005334:	b580      	push	{r7, lr}
 8005336:	b082      	sub	sp, #8
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
 800533c:	460b      	mov	r3, r1
 800533e:	70fb      	strb	r3, [r7, #3]
 8005340:	78f9      	ldrb	r1, [r7, #3]
 8005342:	230d      	movs	r3, #13
 8005344:	2204      	movs	r2, #4
 8005346:	6878      	ldr	r0, [r7, #4]
 8005348:	f7ff ff83 	bl	8005252 <ucg_com_SetLineStatus>
 800534c:	bf00      	nop
 800534e:	3708      	adds	r7, #8
 8005350:	46bd      	mov	sp, r7
 8005352:	bd80      	pop	{r7, pc}

08005354 <ucg_com_SetCSLineStatus>:
 8005354:	b580      	push	{r7, lr}
 8005356:	b082      	sub	sp, #8
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
 800535c:	460b      	mov	r3, r1
 800535e:	70fb      	strb	r3, [r7, #3]
 8005360:	78f9      	ldrb	r1, [r7, #3]
 8005362:	230e      	movs	r3, #14
 8005364:	2202      	movs	r2, #2
 8005366:	6878      	ldr	r0, [r7, #4]
 8005368:	f7ff ff73 	bl	8005252 <ucg_com_SetLineStatus>
 800536c:	bf00      	nop
 800536e:	3708      	adds	r7, #8
 8005370:	46bd      	mov	sp, r7
 8005372:	bd80      	pop	{r7, pc}

08005374 <ucg_com_SetCDLineStatus>:
 8005374:	b580      	push	{r7, lr}
 8005376:	b082      	sub	sp, #8
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
 800537c:	460b      	mov	r3, r1
 800537e:	70fb      	strb	r3, [r7, #3]
 8005380:	78f9      	ldrb	r1, [r7, #3]
 8005382:	230f      	movs	r3, #15
 8005384:	2201      	movs	r2, #1
 8005386:	6878      	ldr	r0, [r7, #4]
 8005388:	f7ff ff63 	bl	8005252 <ucg_com_SetLineStatus>
 800538c:	bf00      	nop
 800538e:	3708      	adds	r7, #8
 8005390:	46bd      	mov	sp, r7
 8005392:	bd80      	pop	{r7, pc}

08005394 <ucg_com_DelayMicroseconds>:
 8005394:	b590      	push	{r4, r7, lr}
 8005396:	b083      	sub	sp, #12
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
 800539c:	460b      	mov	r3, r1
 800539e:	807b      	strh	r3, [r7, #2]
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	69dc      	ldr	r4, [r3, #28]
 80053a4:	887a      	ldrh	r2, [r7, #2]
 80053a6:	2300      	movs	r3, #0
 80053a8:	210c      	movs	r1, #12
 80053aa:	6878      	ldr	r0, [r7, #4]
 80053ac:	47a0      	blx	r4
 80053ae:	bf00      	nop
 80053b0:	370c      	adds	r7, #12
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bd90      	pop	{r4, r7, pc}

080053b6 <ucg_com_DelayMilliseconds>:
 80053b6:	b580      	push	{r7, lr}
 80053b8:	b082      	sub	sp, #8
 80053ba:	af00      	add	r7, sp, #0
 80053bc:	6078      	str	r0, [r7, #4]
 80053be:	460b      	mov	r3, r1
 80053c0:	807b      	strh	r3, [r7, #2]
 80053c2:	e007      	b.n	80053d4 <ucg_com_DelayMilliseconds+0x1e>
 80053c4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80053c8:	6878      	ldr	r0, [r7, #4]
 80053ca:	f7ff ffe3 	bl	8005394 <ucg_com_DelayMicroseconds>
 80053ce:	887b      	ldrh	r3, [r7, #2]
 80053d0:	3b01      	subs	r3, #1
 80053d2:	807b      	strh	r3, [r7, #2]
 80053d4:	887b      	ldrh	r3, [r7, #2]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d1f4      	bne.n	80053c4 <ucg_com_DelayMilliseconds+0xe>
 80053da:	bf00      	nop
 80053dc:	3708      	adds	r7, #8
 80053de:	46bd      	mov	sp, r7
 80053e0:	bd80      	pop	{r7, pc}

080053e2 <ucg_com_SendByte>:
 80053e2:	b590      	push	{r4, r7, lr}
 80053e4:	b083      	sub	sp, #12
 80053e6:	af00      	add	r7, sp, #0
 80053e8:	6078      	str	r0, [r7, #4]
 80053ea:	460b      	mov	r3, r1
 80053ec:	70fb      	strb	r3, [r7, #3]
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	69dc      	ldr	r4, [r3, #28]
 80053f2:	78fb      	ldrb	r3, [r7, #3]
 80053f4:	b29a      	uxth	r2, r3
 80053f6:	2300      	movs	r3, #0
 80053f8:	2110      	movs	r1, #16
 80053fa:	6878      	ldr	r0, [r7, #4]
 80053fc:	47a0      	blx	r4
 80053fe:	bf00      	nop
 8005400:	370c      	adds	r7, #12
 8005402:	46bd      	mov	sp, r7
 8005404:	bd90      	pop	{r4, r7, pc}

08005406 <ucg_com_SendStringP>:
 8005406:	b590      	push	{r4, r7, lr}
 8005408:	b087      	sub	sp, #28
 800540a:	af00      	add	r7, sp, #0
 800540c:	60f8      	str	r0, [r7, #12]
 800540e:	460b      	mov	r3, r1
 8005410:	607a      	str	r2, [r7, #4]
 8005412:	817b      	strh	r3, [r7, #10]
 8005414:	e010      	b.n	8005438 <ucg_com_SendStringP+0x32>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	781b      	ldrb	r3, [r3, #0]
 800541a:	75fb      	strb	r3, [r7, #23]
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	69dc      	ldr	r4, [r3, #28]
 8005420:	7dfb      	ldrb	r3, [r7, #23]
 8005422:	b29a      	uxth	r2, r3
 8005424:	2300      	movs	r3, #0
 8005426:	2110      	movs	r1, #16
 8005428:	68f8      	ldr	r0, [r7, #12]
 800542a:	47a0      	blx	r4
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	3301      	adds	r3, #1
 8005430:	607b      	str	r3, [r7, #4]
 8005432:	897b      	ldrh	r3, [r7, #10]
 8005434:	3b01      	subs	r3, #1
 8005436:	817b      	strh	r3, [r7, #10]
 8005438:	897b      	ldrh	r3, [r7, #10]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d1eb      	bne.n	8005416 <ucg_com_SendStringP+0x10>
 800543e:	bf00      	nop
 8005440:	371c      	adds	r7, #28
 8005442:	46bd      	mov	sp, r7
 8005444:	bd90      	pop	{r4, r7, pc}

08005446 <ucg_com_SendCmdArg>:
 8005446:	b580      	push	{r7, lr}
 8005448:	b084      	sub	sp, #16
 800544a:	af00      	add	r7, sp, #0
 800544c:	60f8      	str	r0, [r7, #12]
 800544e:	60b9      	str	r1, [r7, #8]
 8005450:	4611      	mov	r1, r2
 8005452:	461a      	mov	r2, r3
 8005454:	460b      	mov	r3, r1
 8005456:	71fb      	strb	r3, [r7, #7]
 8005458:	4613      	mov	r3, r2
 800545a:	71bb      	strb	r3, [r7, #6]
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 8005462:	085b      	lsrs	r3, r3, #1
 8005464:	b2db      	uxtb	r3, r3
 8005466:	f003 0301 	and.w	r3, r3, #1
 800546a:	b2db      	uxtb	r3, r3
 800546c:	4619      	mov	r1, r3
 800546e:	68f8      	ldr	r0, [r7, #12]
 8005470:	f7ff ff80 	bl	8005374 <ucg_com_SetCDLineStatus>
 8005474:	79fb      	ldrb	r3, [r7, #7]
 8005476:	b29b      	uxth	r3, r3
 8005478:	68ba      	ldr	r2, [r7, #8]
 800547a:	4619      	mov	r1, r3
 800547c:	68f8      	ldr	r0, [r7, #12]
 800547e:	f7ff ffc2 	bl	8005406 <ucg_com_SendStringP>
 8005482:	79bb      	ldrb	r3, [r7, #6]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d014      	beq.n	80054b2 <ucg_com_SendCmdArg+0x6c>
 8005488:	79fb      	ldrb	r3, [r7, #7]
 800548a:	68ba      	ldr	r2, [r7, #8]
 800548c:	4413      	add	r3, r2
 800548e:	60bb      	str	r3, [r7, #8]
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 8005496:	f003 0301 	and.w	r3, r3, #1
 800549a:	b2db      	uxtb	r3, r3
 800549c:	4619      	mov	r1, r3
 800549e:	68f8      	ldr	r0, [r7, #12]
 80054a0:	f7ff ff68 	bl	8005374 <ucg_com_SetCDLineStatus>
 80054a4:	79bb      	ldrb	r3, [r7, #6]
 80054a6:	b29b      	uxth	r3, r3
 80054a8:	68ba      	ldr	r2, [r7, #8]
 80054aa:	4619      	mov	r1, r3
 80054ac:	68f8      	ldr	r0, [r7, #12]
 80054ae:	f7ff ffaa 	bl	8005406 <ucg_com_SendStringP>
 80054b2:	bf00      	nop
 80054b4:	3710      	adds	r7, #16
 80054b6:	46bd      	mov	sp, r7
 80054b8:	bd80      	pop	{r7, pc}
	...

080054bc <ucg_com_SendCmdSeq>:
 80054bc:	b580      	push	{r7, lr}
 80054be:	b084      	sub	sp, #16
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
 80054c4:	6039      	str	r1, [r7, #0]
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	781b      	ldrb	r3, [r3, #0]
 80054ca:	73fb      	strb	r3, [r7, #15]
 80054cc:	7bfb      	ldrb	r3, [r7, #15]
 80054ce:	091b      	lsrs	r3, r3, #4
 80054d0:	73bb      	strb	r3, [r7, #14]
 80054d2:	7bfb      	ldrb	r3, [r7, #15]
 80054d4:	f003 030f 	and.w	r3, r3, #15
 80054d8:	737b      	strb	r3, [r7, #13]
 80054da:	7bbb      	ldrb	r3, [r7, #14]
 80054dc:	2b0f      	cmp	r3, #15
 80054de:	f200 8124 	bhi.w	800572a <ucg_com_SendCmdSeq+0x26e>
 80054e2:	a201      	add	r2, pc, #4	@ (adr r2, 80054e8 <ucg_com_SendCmdSeq+0x2c>)
 80054e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054e8:	0800572b 	.word	0x0800572b
 80054ec:	08005529 	.word	0x08005529
 80054f0:	08005529 	.word	0x08005529
 80054f4:	08005529 	.word	0x08005529
 80054f8:	0800572b 	.word	0x0800572b
 80054fc:	0800572b 	.word	0x0800572b
 8005500:	08005549 	.word	0x08005549
 8005504:	0800557b 	.word	0x0800557b
 8005508:	080055bf 	.word	0x080055bf
 800550c:	080055eb 	.word	0x080055eb
 8005510:	08005617 	.word	0x08005617
 8005514:	08005677 	.word	0x08005677
 8005518:	0800572b 	.word	0x0800572b
 800551c:	0800572b 	.word	0x0800572b
 8005520:	0800572b 	.word	0x0800572b
 8005524:	080056d7 	.word	0x080056d7
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	1c59      	adds	r1, r3, #1
 800552c:	7b7b      	ldrb	r3, [r7, #13]
 800552e:	7bba      	ldrb	r2, [r7, #14]
 8005530:	6878      	ldr	r0, [r7, #4]
 8005532:	f7ff ff88 	bl	8005446 <ucg_com_SendCmdArg>
 8005536:	7bbb      	ldrb	r3, [r7, #14]
 8005538:	1c5a      	adds	r2, r3, #1
 800553a:	7b7b      	ldrb	r3, [r7, #13]
 800553c:	4413      	add	r3, r2
 800553e:	461a      	mov	r2, r3
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	4413      	add	r3, r2
 8005544:	603b      	str	r3, [r7, #0]
 8005546:	e0ef      	b.n	8005728 <ucg_com_SendCmdSeq+0x26c>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 800554e:	f003 0301 	and.w	r3, r3, #1
 8005552:	b2db      	uxtb	r3, r3
 8005554:	4619      	mov	r1, r3
 8005556:	6878      	ldr	r0, [r7, #4]
 8005558:	f7ff ff0c 	bl	8005374 <ucg_com_SetCDLineStatus>
 800555c:	7b7b      	ldrb	r3, [r7, #13]
 800555e:	b299      	uxth	r1, r3
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	3301      	adds	r3, #1
 8005564:	461a      	mov	r2, r3
 8005566:	6878      	ldr	r0, [r7, #4]
 8005568:	f7ff ff4d 	bl	8005406 <ucg_com_SendStringP>
 800556c:	7b7b      	ldrb	r3, [r7, #13]
 800556e:	3301      	adds	r3, #1
 8005570:	461a      	mov	r2, r3
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	4413      	add	r3, r2
 8005576:	603b      	str	r3, [r7, #0]
 8005578:	e0d6      	b.n	8005728 <ucg_com_SendCmdSeq+0x26c>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 8005580:	085b      	lsrs	r3, r3, #1
 8005582:	b2db      	uxtb	r3, r3
 8005584:	f003 0301 	and.w	r3, r3, #1
 8005588:	2b00      	cmp	r3, #0
 800558a:	bf0c      	ite	eq
 800558c:	2301      	moveq	r3, #1
 800558e:	2300      	movne	r3, #0
 8005590:	b2db      	uxtb	r3, r3
 8005592:	4619      	mov	r1, r3
 8005594:	6878      	ldr	r0, [r7, #4]
 8005596:	f7ff feed 	bl	8005374 <ucg_com_SetCDLineStatus>
 800559a:	7b7b      	ldrb	r3, [r7, #13]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d007      	beq.n	80055b0 <ucg_com_SendCmdSeq+0xf4>
 80055a0:	7b7b      	ldrb	r3, [r7, #13]
 80055a2:	b299      	uxth	r1, r3
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	3301      	adds	r3, #1
 80055a8:	461a      	mov	r2, r3
 80055aa:	6878      	ldr	r0, [r7, #4]
 80055ac:	f7ff ff2b 	bl	8005406 <ucg_com_SendStringP>
 80055b0:	7b7b      	ldrb	r3, [r7, #13]
 80055b2:	3301      	adds	r3, #1
 80055b4:	461a      	mov	r2, r3
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	4413      	add	r3, r2
 80055ba:	603b      	str	r3, [r7, #0]
 80055bc:	e0b4      	b.n	8005728 <ucg_com_SendCmdSeq+0x26c>
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	3301      	adds	r3, #1
 80055c2:	603b      	str	r3, [r7, #0]
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	781b      	ldrb	r3, [r3, #0]
 80055c8:	73fb      	strb	r3, [r7, #15]
 80055ca:	7b7b      	ldrb	r3, [r7, #13]
 80055cc:	b29b      	uxth	r3, r3
 80055ce:	021b      	lsls	r3, r3, #8
 80055d0:	b29a      	uxth	r2, r3
 80055d2:	7bfb      	ldrb	r3, [r7, #15]
 80055d4:	b29b      	uxth	r3, r3
 80055d6:	4413      	add	r3, r2
 80055d8:	b29b      	uxth	r3, r3
 80055da:	4619      	mov	r1, r3
 80055dc:	6878      	ldr	r0, [r7, #4]
 80055de:	f7ff feea 	bl	80053b6 <ucg_com_DelayMilliseconds>
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	3301      	adds	r3, #1
 80055e6:	603b      	str	r3, [r7, #0]
 80055e8:	e09e      	b.n	8005728 <ucg_com_SendCmdSeq+0x26c>
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	3301      	adds	r3, #1
 80055ee:	603b      	str	r3, [r7, #0]
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	781b      	ldrb	r3, [r3, #0]
 80055f4:	73fb      	strb	r3, [r7, #15]
 80055f6:	7b7b      	ldrb	r3, [r7, #13]
 80055f8:	b29b      	uxth	r3, r3
 80055fa:	021b      	lsls	r3, r3, #8
 80055fc:	b29a      	uxth	r2, r3
 80055fe:	7bfb      	ldrb	r3, [r7, #15]
 8005600:	b29b      	uxth	r3, r3
 8005602:	4413      	add	r3, r2
 8005604:	b29b      	uxth	r3, r3
 8005606:	4619      	mov	r1, r3
 8005608:	6878      	ldr	r0, [r7, #4]
 800560a:	f7ff fec3 	bl	8005394 <ucg_com_DelayMicroseconds>
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	3301      	adds	r3, #1
 8005612:	603b      	str	r3, [r7, #0]
 8005614:	e088      	b.n	8005728 <ucg_com_SendCmdSeq+0x26c>
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	3301      	adds	r3, #1
 800561a:	603b      	str	r3, [r7, #0]
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	781b      	ldrb	r3, [r3, #0]
 8005620:	73fb      	strb	r3, [r7, #15]
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	3301      	adds	r3, #1
 8005626:	603b      	str	r3, [r7, #0]
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	781b      	ldrb	r3, [r3, #0]
 800562c:	733b      	strb	r3, [r7, #12]
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	3301      	adds	r3, #1
 8005632:	603b      	str	r3, [r7, #0]
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 800563a:	f003 0301 	and.w	r3, r3, #1
 800563e:	b2db      	uxtb	r3, r3
 8005640:	4619      	mov	r1, r3
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	f7ff fe96 	bl	8005374 <ucg_com_SetCDLineStatus>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 800564e:	461a      	mov	r2, r3
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8005656:	441a      	add	r2, r3
 8005658:	7b7b      	ldrb	r3, [r7, #13]
 800565a:	fa42 f303 	asr.w	r3, r2, r3
 800565e:	b2da      	uxtb	r2, r3
 8005660:	7bfb      	ldrb	r3, [r7, #15]
 8005662:	4013      	ands	r3, r2
 8005664:	b2da      	uxtb	r2, r3
 8005666:	7b3b      	ldrb	r3, [r7, #12]
 8005668:	4313      	orrs	r3, r2
 800566a:	b2db      	uxtb	r3, r3
 800566c:	4619      	mov	r1, r3
 800566e:	6878      	ldr	r0, [r7, #4]
 8005670:	f7ff feb7 	bl	80053e2 <ucg_com_SendByte>
 8005674:	e058      	b.n	8005728 <ucg_com_SendCmdSeq+0x26c>
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	3301      	adds	r3, #1
 800567a:	603b      	str	r3, [r7, #0]
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	781b      	ldrb	r3, [r3, #0]
 8005680:	73fb      	strb	r3, [r7, #15]
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	3301      	adds	r3, #1
 8005686:	603b      	str	r3, [r7, #0]
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	781b      	ldrb	r3, [r3, #0]
 800568c:	733b      	strb	r3, [r7, #12]
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	3301      	adds	r3, #1
 8005692:	603b      	str	r3, [r7, #0]
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 800569a:	f003 0301 	and.w	r3, r3, #1
 800569e:	b2db      	uxtb	r3, r3
 80056a0:	4619      	mov	r1, r3
 80056a2:	6878      	ldr	r0, [r7, #4]
 80056a4:	f7ff fe66 	bl	8005374 <ucg_com_SetCDLineStatus>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	@ 0x26
 80056ae:	461a      	mov	r2, r3
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	@ 0x22
 80056b6:	441a      	add	r2, r3
 80056b8:	7b7b      	ldrb	r3, [r7, #13]
 80056ba:	fa42 f303 	asr.w	r3, r2, r3
 80056be:	b2da      	uxtb	r2, r3
 80056c0:	7bfb      	ldrb	r3, [r7, #15]
 80056c2:	4013      	ands	r3, r2
 80056c4:	b2da      	uxtb	r2, r3
 80056c6:	7b3b      	ldrb	r3, [r7, #12]
 80056c8:	4313      	orrs	r3, r2
 80056ca:	b2db      	uxtb	r3, r3
 80056cc:	4619      	mov	r1, r3
 80056ce:	6878      	ldr	r0, [r7, #4]
 80056d0:	f7ff fe87 	bl	80053e2 <ucg_com_SendByte>
 80056d4:	e028      	b.n	8005728 <ucg_com_SendCmdSeq+0x26c>
 80056d6:	7b7b      	ldrb	r3, [r7, #13]
 80056d8:	089b      	lsrs	r3, r3, #2
 80056da:	73bb      	strb	r3, [r7, #14]
 80056dc:	7b7b      	ldrb	r3, [r7, #13]
 80056de:	f003 0303 	and.w	r3, r3, #3
 80056e2:	737b      	strb	r3, [r7, #13]
 80056e4:	7bbb      	ldrb	r3, [r7, #14]
 80056e6:	2b01      	cmp	r3, #1
 80056e8:	d00c      	beq.n	8005704 <ucg_com_SendCmdSeq+0x248>
 80056ea:	2b03      	cmp	r3, #3
 80056ec:	d013      	beq.n	8005716 <ucg_com_SendCmdSeq+0x25a>
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d116      	bne.n	8005720 <ucg_com_SendCmdSeq+0x264>
 80056f2:	7b7b      	ldrb	r3, [r7, #13]
 80056f4:	f003 0301 	and.w	r3, r3, #1
 80056f8:	b2db      	uxtb	r3, r3
 80056fa:	4619      	mov	r1, r3
 80056fc:	6878      	ldr	r0, [r7, #4]
 80056fe:	f7ff fe19 	bl	8005334 <ucg_com_SetResetLineStatus>
 8005702:	e00d      	b.n	8005720 <ucg_com_SendCmdSeq+0x264>
 8005704:	7b7b      	ldrb	r3, [r7, #13]
 8005706:	f003 0301 	and.w	r3, r3, #1
 800570a:	b2db      	uxtb	r3, r3
 800570c:	4619      	mov	r1, r3
 800570e:	6878      	ldr	r0, [r7, #4]
 8005710:	f7ff fe20 	bl	8005354 <ucg_com_SetCSLineStatus>
 8005714:	e004      	b.n	8005720 <ucg_com_SendCmdSeq+0x264>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	7b7a      	ldrb	r2, [r7, #13]
 800571a:	f883 20b0 	strb.w	r2, [r3, #176]	@ 0xb0
 800571e:	bf00      	nop
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	3301      	adds	r3, #1
 8005724:	603b      	str	r3, [r7, #0]
 8005726:	bf00      	nop
 8005728:	e6cd      	b.n	80054c6 <ucg_com_SendCmdSeq+0xa>
 800572a:	bf00      	nop
 800572c:	3710      	adds	r7, #16
 800572e:	46bd      	mov	sp, r7
 8005730:	bd80      	pop	{r7, pc}
 8005732:	bf00      	nop

08005734 <siprintf>:
 8005734:	b40e      	push	{r1, r2, r3}
 8005736:	b500      	push	{lr}
 8005738:	b09c      	sub	sp, #112	@ 0x70
 800573a:	ab1d      	add	r3, sp, #116	@ 0x74
 800573c:	9002      	str	r0, [sp, #8]
 800573e:	9006      	str	r0, [sp, #24]
 8005740:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005744:	4809      	ldr	r0, [pc, #36]	@ (800576c <siprintf+0x38>)
 8005746:	9107      	str	r1, [sp, #28]
 8005748:	9104      	str	r1, [sp, #16]
 800574a:	4909      	ldr	r1, [pc, #36]	@ (8005770 <siprintf+0x3c>)
 800574c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005750:	9105      	str	r1, [sp, #20]
 8005752:	6800      	ldr	r0, [r0, #0]
 8005754:	9301      	str	r3, [sp, #4]
 8005756:	a902      	add	r1, sp, #8
 8005758:	f000 f994 	bl	8005a84 <_svfiprintf_r>
 800575c:	9b02      	ldr	r3, [sp, #8]
 800575e:	2200      	movs	r2, #0
 8005760:	701a      	strb	r2, [r3, #0]
 8005762:	b01c      	add	sp, #112	@ 0x70
 8005764:	f85d eb04 	ldr.w	lr, [sp], #4
 8005768:	b003      	add	sp, #12
 800576a:	4770      	bx	lr
 800576c:	20000028 	.word	0x20000028
 8005770:	ffff0208 	.word	0xffff0208

08005774 <memset>:
 8005774:	4402      	add	r2, r0
 8005776:	4603      	mov	r3, r0
 8005778:	4293      	cmp	r3, r2
 800577a:	d100      	bne.n	800577e <memset+0xa>
 800577c:	4770      	bx	lr
 800577e:	f803 1b01 	strb.w	r1, [r3], #1
 8005782:	e7f9      	b.n	8005778 <memset+0x4>

08005784 <__errno>:
 8005784:	4b01      	ldr	r3, [pc, #4]	@ (800578c <__errno+0x8>)
 8005786:	6818      	ldr	r0, [r3, #0]
 8005788:	4770      	bx	lr
 800578a:	bf00      	nop
 800578c:	20000028 	.word	0x20000028

08005790 <__libc_init_array>:
 8005790:	b570      	push	{r4, r5, r6, lr}
 8005792:	4d0d      	ldr	r5, [pc, #52]	@ (80057c8 <__libc_init_array+0x38>)
 8005794:	4c0d      	ldr	r4, [pc, #52]	@ (80057cc <__libc_init_array+0x3c>)
 8005796:	1b64      	subs	r4, r4, r5
 8005798:	10a4      	asrs	r4, r4, #2
 800579a:	2600      	movs	r6, #0
 800579c:	42a6      	cmp	r6, r4
 800579e:	d109      	bne.n	80057b4 <__libc_init_array+0x24>
 80057a0:	4d0b      	ldr	r5, [pc, #44]	@ (80057d0 <__libc_init_array+0x40>)
 80057a2:	4c0c      	ldr	r4, [pc, #48]	@ (80057d4 <__libc_init_array+0x44>)
 80057a4:	f000 fc66 	bl	8006074 <_init>
 80057a8:	1b64      	subs	r4, r4, r5
 80057aa:	10a4      	asrs	r4, r4, #2
 80057ac:	2600      	movs	r6, #0
 80057ae:	42a6      	cmp	r6, r4
 80057b0:	d105      	bne.n	80057be <__libc_init_array+0x2e>
 80057b2:	bd70      	pop	{r4, r5, r6, pc}
 80057b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80057b8:	4798      	blx	r3
 80057ba:	3601      	adds	r6, #1
 80057bc:	e7ee      	b.n	800579c <__libc_init_array+0xc>
 80057be:	f855 3b04 	ldr.w	r3, [r5], #4
 80057c2:	4798      	blx	r3
 80057c4:	3601      	adds	r6, #1
 80057c6:	e7f2      	b.n	80057ae <__libc_init_array+0x1e>
 80057c8:	080069b8 	.word	0x080069b8
 80057cc:	080069b8 	.word	0x080069b8
 80057d0:	080069b8 	.word	0x080069b8
 80057d4:	080069bc 	.word	0x080069bc

080057d8 <__retarget_lock_acquire_recursive>:
 80057d8:	4770      	bx	lr

080057da <__retarget_lock_release_recursive>:
 80057da:	4770      	bx	lr

080057dc <_free_r>:
 80057dc:	b538      	push	{r3, r4, r5, lr}
 80057de:	4605      	mov	r5, r0
 80057e0:	2900      	cmp	r1, #0
 80057e2:	d041      	beq.n	8005868 <_free_r+0x8c>
 80057e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80057e8:	1f0c      	subs	r4, r1, #4
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	bfb8      	it	lt
 80057ee:	18e4      	addlt	r4, r4, r3
 80057f0:	f000 f8e0 	bl	80059b4 <__malloc_lock>
 80057f4:	4a1d      	ldr	r2, [pc, #116]	@ (800586c <_free_r+0x90>)
 80057f6:	6813      	ldr	r3, [r2, #0]
 80057f8:	b933      	cbnz	r3, 8005808 <_free_r+0x2c>
 80057fa:	6063      	str	r3, [r4, #4]
 80057fc:	6014      	str	r4, [r2, #0]
 80057fe:	4628      	mov	r0, r5
 8005800:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005804:	f000 b8dc 	b.w	80059c0 <__malloc_unlock>
 8005808:	42a3      	cmp	r3, r4
 800580a:	d908      	bls.n	800581e <_free_r+0x42>
 800580c:	6820      	ldr	r0, [r4, #0]
 800580e:	1821      	adds	r1, r4, r0
 8005810:	428b      	cmp	r3, r1
 8005812:	bf01      	itttt	eq
 8005814:	6819      	ldreq	r1, [r3, #0]
 8005816:	685b      	ldreq	r3, [r3, #4]
 8005818:	1809      	addeq	r1, r1, r0
 800581a:	6021      	streq	r1, [r4, #0]
 800581c:	e7ed      	b.n	80057fa <_free_r+0x1e>
 800581e:	461a      	mov	r2, r3
 8005820:	685b      	ldr	r3, [r3, #4]
 8005822:	b10b      	cbz	r3, 8005828 <_free_r+0x4c>
 8005824:	42a3      	cmp	r3, r4
 8005826:	d9fa      	bls.n	800581e <_free_r+0x42>
 8005828:	6811      	ldr	r1, [r2, #0]
 800582a:	1850      	adds	r0, r2, r1
 800582c:	42a0      	cmp	r0, r4
 800582e:	d10b      	bne.n	8005848 <_free_r+0x6c>
 8005830:	6820      	ldr	r0, [r4, #0]
 8005832:	4401      	add	r1, r0
 8005834:	1850      	adds	r0, r2, r1
 8005836:	4283      	cmp	r3, r0
 8005838:	6011      	str	r1, [r2, #0]
 800583a:	d1e0      	bne.n	80057fe <_free_r+0x22>
 800583c:	6818      	ldr	r0, [r3, #0]
 800583e:	685b      	ldr	r3, [r3, #4]
 8005840:	6053      	str	r3, [r2, #4]
 8005842:	4408      	add	r0, r1
 8005844:	6010      	str	r0, [r2, #0]
 8005846:	e7da      	b.n	80057fe <_free_r+0x22>
 8005848:	d902      	bls.n	8005850 <_free_r+0x74>
 800584a:	230c      	movs	r3, #12
 800584c:	602b      	str	r3, [r5, #0]
 800584e:	e7d6      	b.n	80057fe <_free_r+0x22>
 8005850:	6820      	ldr	r0, [r4, #0]
 8005852:	1821      	adds	r1, r4, r0
 8005854:	428b      	cmp	r3, r1
 8005856:	bf04      	itt	eq
 8005858:	6819      	ldreq	r1, [r3, #0]
 800585a:	685b      	ldreq	r3, [r3, #4]
 800585c:	6063      	str	r3, [r4, #4]
 800585e:	bf04      	itt	eq
 8005860:	1809      	addeq	r1, r1, r0
 8005862:	6021      	streq	r1, [r4, #0]
 8005864:	6054      	str	r4, [r2, #4]
 8005866:	e7ca      	b.n	80057fe <_free_r+0x22>
 8005868:	bd38      	pop	{r3, r4, r5, pc}
 800586a:	bf00      	nop
 800586c:	200014d0 	.word	0x200014d0

08005870 <sbrk_aligned>:
 8005870:	b570      	push	{r4, r5, r6, lr}
 8005872:	4e0f      	ldr	r6, [pc, #60]	@ (80058b0 <sbrk_aligned+0x40>)
 8005874:	460c      	mov	r4, r1
 8005876:	6831      	ldr	r1, [r6, #0]
 8005878:	4605      	mov	r5, r0
 800587a:	b911      	cbnz	r1, 8005882 <sbrk_aligned+0x12>
 800587c:	f000 fba6 	bl	8005fcc <_sbrk_r>
 8005880:	6030      	str	r0, [r6, #0]
 8005882:	4621      	mov	r1, r4
 8005884:	4628      	mov	r0, r5
 8005886:	f000 fba1 	bl	8005fcc <_sbrk_r>
 800588a:	1c43      	adds	r3, r0, #1
 800588c:	d103      	bne.n	8005896 <sbrk_aligned+0x26>
 800588e:	f04f 34ff 	mov.w	r4, #4294967295
 8005892:	4620      	mov	r0, r4
 8005894:	bd70      	pop	{r4, r5, r6, pc}
 8005896:	1cc4      	adds	r4, r0, #3
 8005898:	f024 0403 	bic.w	r4, r4, #3
 800589c:	42a0      	cmp	r0, r4
 800589e:	d0f8      	beq.n	8005892 <sbrk_aligned+0x22>
 80058a0:	1a21      	subs	r1, r4, r0
 80058a2:	4628      	mov	r0, r5
 80058a4:	f000 fb92 	bl	8005fcc <_sbrk_r>
 80058a8:	3001      	adds	r0, #1
 80058aa:	d1f2      	bne.n	8005892 <sbrk_aligned+0x22>
 80058ac:	e7ef      	b.n	800588e <sbrk_aligned+0x1e>
 80058ae:	bf00      	nop
 80058b0:	200014cc 	.word	0x200014cc

080058b4 <_malloc_r>:
 80058b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80058b8:	1ccd      	adds	r5, r1, #3
 80058ba:	f025 0503 	bic.w	r5, r5, #3
 80058be:	3508      	adds	r5, #8
 80058c0:	2d0c      	cmp	r5, #12
 80058c2:	bf38      	it	cc
 80058c4:	250c      	movcc	r5, #12
 80058c6:	2d00      	cmp	r5, #0
 80058c8:	4606      	mov	r6, r0
 80058ca:	db01      	blt.n	80058d0 <_malloc_r+0x1c>
 80058cc:	42a9      	cmp	r1, r5
 80058ce:	d904      	bls.n	80058da <_malloc_r+0x26>
 80058d0:	230c      	movs	r3, #12
 80058d2:	6033      	str	r3, [r6, #0]
 80058d4:	2000      	movs	r0, #0
 80058d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80058da:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80059b0 <_malloc_r+0xfc>
 80058de:	f000 f869 	bl	80059b4 <__malloc_lock>
 80058e2:	f8d8 3000 	ldr.w	r3, [r8]
 80058e6:	461c      	mov	r4, r3
 80058e8:	bb44      	cbnz	r4, 800593c <_malloc_r+0x88>
 80058ea:	4629      	mov	r1, r5
 80058ec:	4630      	mov	r0, r6
 80058ee:	f7ff ffbf 	bl	8005870 <sbrk_aligned>
 80058f2:	1c43      	adds	r3, r0, #1
 80058f4:	4604      	mov	r4, r0
 80058f6:	d158      	bne.n	80059aa <_malloc_r+0xf6>
 80058f8:	f8d8 4000 	ldr.w	r4, [r8]
 80058fc:	4627      	mov	r7, r4
 80058fe:	2f00      	cmp	r7, #0
 8005900:	d143      	bne.n	800598a <_malloc_r+0xd6>
 8005902:	2c00      	cmp	r4, #0
 8005904:	d04b      	beq.n	800599e <_malloc_r+0xea>
 8005906:	6823      	ldr	r3, [r4, #0]
 8005908:	4639      	mov	r1, r7
 800590a:	4630      	mov	r0, r6
 800590c:	eb04 0903 	add.w	r9, r4, r3
 8005910:	f000 fb5c 	bl	8005fcc <_sbrk_r>
 8005914:	4581      	cmp	r9, r0
 8005916:	d142      	bne.n	800599e <_malloc_r+0xea>
 8005918:	6821      	ldr	r1, [r4, #0]
 800591a:	1a6d      	subs	r5, r5, r1
 800591c:	4629      	mov	r1, r5
 800591e:	4630      	mov	r0, r6
 8005920:	f7ff ffa6 	bl	8005870 <sbrk_aligned>
 8005924:	3001      	adds	r0, #1
 8005926:	d03a      	beq.n	800599e <_malloc_r+0xea>
 8005928:	6823      	ldr	r3, [r4, #0]
 800592a:	442b      	add	r3, r5
 800592c:	6023      	str	r3, [r4, #0]
 800592e:	f8d8 3000 	ldr.w	r3, [r8]
 8005932:	685a      	ldr	r2, [r3, #4]
 8005934:	bb62      	cbnz	r2, 8005990 <_malloc_r+0xdc>
 8005936:	f8c8 7000 	str.w	r7, [r8]
 800593a:	e00f      	b.n	800595c <_malloc_r+0xa8>
 800593c:	6822      	ldr	r2, [r4, #0]
 800593e:	1b52      	subs	r2, r2, r5
 8005940:	d420      	bmi.n	8005984 <_malloc_r+0xd0>
 8005942:	2a0b      	cmp	r2, #11
 8005944:	d917      	bls.n	8005976 <_malloc_r+0xc2>
 8005946:	1961      	adds	r1, r4, r5
 8005948:	42a3      	cmp	r3, r4
 800594a:	6025      	str	r5, [r4, #0]
 800594c:	bf18      	it	ne
 800594e:	6059      	strne	r1, [r3, #4]
 8005950:	6863      	ldr	r3, [r4, #4]
 8005952:	bf08      	it	eq
 8005954:	f8c8 1000 	streq.w	r1, [r8]
 8005958:	5162      	str	r2, [r4, r5]
 800595a:	604b      	str	r3, [r1, #4]
 800595c:	4630      	mov	r0, r6
 800595e:	f000 f82f 	bl	80059c0 <__malloc_unlock>
 8005962:	f104 000b 	add.w	r0, r4, #11
 8005966:	1d23      	adds	r3, r4, #4
 8005968:	f020 0007 	bic.w	r0, r0, #7
 800596c:	1ac2      	subs	r2, r0, r3
 800596e:	bf1c      	itt	ne
 8005970:	1a1b      	subne	r3, r3, r0
 8005972:	50a3      	strne	r3, [r4, r2]
 8005974:	e7af      	b.n	80058d6 <_malloc_r+0x22>
 8005976:	6862      	ldr	r2, [r4, #4]
 8005978:	42a3      	cmp	r3, r4
 800597a:	bf0c      	ite	eq
 800597c:	f8c8 2000 	streq.w	r2, [r8]
 8005980:	605a      	strne	r2, [r3, #4]
 8005982:	e7eb      	b.n	800595c <_malloc_r+0xa8>
 8005984:	4623      	mov	r3, r4
 8005986:	6864      	ldr	r4, [r4, #4]
 8005988:	e7ae      	b.n	80058e8 <_malloc_r+0x34>
 800598a:	463c      	mov	r4, r7
 800598c:	687f      	ldr	r7, [r7, #4]
 800598e:	e7b6      	b.n	80058fe <_malloc_r+0x4a>
 8005990:	461a      	mov	r2, r3
 8005992:	685b      	ldr	r3, [r3, #4]
 8005994:	42a3      	cmp	r3, r4
 8005996:	d1fb      	bne.n	8005990 <_malloc_r+0xdc>
 8005998:	2300      	movs	r3, #0
 800599a:	6053      	str	r3, [r2, #4]
 800599c:	e7de      	b.n	800595c <_malloc_r+0xa8>
 800599e:	230c      	movs	r3, #12
 80059a0:	6033      	str	r3, [r6, #0]
 80059a2:	4630      	mov	r0, r6
 80059a4:	f000 f80c 	bl	80059c0 <__malloc_unlock>
 80059a8:	e794      	b.n	80058d4 <_malloc_r+0x20>
 80059aa:	6005      	str	r5, [r0, #0]
 80059ac:	e7d6      	b.n	800595c <_malloc_r+0xa8>
 80059ae:	bf00      	nop
 80059b0:	200014d0 	.word	0x200014d0

080059b4 <__malloc_lock>:
 80059b4:	4801      	ldr	r0, [pc, #4]	@ (80059bc <__malloc_lock+0x8>)
 80059b6:	f7ff bf0f 	b.w	80057d8 <__retarget_lock_acquire_recursive>
 80059ba:	bf00      	nop
 80059bc:	200014c8 	.word	0x200014c8

080059c0 <__malloc_unlock>:
 80059c0:	4801      	ldr	r0, [pc, #4]	@ (80059c8 <__malloc_unlock+0x8>)
 80059c2:	f7ff bf0a 	b.w	80057da <__retarget_lock_release_recursive>
 80059c6:	bf00      	nop
 80059c8:	200014c8 	.word	0x200014c8

080059cc <__ssputs_r>:
 80059cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059d0:	688e      	ldr	r6, [r1, #8]
 80059d2:	461f      	mov	r7, r3
 80059d4:	42be      	cmp	r6, r7
 80059d6:	680b      	ldr	r3, [r1, #0]
 80059d8:	4682      	mov	sl, r0
 80059da:	460c      	mov	r4, r1
 80059dc:	4690      	mov	r8, r2
 80059de:	d82d      	bhi.n	8005a3c <__ssputs_r+0x70>
 80059e0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80059e4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80059e8:	d026      	beq.n	8005a38 <__ssputs_r+0x6c>
 80059ea:	6965      	ldr	r5, [r4, #20]
 80059ec:	6909      	ldr	r1, [r1, #16]
 80059ee:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80059f2:	eba3 0901 	sub.w	r9, r3, r1
 80059f6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80059fa:	1c7b      	adds	r3, r7, #1
 80059fc:	444b      	add	r3, r9
 80059fe:	106d      	asrs	r5, r5, #1
 8005a00:	429d      	cmp	r5, r3
 8005a02:	bf38      	it	cc
 8005a04:	461d      	movcc	r5, r3
 8005a06:	0553      	lsls	r3, r2, #21
 8005a08:	d527      	bpl.n	8005a5a <__ssputs_r+0x8e>
 8005a0a:	4629      	mov	r1, r5
 8005a0c:	f7ff ff52 	bl	80058b4 <_malloc_r>
 8005a10:	4606      	mov	r6, r0
 8005a12:	b360      	cbz	r0, 8005a6e <__ssputs_r+0xa2>
 8005a14:	6921      	ldr	r1, [r4, #16]
 8005a16:	464a      	mov	r2, r9
 8005a18:	f000 fae8 	bl	8005fec <memcpy>
 8005a1c:	89a3      	ldrh	r3, [r4, #12]
 8005a1e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005a22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a26:	81a3      	strh	r3, [r4, #12]
 8005a28:	6126      	str	r6, [r4, #16]
 8005a2a:	6165      	str	r5, [r4, #20]
 8005a2c:	444e      	add	r6, r9
 8005a2e:	eba5 0509 	sub.w	r5, r5, r9
 8005a32:	6026      	str	r6, [r4, #0]
 8005a34:	60a5      	str	r5, [r4, #8]
 8005a36:	463e      	mov	r6, r7
 8005a38:	42be      	cmp	r6, r7
 8005a3a:	d900      	bls.n	8005a3e <__ssputs_r+0x72>
 8005a3c:	463e      	mov	r6, r7
 8005a3e:	6820      	ldr	r0, [r4, #0]
 8005a40:	4632      	mov	r2, r6
 8005a42:	4641      	mov	r1, r8
 8005a44:	f000 faa8 	bl	8005f98 <memmove>
 8005a48:	68a3      	ldr	r3, [r4, #8]
 8005a4a:	1b9b      	subs	r3, r3, r6
 8005a4c:	60a3      	str	r3, [r4, #8]
 8005a4e:	6823      	ldr	r3, [r4, #0]
 8005a50:	4433      	add	r3, r6
 8005a52:	6023      	str	r3, [r4, #0]
 8005a54:	2000      	movs	r0, #0
 8005a56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a5a:	462a      	mov	r2, r5
 8005a5c:	f000 fad4 	bl	8006008 <_realloc_r>
 8005a60:	4606      	mov	r6, r0
 8005a62:	2800      	cmp	r0, #0
 8005a64:	d1e0      	bne.n	8005a28 <__ssputs_r+0x5c>
 8005a66:	6921      	ldr	r1, [r4, #16]
 8005a68:	4650      	mov	r0, sl
 8005a6a:	f7ff feb7 	bl	80057dc <_free_r>
 8005a6e:	230c      	movs	r3, #12
 8005a70:	f8ca 3000 	str.w	r3, [sl]
 8005a74:	89a3      	ldrh	r3, [r4, #12]
 8005a76:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005a7a:	81a3      	strh	r3, [r4, #12]
 8005a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8005a80:	e7e9      	b.n	8005a56 <__ssputs_r+0x8a>
	...

08005a84 <_svfiprintf_r>:
 8005a84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a88:	4698      	mov	r8, r3
 8005a8a:	898b      	ldrh	r3, [r1, #12]
 8005a8c:	061b      	lsls	r3, r3, #24
 8005a8e:	b09d      	sub	sp, #116	@ 0x74
 8005a90:	4607      	mov	r7, r0
 8005a92:	460d      	mov	r5, r1
 8005a94:	4614      	mov	r4, r2
 8005a96:	d510      	bpl.n	8005aba <_svfiprintf_r+0x36>
 8005a98:	690b      	ldr	r3, [r1, #16]
 8005a9a:	b973      	cbnz	r3, 8005aba <_svfiprintf_r+0x36>
 8005a9c:	2140      	movs	r1, #64	@ 0x40
 8005a9e:	f7ff ff09 	bl	80058b4 <_malloc_r>
 8005aa2:	6028      	str	r0, [r5, #0]
 8005aa4:	6128      	str	r0, [r5, #16]
 8005aa6:	b930      	cbnz	r0, 8005ab6 <_svfiprintf_r+0x32>
 8005aa8:	230c      	movs	r3, #12
 8005aaa:	603b      	str	r3, [r7, #0]
 8005aac:	f04f 30ff 	mov.w	r0, #4294967295
 8005ab0:	b01d      	add	sp, #116	@ 0x74
 8005ab2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ab6:	2340      	movs	r3, #64	@ 0x40
 8005ab8:	616b      	str	r3, [r5, #20]
 8005aba:	2300      	movs	r3, #0
 8005abc:	9309      	str	r3, [sp, #36]	@ 0x24
 8005abe:	2320      	movs	r3, #32
 8005ac0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005ac4:	f8cd 800c 	str.w	r8, [sp, #12]
 8005ac8:	2330      	movs	r3, #48	@ 0x30
 8005aca:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005c68 <_svfiprintf_r+0x1e4>
 8005ace:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005ad2:	f04f 0901 	mov.w	r9, #1
 8005ad6:	4623      	mov	r3, r4
 8005ad8:	469a      	mov	sl, r3
 8005ada:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005ade:	b10a      	cbz	r2, 8005ae4 <_svfiprintf_r+0x60>
 8005ae0:	2a25      	cmp	r2, #37	@ 0x25
 8005ae2:	d1f9      	bne.n	8005ad8 <_svfiprintf_r+0x54>
 8005ae4:	ebba 0b04 	subs.w	fp, sl, r4
 8005ae8:	d00b      	beq.n	8005b02 <_svfiprintf_r+0x7e>
 8005aea:	465b      	mov	r3, fp
 8005aec:	4622      	mov	r2, r4
 8005aee:	4629      	mov	r1, r5
 8005af0:	4638      	mov	r0, r7
 8005af2:	f7ff ff6b 	bl	80059cc <__ssputs_r>
 8005af6:	3001      	adds	r0, #1
 8005af8:	f000 80a7 	beq.w	8005c4a <_svfiprintf_r+0x1c6>
 8005afc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005afe:	445a      	add	r2, fp
 8005b00:	9209      	str	r2, [sp, #36]	@ 0x24
 8005b02:	f89a 3000 	ldrb.w	r3, [sl]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	f000 809f 	beq.w	8005c4a <_svfiprintf_r+0x1c6>
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	f04f 32ff 	mov.w	r2, #4294967295
 8005b12:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005b16:	f10a 0a01 	add.w	sl, sl, #1
 8005b1a:	9304      	str	r3, [sp, #16]
 8005b1c:	9307      	str	r3, [sp, #28]
 8005b1e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005b22:	931a      	str	r3, [sp, #104]	@ 0x68
 8005b24:	4654      	mov	r4, sl
 8005b26:	2205      	movs	r2, #5
 8005b28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b2c:	484e      	ldr	r0, [pc, #312]	@ (8005c68 <_svfiprintf_r+0x1e4>)
 8005b2e:	f7fa fb57 	bl	80001e0 <memchr>
 8005b32:	9a04      	ldr	r2, [sp, #16]
 8005b34:	b9d8      	cbnz	r0, 8005b6e <_svfiprintf_r+0xea>
 8005b36:	06d0      	lsls	r0, r2, #27
 8005b38:	bf44      	itt	mi
 8005b3a:	2320      	movmi	r3, #32
 8005b3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005b40:	0711      	lsls	r1, r2, #28
 8005b42:	bf44      	itt	mi
 8005b44:	232b      	movmi	r3, #43	@ 0x2b
 8005b46:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005b4a:	f89a 3000 	ldrb.w	r3, [sl]
 8005b4e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005b50:	d015      	beq.n	8005b7e <_svfiprintf_r+0xfa>
 8005b52:	9a07      	ldr	r2, [sp, #28]
 8005b54:	4654      	mov	r4, sl
 8005b56:	2000      	movs	r0, #0
 8005b58:	f04f 0c0a 	mov.w	ip, #10
 8005b5c:	4621      	mov	r1, r4
 8005b5e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005b62:	3b30      	subs	r3, #48	@ 0x30
 8005b64:	2b09      	cmp	r3, #9
 8005b66:	d94b      	bls.n	8005c00 <_svfiprintf_r+0x17c>
 8005b68:	b1b0      	cbz	r0, 8005b98 <_svfiprintf_r+0x114>
 8005b6a:	9207      	str	r2, [sp, #28]
 8005b6c:	e014      	b.n	8005b98 <_svfiprintf_r+0x114>
 8005b6e:	eba0 0308 	sub.w	r3, r0, r8
 8005b72:	fa09 f303 	lsl.w	r3, r9, r3
 8005b76:	4313      	orrs	r3, r2
 8005b78:	9304      	str	r3, [sp, #16]
 8005b7a:	46a2      	mov	sl, r4
 8005b7c:	e7d2      	b.n	8005b24 <_svfiprintf_r+0xa0>
 8005b7e:	9b03      	ldr	r3, [sp, #12]
 8005b80:	1d19      	adds	r1, r3, #4
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	9103      	str	r1, [sp, #12]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	bfbb      	ittet	lt
 8005b8a:	425b      	neglt	r3, r3
 8005b8c:	f042 0202 	orrlt.w	r2, r2, #2
 8005b90:	9307      	strge	r3, [sp, #28]
 8005b92:	9307      	strlt	r3, [sp, #28]
 8005b94:	bfb8      	it	lt
 8005b96:	9204      	strlt	r2, [sp, #16]
 8005b98:	7823      	ldrb	r3, [r4, #0]
 8005b9a:	2b2e      	cmp	r3, #46	@ 0x2e
 8005b9c:	d10a      	bne.n	8005bb4 <_svfiprintf_r+0x130>
 8005b9e:	7863      	ldrb	r3, [r4, #1]
 8005ba0:	2b2a      	cmp	r3, #42	@ 0x2a
 8005ba2:	d132      	bne.n	8005c0a <_svfiprintf_r+0x186>
 8005ba4:	9b03      	ldr	r3, [sp, #12]
 8005ba6:	1d1a      	adds	r2, r3, #4
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	9203      	str	r2, [sp, #12]
 8005bac:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005bb0:	3402      	adds	r4, #2
 8005bb2:	9305      	str	r3, [sp, #20]
 8005bb4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005c78 <_svfiprintf_r+0x1f4>
 8005bb8:	7821      	ldrb	r1, [r4, #0]
 8005bba:	2203      	movs	r2, #3
 8005bbc:	4650      	mov	r0, sl
 8005bbe:	f7fa fb0f 	bl	80001e0 <memchr>
 8005bc2:	b138      	cbz	r0, 8005bd4 <_svfiprintf_r+0x150>
 8005bc4:	9b04      	ldr	r3, [sp, #16]
 8005bc6:	eba0 000a 	sub.w	r0, r0, sl
 8005bca:	2240      	movs	r2, #64	@ 0x40
 8005bcc:	4082      	lsls	r2, r0
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	3401      	adds	r4, #1
 8005bd2:	9304      	str	r3, [sp, #16]
 8005bd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005bd8:	4824      	ldr	r0, [pc, #144]	@ (8005c6c <_svfiprintf_r+0x1e8>)
 8005bda:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005bde:	2206      	movs	r2, #6
 8005be0:	f7fa fafe 	bl	80001e0 <memchr>
 8005be4:	2800      	cmp	r0, #0
 8005be6:	d036      	beq.n	8005c56 <_svfiprintf_r+0x1d2>
 8005be8:	4b21      	ldr	r3, [pc, #132]	@ (8005c70 <_svfiprintf_r+0x1ec>)
 8005bea:	bb1b      	cbnz	r3, 8005c34 <_svfiprintf_r+0x1b0>
 8005bec:	9b03      	ldr	r3, [sp, #12]
 8005bee:	3307      	adds	r3, #7
 8005bf0:	f023 0307 	bic.w	r3, r3, #7
 8005bf4:	3308      	adds	r3, #8
 8005bf6:	9303      	str	r3, [sp, #12]
 8005bf8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005bfa:	4433      	add	r3, r6
 8005bfc:	9309      	str	r3, [sp, #36]	@ 0x24
 8005bfe:	e76a      	b.n	8005ad6 <_svfiprintf_r+0x52>
 8005c00:	fb0c 3202 	mla	r2, ip, r2, r3
 8005c04:	460c      	mov	r4, r1
 8005c06:	2001      	movs	r0, #1
 8005c08:	e7a8      	b.n	8005b5c <_svfiprintf_r+0xd8>
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	3401      	adds	r4, #1
 8005c0e:	9305      	str	r3, [sp, #20]
 8005c10:	4619      	mov	r1, r3
 8005c12:	f04f 0c0a 	mov.w	ip, #10
 8005c16:	4620      	mov	r0, r4
 8005c18:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005c1c:	3a30      	subs	r2, #48	@ 0x30
 8005c1e:	2a09      	cmp	r2, #9
 8005c20:	d903      	bls.n	8005c2a <_svfiprintf_r+0x1a6>
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d0c6      	beq.n	8005bb4 <_svfiprintf_r+0x130>
 8005c26:	9105      	str	r1, [sp, #20]
 8005c28:	e7c4      	b.n	8005bb4 <_svfiprintf_r+0x130>
 8005c2a:	fb0c 2101 	mla	r1, ip, r1, r2
 8005c2e:	4604      	mov	r4, r0
 8005c30:	2301      	movs	r3, #1
 8005c32:	e7f0      	b.n	8005c16 <_svfiprintf_r+0x192>
 8005c34:	ab03      	add	r3, sp, #12
 8005c36:	9300      	str	r3, [sp, #0]
 8005c38:	462a      	mov	r2, r5
 8005c3a:	4b0e      	ldr	r3, [pc, #56]	@ (8005c74 <_svfiprintf_r+0x1f0>)
 8005c3c:	a904      	add	r1, sp, #16
 8005c3e:	4638      	mov	r0, r7
 8005c40:	f3af 8000 	nop.w
 8005c44:	1c42      	adds	r2, r0, #1
 8005c46:	4606      	mov	r6, r0
 8005c48:	d1d6      	bne.n	8005bf8 <_svfiprintf_r+0x174>
 8005c4a:	89ab      	ldrh	r3, [r5, #12]
 8005c4c:	065b      	lsls	r3, r3, #25
 8005c4e:	f53f af2d 	bmi.w	8005aac <_svfiprintf_r+0x28>
 8005c52:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005c54:	e72c      	b.n	8005ab0 <_svfiprintf_r+0x2c>
 8005c56:	ab03      	add	r3, sp, #12
 8005c58:	9300      	str	r3, [sp, #0]
 8005c5a:	462a      	mov	r2, r5
 8005c5c:	4b05      	ldr	r3, [pc, #20]	@ (8005c74 <_svfiprintf_r+0x1f0>)
 8005c5e:	a904      	add	r1, sp, #16
 8005c60:	4638      	mov	r0, r7
 8005c62:	f000 f879 	bl	8005d58 <_printf_i>
 8005c66:	e7ed      	b.n	8005c44 <_svfiprintf_r+0x1c0>
 8005c68:	0800697c 	.word	0x0800697c
 8005c6c:	08006986 	.word	0x08006986
 8005c70:	00000000 	.word	0x00000000
 8005c74:	080059cd 	.word	0x080059cd
 8005c78:	08006982 	.word	0x08006982

08005c7c <_printf_common>:
 8005c7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c80:	4616      	mov	r6, r2
 8005c82:	4698      	mov	r8, r3
 8005c84:	688a      	ldr	r2, [r1, #8]
 8005c86:	690b      	ldr	r3, [r1, #16]
 8005c88:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	bfb8      	it	lt
 8005c90:	4613      	movlt	r3, r2
 8005c92:	6033      	str	r3, [r6, #0]
 8005c94:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005c98:	4607      	mov	r7, r0
 8005c9a:	460c      	mov	r4, r1
 8005c9c:	b10a      	cbz	r2, 8005ca2 <_printf_common+0x26>
 8005c9e:	3301      	adds	r3, #1
 8005ca0:	6033      	str	r3, [r6, #0]
 8005ca2:	6823      	ldr	r3, [r4, #0]
 8005ca4:	0699      	lsls	r1, r3, #26
 8005ca6:	bf42      	ittt	mi
 8005ca8:	6833      	ldrmi	r3, [r6, #0]
 8005caa:	3302      	addmi	r3, #2
 8005cac:	6033      	strmi	r3, [r6, #0]
 8005cae:	6825      	ldr	r5, [r4, #0]
 8005cb0:	f015 0506 	ands.w	r5, r5, #6
 8005cb4:	d106      	bne.n	8005cc4 <_printf_common+0x48>
 8005cb6:	f104 0a19 	add.w	sl, r4, #25
 8005cba:	68e3      	ldr	r3, [r4, #12]
 8005cbc:	6832      	ldr	r2, [r6, #0]
 8005cbe:	1a9b      	subs	r3, r3, r2
 8005cc0:	42ab      	cmp	r3, r5
 8005cc2:	dc26      	bgt.n	8005d12 <_printf_common+0x96>
 8005cc4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005cc8:	6822      	ldr	r2, [r4, #0]
 8005cca:	3b00      	subs	r3, #0
 8005ccc:	bf18      	it	ne
 8005cce:	2301      	movne	r3, #1
 8005cd0:	0692      	lsls	r2, r2, #26
 8005cd2:	d42b      	bmi.n	8005d2c <_printf_common+0xb0>
 8005cd4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005cd8:	4641      	mov	r1, r8
 8005cda:	4638      	mov	r0, r7
 8005cdc:	47c8      	blx	r9
 8005cde:	3001      	adds	r0, #1
 8005ce0:	d01e      	beq.n	8005d20 <_printf_common+0xa4>
 8005ce2:	6823      	ldr	r3, [r4, #0]
 8005ce4:	6922      	ldr	r2, [r4, #16]
 8005ce6:	f003 0306 	and.w	r3, r3, #6
 8005cea:	2b04      	cmp	r3, #4
 8005cec:	bf02      	ittt	eq
 8005cee:	68e5      	ldreq	r5, [r4, #12]
 8005cf0:	6833      	ldreq	r3, [r6, #0]
 8005cf2:	1aed      	subeq	r5, r5, r3
 8005cf4:	68a3      	ldr	r3, [r4, #8]
 8005cf6:	bf0c      	ite	eq
 8005cf8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005cfc:	2500      	movne	r5, #0
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	bfc4      	itt	gt
 8005d02:	1a9b      	subgt	r3, r3, r2
 8005d04:	18ed      	addgt	r5, r5, r3
 8005d06:	2600      	movs	r6, #0
 8005d08:	341a      	adds	r4, #26
 8005d0a:	42b5      	cmp	r5, r6
 8005d0c:	d11a      	bne.n	8005d44 <_printf_common+0xc8>
 8005d0e:	2000      	movs	r0, #0
 8005d10:	e008      	b.n	8005d24 <_printf_common+0xa8>
 8005d12:	2301      	movs	r3, #1
 8005d14:	4652      	mov	r2, sl
 8005d16:	4641      	mov	r1, r8
 8005d18:	4638      	mov	r0, r7
 8005d1a:	47c8      	blx	r9
 8005d1c:	3001      	adds	r0, #1
 8005d1e:	d103      	bne.n	8005d28 <_printf_common+0xac>
 8005d20:	f04f 30ff 	mov.w	r0, #4294967295
 8005d24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d28:	3501      	adds	r5, #1
 8005d2a:	e7c6      	b.n	8005cba <_printf_common+0x3e>
 8005d2c:	18e1      	adds	r1, r4, r3
 8005d2e:	1c5a      	adds	r2, r3, #1
 8005d30:	2030      	movs	r0, #48	@ 0x30
 8005d32:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005d36:	4422      	add	r2, r4
 8005d38:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005d3c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005d40:	3302      	adds	r3, #2
 8005d42:	e7c7      	b.n	8005cd4 <_printf_common+0x58>
 8005d44:	2301      	movs	r3, #1
 8005d46:	4622      	mov	r2, r4
 8005d48:	4641      	mov	r1, r8
 8005d4a:	4638      	mov	r0, r7
 8005d4c:	47c8      	blx	r9
 8005d4e:	3001      	adds	r0, #1
 8005d50:	d0e6      	beq.n	8005d20 <_printf_common+0xa4>
 8005d52:	3601      	adds	r6, #1
 8005d54:	e7d9      	b.n	8005d0a <_printf_common+0x8e>
	...

08005d58 <_printf_i>:
 8005d58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005d5c:	7e0f      	ldrb	r7, [r1, #24]
 8005d5e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005d60:	2f78      	cmp	r7, #120	@ 0x78
 8005d62:	4691      	mov	r9, r2
 8005d64:	4680      	mov	r8, r0
 8005d66:	460c      	mov	r4, r1
 8005d68:	469a      	mov	sl, r3
 8005d6a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005d6e:	d807      	bhi.n	8005d80 <_printf_i+0x28>
 8005d70:	2f62      	cmp	r7, #98	@ 0x62
 8005d72:	d80a      	bhi.n	8005d8a <_printf_i+0x32>
 8005d74:	2f00      	cmp	r7, #0
 8005d76:	f000 80d2 	beq.w	8005f1e <_printf_i+0x1c6>
 8005d7a:	2f58      	cmp	r7, #88	@ 0x58
 8005d7c:	f000 80b9 	beq.w	8005ef2 <_printf_i+0x19a>
 8005d80:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005d84:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005d88:	e03a      	b.n	8005e00 <_printf_i+0xa8>
 8005d8a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005d8e:	2b15      	cmp	r3, #21
 8005d90:	d8f6      	bhi.n	8005d80 <_printf_i+0x28>
 8005d92:	a101      	add	r1, pc, #4	@ (adr r1, 8005d98 <_printf_i+0x40>)
 8005d94:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005d98:	08005df1 	.word	0x08005df1
 8005d9c:	08005e05 	.word	0x08005e05
 8005da0:	08005d81 	.word	0x08005d81
 8005da4:	08005d81 	.word	0x08005d81
 8005da8:	08005d81 	.word	0x08005d81
 8005dac:	08005d81 	.word	0x08005d81
 8005db0:	08005e05 	.word	0x08005e05
 8005db4:	08005d81 	.word	0x08005d81
 8005db8:	08005d81 	.word	0x08005d81
 8005dbc:	08005d81 	.word	0x08005d81
 8005dc0:	08005d81 	.word	0x08005d81
 8005dc4:	08005f05 	.word	0x08005f05
 8005dc8:	08005e2f 	.word	0x08005e2f
 8005dcc:	08005ebf 	.word	0x08005ebf
 8005dd0:	08005d81 	.word	0x08005d81
 8005dd4:	08005d81 	.word	0x08005d81
 8005dd8:	08005f27 	.word	0x08005f27
 8005ddc:	08005d81 	.word	0x08005d81
 8005de0:	08005e2f 	.word	0x08005e2f
 8005de4:	08005d81 	.word	0x08005d81
 8005de8:	08005d81 	.word	0x08005d81
 8005dec:	08005ec7 	.word	0x08005ec7
 8005df0:	6833      	ldr	r3, [r6, #0]
 8005df2:	1d1a      	adds	r2, r3, #4
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	6032      	str	r2, [r6, #0]
 8005df8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005dfc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005e00:	2301      	movs	r3, #1
 8005e02:	e09d      	b.n	8005f40 <_printf_i+0x1e8>
 8005e04:	6833      	ldr	r3, [r6, #0]
 8005e06:	6820      	ldr	r0, [r4, #0]
 8005e08:	1d19      	adds	r1, r3, #4
 8005e0a:	6031      	str	r1, [r6, #0]
 8005e0c:	0606      	lsls	r6, r0, #24
 8005e0e:	d501      	bpl.n	8005e14 <_printf_i+0xbc>
 8005e10:	681d      	ldr	r5, [r3, #0]
 8005e12:	e003      	b.n	8005e1c <_printf_i+0xc4>
 8005e14:	0645      	lsls	r5, r0, #25
 8005e16:	d5fb      	bpl.n	8005e10 <_printf_i+0xb8>
 8005e18:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005e1c:	2d00      	cmp	r5, #0
 8005e1e:	da03      	bge.n	8005e28 <_printf_i+0xd0>
 8005e20:	232d      	movs	r3, #45	@ 0x2d
 8005e22:	426d      	negs	r5, r5
 8005e24:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005e28:	4859      	ldr	r0, [pc, #356]	@ (8005f90 <_printf_i+0x238>)
 8005e2a:	230a      	movs	r3, #10
 8005e2c:	e011      	b.n	8005e52 <_printf_i+0xfa>
 8005e2e:	6821      	ldr	r1, [r4, #0]
 8005e30:	6833      	ldr	r3, [r6, #0]
 8005e32:	0608      	lsls	r0, r1, #24
 8005e34:	f853 5b04 	ldr.w	r5, [r3], #4
 8005e38:	d402      	bmi.n	8005e40 <_printf_i+0xe8>
 8005e3a:	0649      	lsls	r1, r1, #25
 8005e3c:	bf48      	it	mi
 8005e3e:	b2ad      	uxthmi	r5, r5
 8005e40:	2f6f      	cmp	r7, #111	@ 0x6f
 8005e42:	4853      	ldr	r0, [pc, #332]	@ (8005f90 <_printf_i+0x238>)
 8005e44:	6033      	str	r3, [r6, #0]
 8005e46:	bf14      	ite	ne
 8005e48:	230a      	movne	r3, #10
 8005e4a:	2308      	moveq	r3, #8
 8005e4c:	2100      	movs	r1, #0
 8005e4e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005e52:	6866      	ldr	r6, [r4, #4]
 8005e54:	60a6      	str	r6, [r4, #8]
 8005e56:	2e00      	cmp	r6, #0
 8005e58:	bfa2      	ittt	ge
 8005e5a:	6821      	ldrge	r1, [r4, #0]
 8005e5c:	f021 0104 	bicge.w	r1, r1, #4
 8005e60:	6021      	strge	r1, [r4, #0]
 8005e62:	b90d      	cbnz	r5, 8005e68 <_printf_i+0x110>
 8005e64:	2e00      	cmp	r6, #0
 8005e66:	d04b      	beq.n	8005f00 <_printf_i+0x1a8>
 8005e68:	4616      	mov	r6, r2
 8005e6a:	fbb5 f1f3 	udiv	r1, r5, r3
 8005e6e:	fb03 5711 	mls	r7, r3, r1, r5
 8005e72:	5dc7      	ldrb	r7, [r0, r7]
 8005e74:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005e78:	462f      	mov	r7, r5
 8005e7a:	42bb      	cmp	r3, r7
 8005e7c:	460d      	mov	r5, r1
 8005e7e:	d9f4      	bls.n	8005e6a <_printf_i+0x112>
 8005e80:	2b08      	cmp	r3, #8
 8005e82:	d10b      	bne.n	8005e9c <_printf_i+0x144>
 8005e84:	6823      	ldr	r3, [r4, #0]
 8005e86:	07df      	lsls	r7, r3, #31
 8005e88:	d508      	bpl.n	8005e9c <_printf_i+0x144>
 8005e8a:	6923      	ldr	r3, [r4, #16]
 8005e8c:	6861      	ldr	r1, [r4, #4]
 8005e8e:	4299      	cmp	r1, r3
 8005e90:	bfde      	ittt	le
 8005e92:	2330      	movle	r3, #48	@ 0x30
 8005e94:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005e98:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005e9c:	1b92      	subs	r2, r2, r6
 8005e9e:	6122      	str	r2, [r4, #16]
 8005ea0:	f8cd a000 	str.w	sl, [sp]
 8005ea4:	464b      	mov	r3, r9
 8005ea6:	aa03      	add	r2, sp, #12
 8005ea8:	4621      	mov	r1, r4
 8005eaa:	4640      	mov	r0, r8
 8005eac:	f7ff fee6 	bl	8005c7c <_printf_common>
 8005eb0:	3001      	adds	r0, #1
 8005eb2:	d14a      	bne.n	8005f4a <_printf_i+0x1f2>
 8005eb4:	f04f 30ff 	mov.w	r0, #4294967295
 8005eb8:	b004      	add	sp, #16
 8005eba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ebe:	6823      	ldr	r3, [r4, #0]
 8005ec0:	f043 0320 	orr.w	r3, r3, #32
 8005ec4:	6023      	str	r3, [r4, #0]
 8005ec6:	4833      	ldr	r0, [pc, #204]	@ (8005f94 <_printf_i+0x23c>)
 8005ec8:	2778      	movs	r7, #120	@ 0x78
 8005eca:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005ece:	6823      	ldr	r3, [r4, #0]
 8005ed0:	6831      	ldr	r1, [r6, #0]
 8005ed2:	061f      	lsls	r7, r3, #24
 8005ed4:	f851 5b04 	ldr.w	r5, [r1], #4
 8005ed8:	d402      	bmi.n	8005ee0 <_printf_i+0x188>
 8005eda:	065f      	lsls	r7, r3, #25
 8005edc:	bf48      	it	mi
 8005ede:	b2ad      	uxthmi	r5, r5
 8005ee0:	6031      	str	r1, [r6, #0]
 8005ee2:	07d9      	lsls	r1, r3, #31
 8005ee4:	bf44      	itt	mi
 8005ee6:	f043 0320 	orrmi.w	r3, r3, #32
 8005eea:	6023      	strmi	r3, [r4, #0]
 8005eec:	b11d      	cbz	r5, 8005ef6 <_printf_i+0x19e>
 8005eee:	2310      	movs	r3, #16
 8005ef0:	e7ac      	b.n	8005e4c <_printf_i+0xf4>
 8005ef2:	4827      	ldr	r0, [pc, #156]	@ (8005f90 <_printf_i+0x238>)
 8005ef4:	e7e9      	b.n	8005eca <_printf_i+0x172>
 8005ef6:	6823      	ldr	r3, [r4, #0]
 8005ef8:	f023 0320 	bic.w	r3, r3, #32
 8005efc:	6023      	str	r3, [r4, #0]
 8005efe:	e7f6      	b.n	8005eee <_printf_i+0x196>
 8005f00:	4616      	mov	r6, r2
 8005f02:	e7bd      	b.n	8005e80 <_printf_i+0x128>
 8005f04:	6833      	ldr	r3, [r6, #0]
 8005f06:	6825      	ldr	r5, [r4, #0]
 8005f08:	6961      	ldr	r1, [r4, #20]
 8005f0a:	1d18      	adds	r0, r3, #4
 8005f0c:	6030      	str	r0, [r6, #0]
 8005f0e:	062e      	lsls	r6, r5, #24
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	d501      	bpl.n	8005f18 <_printf_i+0x1c0>
 8005f14:	6019      	str	r1, [r3, #0]
 8005f16:	e002      	b.n	8005f1e <_printf_i+0x1c6>
 8005f18:	0668      	lsls	r0, r5, #25
 8005f1a:	d5fb      	bpl.n	8005f14 <_printf_i+0x1bc>
 8005f1c:	8019      	strh	r1, [r3, #0]
 8005f1e:	2300      	movs	r3, #0
 8005f20:	6123      	str	r3, [r4, #16]
 8005f22:	4616      	mov	r6, r2
 8005f24:	e7bc      	b.n	8005ea0 <_printf_i+0x148>
 8005f26:	6833      	ldr	r3, [r6, #0]
 8005f28:	1d1a      	adds	r2, r3, #4
 8005f2a:	6032      	str	r2, [r6, #0]
 8005f2c:	681e      	ldr	r6, [r3, #0]
 8005f2e:	6862      	ldr	r2, [r4, #4]
 8005f30:	2100      	movs	r1, #0
 8005f32:	4630      	mov	r0, r6
 8005f34:	f7fa f954 	bl	80001e0 <memchr>
 8005f38:	b108      	cbz	r0, 8005f3e <_printf_i+0x1e6>
 8005f3a:	1b80      	subs	r0, r0, r6
 8005f3c:	6060      	str	r0, [r4, #4]
 8005f3e:	6863      	ldr	r3, [r4, #4]
 8005f40:	6123      	str	r3, [r4, #16]
 8005f42:	2300      	movs	r3, #0
 8005f44:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005f48:	e7aa      	b.n	8005ea0 <_printf_i+0x148>
 8005f4a:	6923      	ldr	r3, [r4, #16]
 8005f4c:	4632      	mov	r2, r6
 8005f4e:	4649      	mov	r1, r9
 8005f50:	4640      	mov	r0, r8
 8005f52:	47d0      	blx	sl
 8005f54:	3001      	adds	r0, #1
 8005f56:	d0ad      	beq.n	8005eb4 <_printf_i+0x15c>
 8005f58:	6823      	ldr	r3, [r4, #0]
 8005f5a:	079b      	lsls	r3, r3, #30
 8005f5c:	d413      	bmi.n	8005f86 <_printf_i+0x22e>
 8005f5e:	68e0      	ldr	r0, [r4, #12]
 8005f60:	9b03      	ldr	r3, [sp, #12]
 8005f62:	4298      	cmp	r0, r3
 8005f64:	bfb8      	it	lt
 8005f66:	4618      	movlt	r0, r3
 8005f68:	e7a6      	b.n	8005eb8 <_printf_i+0x160>
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	4632      	mov	r2, r6
 8005f6e:	4649      	mov	r1, r9
 8005f70:	4640      	mov	r0, r8
 8005f72:	47d0      	blx	sl
 8005f74:	3001      	adds	r0, #1
 8005f76:	d09d      	beq.n	8005eb4 <_printf_i+0x15c>
 8005f78:	3501      	adds	r5, #1
 8005f7a:	68e3      	ldr	r3, [r4, #12]
 8005f7c:	9903      	ldr	r1, [sp, #12]
 8005f7e:	1a5b      	subs	r3, r3, r1
 8005f80:	42ab      	cmp	r3, r5
 8005f82:	dcf2      	bgt.n	8005f6a <_printf_i+0x212>
 8005f84:	e7eb      	b.n	8005f5e <_printf_i+0x206>
 8005f86:	2500      	movs	r5, #0
 8005f88:	f104 0619 	add.w	r6, r4, #25
 8005f8c:	e7f5      	b.n	8005f7a <_printf_i+0x222>
 8005f8e:	bf00      	nop
 8005f90:	0800698d 	.word	0x0800698d
 8005f94:	0800699e 	.word	0x0800699e

08005f98 <memmove>:
 8005f98:	4288      	cmp	r0, r1
 8005f9a:	b510      	push	{r4, lr}
 8005f9c:	eb01 0402 	add.w	r4, r1, r2
 8005fa0:	d902      	bls.n	8005fa8 <memmove+0x10>
 8005fa2:	4284      	cmp	r4, r0
 8005fa4:	4623      	mov	r3, r4
 8005fa6:	d807      	bhi.n	8005fb8 <memmove+0x20>
 8005fa8:	1e43      	subs	r3, r0, #1
 8005faa:	42a1      	cmp	r1, r4
 8005fac:	d008      	beq.n	8005fc0 <memmove+0x28>
 8005fae:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005fb2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005fb6:	e7f8      	b.n	8005faa <memmove+0x12>
 8005fb8:	4402      	add	r2, r0
 8005fba:	4601      	mov	r1, r0
 8005fbc:	428a      	cmp	r2, r1
 8005fbe:	d100      	bne.n	8005fc2 <memmove+0x2a>
 8005fc0:	bd10      	pop	{r4, pc}
 8005fc2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005fc6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005fca:	e7f7      	b.n	8005fbc <memmove+0x24>

08005fcc <_sbrk_r>:
 8005fcc:	b538      	push	{r3, r4, r5, lr}
 8005fce:	4d06      	ldr	r5, [pc, #24]	@ (8005fe8 <_sbrk_r+0x1c>)
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	4604      	mov	r4, r0
 8005fd4:	4608      	mov	r0, r1
 8005fd6:	602b      	str	r3, [r5, #0]
 8005fd8:	f7fb fc68 	bl	80018ac <_sbrk>
 8005fdc:	1c43      	adds	r3, r0, #1
 8005fde:	d102      	bne.n	8005fe6 <_sbrk_r+0x1a>
 8005fe0:	682b      	ldr	r3, [r5, #0]
 8005fe2:	b103      	cbz	r3, 8005fe6 <_sbrk_r+0x1a>
 8005fe4:	6023      	str	r3, [r4, #0]
 8005fe6:	bd38      	pop	{r3, r4, r5, pc}
 8005fe8:	200014c4 	.word	0x200014c4

08005fec <memcpy>:
 8005fec:	440a      	add	r2, r1
 8005fee:	4291      	cmp	r1, r2
 8005ff0:	f100 33ff 	add.w	r3, r0, #4294967295
 8005ff4:	d100      	bne.n	8005ff8 <memcpy+0xc>
 8005ff6:	4770      	bx	lr
 8005ff8:	b510      	push	{r4, lr}
 8005ffa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005ffe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006002:	4291      	cmp	r1, r2
 8006004:	d1f9      	bne.n	8005ffa <memcpy+0xe>
 8006006:	bd10      	pop	{r4, pc}

08006008 <_realloc_r>:
 8006008:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800600c:	4680      	mov	r8, r0
 800600e:	4615      	mov	r5, r2
 8006010:	460c      	mov	r4, r1
 8006012:	b921      	cbnz	r1, 800601e <_realloc_r+0x16>
 8006014:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006018:	4611      	mov	r1, r2
 800601a:	f7ff bc4b 	b.w	80058b4 <_malloc_r>
 800601e:	b92a      	cbnz	r2, 800602c <_realloc_r+0x24>
 8006020:	f7ff fbdc 	bl	80057dc <_free_r>
 8006024:	2400      	movs	r4, #0
 8006026:	4620      	mov	r0, r4
 8006028:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800602c:	f000 f81a 	bl	8006064 <_malloc_usable_size_r>
 8006030:	4285      	cmp	r5, r0
 8006032:	4606      	mov	r6, r0
 8006034:	d802      	bhi.n	800603c <_realloc_r+0x34>
 8006036:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800603a:	d8f4      	bhi.n	8006026 <_realloc_r+0x1e>
 800603c:	4629      	mov	r1, r5
 800603e:	4640      	mov	r0, r8
 8006040:	f7ff fc38 	bl	80058b4 <_malloc_r>
 8006044:	4607      	mov	r7, r0
 8006046:	2800      	cmp	r0, #0
 8006048:	d0ec      	beq.n	8006024 <_realloc_r+0x1c>
 800604a:	42b5      	cmp	r5, r6
 800604c:	462a      	mov	r2, r5
 800604e:	4621      	mov	r1, r4
 8006050:	bf28      	it	cs
 8006052:	4632      	movcs	r2, r6
 8006054:	f7ff ffca 	bl	8005fec <memcpy>
 8006058:	4621      	mov	r1, r4
 800605a:	4640      	mov	r0, r8
 800605c:	f7ff fbbe 	bl	80057dc <_free_r>
 8006060:	463c      	mov	r4, r7
 8006062:	e7e0      	b.n	8006026 <_realloc_r+0x1e>

08006064 <_malloc_usable_size_r>:
 8006064:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006068:	1f18      	subs	r0, r3, #4
 800606a:	2b00      	cmp	r3, #0
 800606c:	bfbc      	itt	lt
 800606e:	580b      	ldrlt	r3, [r1, r0]
 8006070:	18c0      	addlt	r0, r0, r3
 8006072:	4770      	bx	lr

08006074 <_init>:
 8006074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006076:	bf00      	nop
 8006078:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800607a:	bc08      	pop	{r3}
 800607c:	469e      	mov	lr, r3
 800607e:	4770      	bx	lr

08006080 <_fini>:
 8006080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006082:	bf00      	nop
 8006084:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006086:	bc08      	pop	{r3}
 8006088:	469e      	mov	lr, r3
 800608a:	4770      	bx	lr
